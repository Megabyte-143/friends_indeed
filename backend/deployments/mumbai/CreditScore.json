{
  "address": "0x39C0b0ec96e7710D752f54f1fc309BC5Fec4F3d3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creditLogic",
      "outputs": [
        {
          "internalType": "contract CreditLogic",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAlreadyMinted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x47f6b3c7f567f97bdfd36b35647c74db4b1e704697f38c60148a9b33638fb256",
  "receipt": {
    "to": null,
    "from": "0xC3A3362DC30588a027767063459dC533Dc4A421a",
    "contractAddress": "0x39C0b0ec96e7710D752f54f1fc309BC5Fec4F3d3",
    "transactionIndex": 0,
    "gasUsed": "3804752",
    "logsBloom": "0x
    "blockHash": "0xdb5aeb77e5e8c2e3e65e815ad324bfb0a59d309654d5ef0ef8a309e6cc0c145b",
    "transactionHash": "0x47f6b3c7f567f97bdfd36b35647c74db4b1e704697f38c60148a9b33638fb256",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 27312904,
        "transactionHash": "0x47f6b3c7f567f97bdfd36b35647c74db4b1e704697f38c60148a9b33638fb256",
        "address": "0x39C0b0ec96e7710D752f54f1fc309BC5Fec4F3d3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c3a3362dc30588a027767063459dc533dc4a421a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xdb5aeb77e5e8c2e3e65e815ad324bfb0a59d309654d5ef0ef8a309e6cc0c145b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 27312904,
        "transactionHash": "0x47f6b3c7f567f97bdfd36b35647c74db4b1e704697f38c60148a9b33638fb256",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c3a3362dc30588a027767063459dc533dc4a421a",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001d4a76e9d4441900000000000000000000000000000000000000000000000003893bf3e0db41b7500000000000000000000000000000000000000000000050f1ec92c43fa87731f00000000000000000000000000000000000000000000000036bf17cf706fd9e500000000000000000000000000000000000000000000050f209dd3b297cbb4af",
        "logIndex": 1,
        "blockHash": "0xdb5aeb77e5e8c2e3e65e815ad324bfb0a59d309654d5ef0ef8a309e6cc0c145b"
      }
    ],
    "blockNumber": 27312904,
    "cumulativeGasUsed": "3804752",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x623a957272c015Fe4A3646874cCe78864945EAe2"
  ],
  "numDeployments": 1,
  "solcInputHash": "5205c092fd4ffcf082497c6e27bb8f53",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditLogic\",\"outputs\":[{\"internalType\":\"contract CreditLogic\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAlreadyMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CreditScore.sol\":\"CreditScore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/KeeperBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract KeeperBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5dc972fdf3a524312e68ef6d2e58bcdaf965d08d9415aefa289207350c2bc85a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./KeeperBase.sol\\\";\\nimport \\\"./interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\\n\",\"keccak256\":\"0xfdb84fea1ee213662ae66b95d4f620be73b7af5ede58be3d330b222b9b566d95\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/CreditLogic.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"./p2p/Deal.sol\\\";\\nimport \\\"./interfaces/IStark.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract CreditLogic is Context, Ownable {\\n    // deal_contract private dealContract;\\n    Istark_protocol starkContract;\\n    address private starkProtocolAddress;\\n    address[] private borrowers;\\n    address[] private lenders;\\n\\n    function setStarkAddress(address _starkProtocolAddress) external onlyOwner {\\n        starkContract = Istark_protocol(_starkProtocolAddress);\\n        starkProtocolAddress = _starkProtocolAddress;\\n    }\\n\\n    // struct P2PRequest {\\n    //     address borrower; // * Address of the borrower\\n    //     address lender; // * Address of the Lender\\n    //     address dealAddress; // * Address of the Deal Contract\\n    //     address tokenAddress;\\n    //     uint256 instalmentAmount; //* Amount to be paid in each instalment\\n    //     uint256 totalAmount; // * Total Amount borrowed\\n    //     uint256 interestRate; // * Interest Rate by the Lender\\n    //     uint16 noOfInstalments; // * No of Instalments\\n    //     bool requestAccepted; // * Request Raised by the lender accepted or not\\n    // }\\n\\n    struct GuarantyRequest {\\n        address borrower; // * Address of the borrower\\n        address lender; // * Address of the Lender\\n        address dealAddress;\\n        address tokenAddress;\\n        uint256 totalAmount; // * Amount looking for the guaranty\\n        uint256 timeRentedUntil;\\n        uint256 timeRentedSince;\\n        bool requestAccepted; // * Request Raised by the lender accepted or not\\n    }\\n\\n    // * To store all the GuarantyRequest made in the protocol\\n    // guarantyRequests[_lender][_borrower]\\n    mapping(address => mapping(address => GuarantyRequest)) private guarantyRequests;\\n\\n    // * To store all the p2pRequests made in the protocol\\n    // lender & borrower -> request\\n    // mapping(address => mapping(address => P2PRequest)) private p2pRequests;\\n\\n    ///////////////////////\\n    //// p2p functions ///\\n    //////////////////////\\n\\n    // * FUNCTION: To deploy the Deal Contract\\n    // function p2pDeploy(address _lender, address _borrower) internal {\\n    //     P2PRequest memory requestDetails = p2pRequests[_lender][_borrower];\\n\\n    //     dealContract = new deal_contract(\\n    //         requestDetails.borrower,\\n    //         requestDetails.lender,\\n    //         starkProtocolAddress,\\n    //         requestDetails.tokenAddress,\\n    //         requestDetails.instalmentAmount,\\n    //         requestDetails.totalAmount,\\n    //         requestDetails.interestRate,\\n    //         requestDetails.noOfInstalments\\n    //     );\\n\\n    //     p2pRequests[requestDetails.lender][requestDetails.borrower].dealAddress = address(\\n    //         dealContract\\n    //     );\\n\\n    //     starkContract.addAllowContracts(address(dealContract));\\n\\n    //     // emit Event to notify both lender and borrower\\n    // }\\n\\n    // // * FUNCTION: To raise the P2PRequest to borrow\\n    // function p2pRaiseRequest(\\n    //     uint256 _instalmentAmount,\\n    //     uint256 _totalAmount,\\n    //     uint256 _interestRate,\\n    //     uint16 _noOfInstalments,\\n    //     address _lender,\\n    //     address _tokenAddress\\n    // ) external {\\n    //     require(!p2pRequests[_lender][_msgSender()].requestAccepted, \\\"ERR:RA\\\"); // RA => Request Accepted\\n\\n    //     P2PRequest memory requestDetails;\\n\\n    //     requestDetails.borrower = _msgSender();\\n    //     requestDetails.lender = _lender;\\n    //     requestDetails.instalmentAmount = _instalmentAmount;\\n    //     requestDetails.totalAmount = _totalAmount;\\n    //     requestDetails.interestRate = _interestRate;\\n    //     requestDetails.noOfInstalments = _noOfInstalments;\\n    //     requestDetails.tokenAddress = _tokenAddress;\\n\\n    //     p2pRequests[_lender][_msgSender()] = requestDetails;\\n\\n    //     // emit event to notify lender\\n    // }\\n\\n    // // * FUNCTION: To accept the P2PRequest made by the borrower\\n    // function p2pAcceptRequest(address _borrower) external payable {\\n    //     P2PRequest memory requestDetails = p2pRequests[_msgSender()][_borrower];\\n\\n    //     require(!requestDetails.requestAccepted, \\\"ERR:AA\\\"); // AA =>Already Accepted\\n    //     uint256 tokenAmountinProtocol = starkContract.getSupplyBalance(\\n    //         requestDetails.tokenAddress,\\n    //         _msgSender()\\n    //     );\\n    //     require(requestDetails.totalAmount <= tokenAmountinProtocol, \\\"ERR:NE\\\"); // NA => Not Enough Amount\\n\\n    //     starkContract.lockBalanceChanges(\\n    //         requestDetails.tokenAddress,\\n    //         _msgSender(),\\n    //         _borrower,\\n    //         requestDetails.totalAmount\\n    //     );\\n\\n    //     p2pRequests[_msgSender()][_borrower].requestAccepted = true;\\n\\n    //     p2pDeploy(_msgSender(), _borrower);\\n\\n    //     // emit event to notify borrower\\n    // }\\n\\n    ////////////////////////////\\n    ///// guaranty functions ///\\n    ////////////////////////////\\n\\n    // * FUNCTION: To raise the request for backing the loan from the protocol\\n    function guarantyRaiseRequest(\\n        address _lender,\\n        address _tokenAddress,\\n        uint256 _totalAmount,\\n        uint256 _timeRentedUntil\\n    ) external {\\n        require(!guarantyRequests[_lender][_msgSender()].requestAccepted, \\\"Err: Already Raised\\\");\\n\\n        GuarantyRequest memory requestDetails;\\n        requestDetails.borrower = _msgSender();\\n        requestDetails.lender = _lender;\\n        requestDetails.totalAmount = _totalAmount;\\n        requestDetails.timeRentedUntil = _timeRentedUntil;\\n        requestDetails.tokenAddress = _tokenAddress;\\n        borrowers.push(_msgSender());\\n\\n        guarantyRequests[_lender][_msgSender()] = requestDetails;\\n        // emit event to notify lender\\n    }\\n\\n    // * FUNCTION: To accept the GuarantyRequest made by the borrower\\n    function guarantyAcceptRequest(address _borrower) external {\\n        GuarantyRequest memory requestDetails = guarantyRequests[_msgSender()][_borrower];\\n\\n        require(!requestDetails.requestAccepted, \\\"ERR: Already Accepted\\\"); // AA =>Already Accepted\\n\\n        uint256 tokenAmountinProtocol = starkContract.getSupplyBalance(\\n            requestDetails.tokenAddress,\\n            _msgSender()\\n        );\\n\\n        require(requestDetails.totalAmount <= tokenAmountinProtocol, \\\"ERR: Not Enough Amount\\\"); // NA => Not Enough Amount\\n\\n        starkContract.lockBalanceChanges(\\n            requestDetails.tokenAddress,\\n            _msgSender(),\\n            _borrower,\\n            requestDetails.totalAmount\\n        );\\n\\n        lenders.push(_msgSender());\\n\\n        requestDetails.timeRentedSince = block.timestamp;\\n\\n        guarantyRequests[_msgSender()][_borrower].requestAccepted = true;\\n        // emit event to notify borrower\\n    }\\n\\n    //////////////////////////\\n    ///// getter functions ///\\n    /////////////////////////\\n\\n    // * FUNCTION: To get the p2pRequests made by a particualr address\\n    // function getP2PRequest(address _lender, address _borrower)\\n    //     external\\n    //     view\\n    //     returns (P2PRequest memory)\\n    // {\\n    //     return p2pRequests[_lender][_borrower];\\n    // }\\n\\n    // * FUNCTION: To get the p2pRequests made by a particualr address\\n    function getGuarantyRequest(address _lender, address _borrower)\\n        external\\n        view\\n        returns (GuarantyRequest memory)\\n    {\\n        return guarantyRequests[_lender][_borrower];\\n    }\\n\\n    function getBorrowers() external view returns (address[] memory) {\\n        return borrowers;\\n    }\\n\\n    function getLenders() external view returns (address[] memory) {\\n        return lenders;\\n    }\\n}\\n\",\"keccak256\":\"0x1417b06701dde39959223f779e819ff0906dfc84f5058d512f5c29ab4437f8a0\",\"license\":\"MIT\"},\"contracts/CreditScore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\\\";\\nimport \\\"./CreditLogic.sol\\\";\\n\\ncontract CreditScore is Context, ERC721URIStorage, Ownable, KeeperCompatibleInterface {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIds;\\n    uint256 private score = 100;\\n    string private color = \\\"#fdff00\\\";\\n    uint256 private lastTimeStamp;\\n    uint256[] private allTokenIds;\\n    CreditLogic public creditLogic;\\n    address private sbtOwner;\\n\\n    string private constant STARTING_SVG =\\n        '<svg id=\\\"eChK4yXtexE1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" viewBox=\\\"0 0 300 300\\\" shape-rendering=\\\"geometricPrecision\\\" text-rendering=\\\"geometricPrecision\\\" width=\\\"450\\\" height=\\\"300\\\" style=\\\"background-color:';\\n    // in b/w color credit score will come\\n    // red -> #FF0000\\n    // yellow -> #fdff00\\n    // green -> #00FF00\\n    string private constant MIDDLE_SVG =\\n        '\\\"><text dx=\\\"0\\\" dy=\\\"0\\\" font-family=\\\"&quot;Roboto&quot;\\\" font-size=\\\"15\\\" font-weight=\\\"400\\\" transform=\\\"matrix(4.917124 0 0 5.062497 87.876901 175.927052)\\\" stroke-width=\\\"0\\\"><tspan y=\\\"0\\\" font-weight=\\\"400\\\" stroke-width=\\\"0\\\">';\\n    // in b/w credit score will come\\n    string private constant ENDING_SVG = \\\"</tspan></text></svg>\\\";\\n\\n    modifier notMinted() {\\n        for (uint256 i = 0; i < allTokenIds.length; i++) {\\n            address _owner = this.ownerOf(allTokenIds[i]);\\n            require(_owner != msg.sender, \\\"Already minted!\\\");\\n        }\\n        _;\\n    }\\n\\n    constructor(address _address) ERC721(\\\"Stark Credit Score\\\", \\\"SCS\\\") {\\n        creditLogic = CreditLogic(_address);\\n        lastTimeStamp = block.timestamp;\\n    }\\n\\n    function safeMint() public notMinted returns (uint256) {\\n        uint256 newItemId = _tokenIds.current();\\n\\n        string memory _image = string.concat(\\n            STARTING_SVG,\\n            color,\\n            MIDDLE_SVG,\\n            Strings.toString(score),\\n            ENDING_SVG\\n        );\\n\\n        string memory finalTokenUri = string.concat(\\n            '{\\\"name\\\": \\\"Credit Score\\\", \\\"description\\\": \\\"A Credit Score SBT provided by Stark\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n            Base64.encode(bytes(_image)),\\n            '\\\"}'\\n        );\\n\\n        _safeMint(msg.sender, newItemId);\\n        _setTokenURI(newItemId, finalTokenUri);\\n        sbtOwner = msg.sender;\\n        allTokenIds.push(newItemId);\\n        _tokenIds.increment();\\n        return newItemId;\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        upkeepNeeded = (block.timestamp - lastTimeStamp) > 2628002;\\n        return (upkeepNeeded, \\\"0x0\\\");\\n    }\\n\\n    // * FUNCTION: performUpkeep function from chainlink keepers\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n\\n        require(upkeepNeeded, \\\"Upkeep not needed!\\\");\\n\\n        address[] memory lenders = creditLogic.getLenders();\\n\\n        for (uint256 i = 0; i < lenders.length; i++) {\\n            CreditLogic.GuarantyRequest memory request = creditLogic.getGuarantyRequest(\\n                lenders[i],\\n                sbtOwner\\n            );\\n\\n            if (request.totalAmount > 0 && request.timeRentedSince > request.timeRentedUntil) {\\n                score -= 10;\\n            } else {\\n                score += 10;\\n            }\\n        }\\n\\n        if (score < 100) {\\n            color = \\\"#FF0000\\\";\\n        } else if (score > 300) {\\n            color = \\\"#00FF00\\\";\\n        } else {\\n            color = \\\"#fdff00\\\";\\n        }\\n\\n        lastTimeStamp = block.timestamp;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        require(from == address(0), \\\"Err: token transfer is BLOCKED\\\");\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function isAlreadyMinted() external view returns (bool) {\\n        bool minted;\\n\\n        for (uint256 i = 0; i < allTokenIds.length; i++) {\\n            address _owner = this.ownerOf(allTokenIds[i]);\\n            if (_owner == msg.sender) {\\n                minted = true;\\n            }\\n        }\\n        return minted;\\n    }\\n}\\n\",\"keccak256\":\"0xc29c57cee9e07967d0a8fb07bbe167cc8e06035e190dc02b063c424e3b29e708\",\"license\":\"MIT\"},\"contracts/interfaces/IStark.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface Istark_protocol {\\n    function getSupplyBalance(address tokenAddress, address userAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLockedBalance(address tokenAddress, address userAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function lockBalanceChanges(\\n        address _tokenAddress,\\n        address _lender,\\n        address _borrower,\\n        uint256 _tokenAmount\\n    ) external;\\n\\n    function addAllowContracts(address _contractAddress) external;\\n\\n    function repayChanges(\\n        address _tokenAddress,\\n        address _lender,\\n        address _borrower,\\n        uint256 _tokenAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf40376d4d0dd545f2712788282994aa3b1677e3800fed6bf5c5bc5abd5d9b423\",\"license\":\"MIT\"},\"contracts/p2p/Deal.sol\":{\"content\":\"// //SPDX-License-Identifier: Unlicense\\n// pragma solidity 0.8.15;\\n\\n// import \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n// import \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n// import \\\"../interfaces/IStark.sol\\\";\\n\\n// contract deal_contract is Context {\\n//     using SafeMath for uint256;\\n\\n//     address private deployer;\\n//     address private borrower;\\n//     address private lender;\\n\\n//     Istark_protocol starkContract;\\n\\n//     struct DealDetials {\\n//         address tokenAddress;\\n//         uint256 totalAmount; // * Total amount borrowed by the borrower\\n//         uint256 totalAmountToPay; // * Total amount including interest left to be paid\\n//         uint256 amountPaidTotal; // * Amount paid by the borrower in total\\n//         uint256 instalmentAmt; // * Amount to be paid per insalment\\n//         uint256 timeRentedSince; // * Time when the deal started\\n//         uint256 interestRate; // * Interest rate decided by the lender.\\n//         uint256 addedInterestRate; // * Additional Interest Rate for additional no. of instalments.\\n//         uint16 noOfInstalments; // * No of instalments in which borrower will pay amount\\n//         bool addedInstalments; // * If borrower got more instalments after request.\\n//     }\\n\\n//     DealDetials private deal;\\n\\n//     struct AdditionalRequest {\\n//         uint16 noOfInstalments; // * No of additional instalments\\n//         uint256 interestRate; // * Interest Rate\\n//         bool isAccepted; // * Request Accepted or Not\\n//     }\\n\\n//     mapping(address => AdditionalRequest) additionRequest;\\n\\n//     constructor(\\n//         address _borrower,\\n//         address _lender,\\n//         address _starkAddress,\\n//         address _tokenAddress,\\n//         uint256 _instalmentAmount,\\n//         uint256 _totalAmount,\\n//         uint256 _interestRate,\\n//         uint16 _noOfInstalments\\n//     ) {\\n//         deployer = _msgSender();\\n//         borrower = _borrower;\\n//         lender = _lender;\\n//         starkContract = Istark_protocol(_starkAddress);\\n\\n//         DealDetials storage dealDetails = deal;\\n\\n//         dealDetails.noOfInstalments = _noOfInstalments;\\n//         dealDetails.totalAmount = _totalAmount;\\n//         dealDetails.interestRate = _interestRate;\\n//         dealDetails.timeRentedSince = uint256(block.timestamp);\\n//         dealDetails.instalmentAmt = getInstalmentAmount(_instalmentAmount);\\n//         dealDetails.totalAmountToPay = _totalAmount + dealDetails.instalmentAmt;\\n//         dealDetails.tokenAddress = _tokenAddress;\\n//     }\\n\\n//     modifier onlyBorrower() {\\n//         require(msg.sender == borrower, \\\"ERR:BO\\\"); // BO => Borrower only\\n//         _;\\n//     }\\n\\n//     modifier onlyLender() {\\n//         require(msg.sender == lender, \\\"ERR:LO\\\"); // BL => Lender only\\n//         _;\\n//     }\\n\\n//     // * FUNCTION: To get the address of the borrower.\\n//     function getBorrower() public view returns (address) {\\n//         return borrower;\\n//     }\\n\\n//     // * FUNCTION: To get the address of the lender.\\n//     function getLender() public view returns (address) {\\n//         return lender;\\n//     }\\n\\n//     // * FUNCTION: To get the detials of the Deal.\\n//     function getDealDetails() public view returns (DealDetials memory) {\\n//         return deal;\\n//     }\\n\\n//     // * FUNCTION: To get the Instalment Amount\\n//     function getInstalmentAmount(uint256 _instalmentAmount) public view returns (uint256) {\\n//         DealDetials memory dealDetails = deal;\\n//         uint256 interestAmount = (_instalmentAmount * dealDetails.interestRate).div(\\n//             uint256(dealDetails.noOfInstalments  * 100)\\n//         );\\n\\n//         uint256 instalmentAmount = _instalmentAmount + interestAmount;\\n//         return instalmentAmount;\\n//     }\\n\\n//     // * FUNCTION: To get the number of instalments\\n//     function getNoOfInstalments() public view returns (uint16) {\\n//         return deal.noOfInstalments;\\n//     }\\n\\n//     // * FUNCTION: To get the total amount owed\\n//     function getTotalAmountOwed() public view returns (uint256) {\\n//         return deal.totalAmount;\\n//     }\\n\\n//     // * FUNCTION: To get the amount left to be paid\\n//     function getTotalAmountLeft() public view returns (uint256) {\\n//         return deal.totalAmountToPay;\\n//     }\\n\\n//     // * FUNCTION: To get the interest rate\\n//     function getInterestRate() public view returns (uint256) {\\n//         return deal.interestRate;\\n//     }\\n\\n//     // * FUNCTION: Pay the amount left at once\\n//     function payAtOnce() external onlyBorrower {\\n//         DealDetials memory dealDetails = deal;\\n//         require(dealDetails.noOfInstalments > 0, \\\"ERR:NM\\\"); // NM => No more installments\\n//         require(dealDetails.amountPaidTotal < dealDetails.totalAmount, \\\"ERR:NM\\\"); // NM => No more installments\\n\\n//         // uint256 value = msg.value;\\n//         uint256 amountLeftToPay = getTotalAmountLeft();\\n//         // require(value == amountLeftToPay, \\\"ERR:WV\\\"); // WV => Wrong value\\n\\n//         starkContract.repayChanges(dealDetails.tokenAddress, lender, borrower, amountLeftToPay);\\n\\n//         deal.amountPaidTotal += amountLeftToPay;\\n//         deal.totalAmountToPay -= amountLeftToPay;\\n//     }\\n\\n//     // * FUNCTION: Pay the pre-defined amount in instalments not necessarily periodically.\\n//     function payInInstalment() external payable onlyBorrower {\\n//         DealDetials memory dealDetails = deal;\\n\\n//         require(dealDetails.noOfInstalments > 0, \\\"ERR:NM\\\"); // NM => No more installments\\n//         require(dealDetails.amountPaidTotal < dealDetails.totalAmount, \\\"ERR:NM\\\"); // NM => No more installments\\n\\n//         // * amtToLenderOnly: Amount with standard interest\\n//         uint256 amtToLenderOnly = dealDetails.instalmentAmt;\\n\\n//         if (dealDetails.addedInstalments) {\\n//             // * totalInterestedAmount: Amount after additional interest is added\\n//             uint256 totalInterestedAmount = amtToLenderOnly +\\n//                 (dealDetails.addedInterestRate * dealDetails.instalmentAmt);\\n\\n//             // require(value == totalInterestedAmount, \\\"ERR:WV\\\"); // WV => Wrong value\\n\\n//             // * amtToLender: Amount after with 95% of additional interest is added\\n//             uint256 amtToLender = amtToLenderOnly +\\n//                 (dealDetails.instalmentAmt * dealDetails.addedInterestRate * 95 * 10**16);\\n\\n//             // * amtToProtocol: Amount after with 5% of additional interest is added\\n//             uint256 amtToProtocol = dealDetails.instalmentAmt *\\n//                 dealDetails.addedInterestRate *\\n//                 5 *\\n//                 10**16;\\n\\n//             // (bool successInLender, ) = lender.call{value: amtToLender}(\\\"\\\");\\n//             // require(successInLender, \\\"ERR:OT\\\"); //OT => On Transfer\\n\\n//             starkContract.repayChanges(dealDetails.tokenAddress, lender, borrower, amtToLender);\\n\\n//             // (bool successInBorrower, ) = deployer.call{value: amtToProtocol}(\\\"\\\");\\n//             // require(successInBorrower, \\\"ERR:OT\\\"); //OT => On Transfer\\n//             deal.amountPaidTotal += amtToLender;\\n//             deal.totalAmountToPay -= amtToLender;\\n//             //! TODO: Function to pass the value to the protocol\\n//         } else {\\n//             starkContract.repayChanges(\\n//                 dealDetails.tokenAddress,\\n//                 lender,\\n//                 borrower,\\n//                 amtToLenderOnly\\n//             );\\n\\n//             deal.amountPaidTotal += amtToLenderOnly;\\n//             deal.totalAmountToPay -= amtToLenderOnly;\\n//         }\\n//         --deal.noOfInstalments;\\n//     }\\n\\n//     // * FUNCTION: Request the Lender for more instalments\\n//     function requestNoOfInstalment(uint16 noOfAddInstalments, uint256 _interestRate)\\n//         external\\n//         onlyBorrower\\n//     {\\n//         require(noOfAddInstalments >= 3, \\\"ERR:MR\\\"); // MR => Minimum required no of instalments\\n\\n//         additionRequest[_msgSender()] = AdditionalRequest(\\n//             noOfAddInstalments,\\n//             _interestRate,\\n//             false\\n//         );\\n\\n//         // emit event\\n//     }\\n\\n//     // * FUNCTION: Accept the request made the Lender for more instalments\\n//     function acceptRequestOfInstalment(\\n//         address _borrower,\\n//         uint16 _noOfAddInstalments,\\n//         uint256 _interestRate\\n//     ) external onlyLender {\\n//         require(!additionRequest[_borrower].isAccepted, \\\"ERR:AA\\\"); // AA => Already Accepted\\n\\n//         additionRequest[_borrower].isAccepted = true;\\n\\n//         deal.noOfInstalments += _noOfAddInstalments;\\n//         deal.addedInterestRate = _interestRate;\\n//         deal.addedInstalments = true;\\n//     }\\n// }\\n\",\"keccak256\":\"0x644f28ad932473b5c85dca106f1d1bd8e1c5e2f138e6dd7d42fc7e279ff77f9c\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405260646009556040518060400160405280600781526020017f2366646666303000000000000000000000000000000000000000000000000000815250600a90816200004f9190620004cc565b503480156200005d57600080fd5b50604051620047383803806200473883398181016040528101906200008391906200061d565b6040518060400160405280601281526020017f537461726b204372656469742053636f726500000000000000000000000000008152506040518060400160405280600381526020017f53435300000000000000000000000000000000000000000000000000000000008152508160009081620001009190620004cc565b508060019081620001129190620004cc565b50505062000135620001296200018460201b60201c565b6200018c60201b60201c565b80600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600b81905550506200064f565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620002d457607f821691505b602082108103620002ea57620002e96200028c565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000315565b62000360868362000315565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003ad620003a7620003a18462000378565b62000382565b62000378565b9050919050565b6000819050919050565b620003c9836200038c565b620003e1620003d882620003b4565b84845462000322565b825550505050565b600090565b620003f8620003e9565b62000405818484620003be565b505050565b5b818110156200042d5762000421600082620003ee565b6001810190506200040b565b5050565b601f8211156200047c576200044681620002f0565b620004518462000305565b8101602085101562000461578190505b62000479620004708562000305565b8301826200040a565b50505b505050565b600082821c905092915050565b6000620004a16000198460080262000481565b1980831691505092915050565b6000620004bc83836200048e565b9150826002028217905092915050565b620004d78262000252565b67ffffffffffffffff811115620004f357620004f26200025d565b5b620004ff8254620002bb565b6200050c82828562000431565b600060209050601f8311600181146200054457600084156200052f578287015190505b6200053b8582620004ae565b865550620005ab565b601f1984166200055486620002f0565b60005b828110156200057e5784890151825560018201915060208501945060208101905062000557565b868310156200059e57848901516200059a601f8916826200048e565b8355505b6001600288020188555050505b505050505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620005e582620005b8565b9050919050565b620005f781620005d8565b81146200060357600080fd5b50565b6000815190506200061781620005ec565b92915050565b600060208284031215620006365762000635620005b3565b5b6000620006468482850162000606565b91505092915050565b6140d9806200065f6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80636e04ff0d116100b8578063a22cb4651161007c578063a22cb4651461033d578063b88d4fde14610359578063c87b56dd14610375578063cea9b30a146103a5578063e985e9c5146103c3578063f2fde38b146103f357610137565b80636e04ff0d1461029657806370a08231146102c7578063715018a6146102f75780638da5cb5b1461030157806395d89b411461031f57610137565b806342842e0e116100ff57806342842e0e146101f25780634585e33b1461020e57806356cad2751461022a5780636352211e146102485780636871ee401461027857610137565b806301ffc9a71461013c57806306fdde031461016c578063081812fc1461018a578063095ea7b3146101ba57806323b872dd146101d6575b600080fd5b6101566004803603810190610151919061246a565b61040f565b60405161016391906124b2565b60405180910390f35b6101746104f1565b6040516101819190612566565b60405180910390f35b6101a4600480360381019061019f91906125be565b610583565b6040516101b1919061262c565b60405180910390f35b6101d460048036038101906101cf9190612673565b6105c9565b005b6101f060048036038101906101eb91906126b3565b6106e0565b005b61020c600480360381019061020791906126b3565b610740565b005b6102286004803603810190610223919061276b565b610760565b005b610232610ab0565b60405161023f9190612817565b60405180910390f35b610262600480360381019061025d91906125be565b610ad6565b60405161026f919061262c565b60405180910390f35b610280610b87565b60405161028d9190612841565b60405180910390f35b6102b060048036038101906102ab919061298c565b610e24565b6040516102be929190612a2a565b60405180910390f35b6102e160048036038101906102dc9190612a5a565b610e7d565b6040516102ee9190612841565b60405180910390f35b6102ff610f34565b005b610309610f48565b604051610316919061262c565b60405180910390f35b610327610f72565b6040516103349190612566565b60405180910390f35b61035760048036038101906103529190612ab3565b611004565b005b610373600480360381019061036e9190612af3565b61101a565b005b61038f600480360381019061038a91906125be565b61107c565b60405161039c9190612566565b60405180910390f35b6103ad61118e565b6040516103ba91906124b2565b60405180910390f35b6103dd60048036038101906103d89190612b76565b611291565b6040516103ea91906124b2565b60405180910390f35b61040d60048036038101906104089190612a5a565b611325565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104da57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104ea57506104e9826113a8565b5b9050919050565b60606000805461050090612be5565b80601f016020809104026020016040519081016040528092919081815260200182805461052c90612be5565b80156105795780601f1061054e57610100808354040283529160200191610579565b820191906000526020600020905b81548152906001019060200180831161055c57829003601f168201915b5050505050905090565b600061058e82611412565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105d482610ad6565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610644576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063b90612c88565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661066361145d565b73ffffffffffffffffffffffffffffffffffffffff16148061069257506106918161068c61145d565b611291565b5b6106d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c890612d1a565b60405180910390fd5b6106db8383611465565b505050565b6106f16106eb61145d565b8261151e565b610730576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072790612dac565b60405180910390fd5b61073b8383836115b3565b505050565b61075b8383836040518060200160405280600081525061101a565b505050565b600061077a60405180602001604052806000815250610e24565b509050806107bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b490612e18565b60405180910390fd5b6000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663829268756040518163ffffffff1660e01b8152600401600060405180830381865afa15801561082c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906108559190612f10565b905060005b81518110156109b0576000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636b27e9aa8484815181106108b6576108b5612f59565b5b6020026020010151600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b81526004016108fe929190612f88565b61010060405180830381865afa15801561091c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094091906130aa565b90506000816080015111801561095d57508060a001518160c00151115b1561098157600a600960008282546109759190613107565b9250508190555061099c565b600a60096000828254610994919061313b565b925050819055505b5080806109a890613191565b91505061085a565b5060646009541015610a06576040518060400160405280600781526020017f2346463030303000000000000000000000000000000000000000000000000000815250600a9081610a00919061337b565b50610aa3565b61012c6009541115610a5c576040518060400160405280600781526020017f2330304646303000000000000000000000000000000000000000000000000000815250600a9081610a56919061337b565b50610aa2565b6040518060400160405280600781526020017f2366646666303000000000000000000000000000000000000000000000000000815250600a9081610aa0919061337b565b505b5b42600b8190555050505050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7590613499565b60405180910390fd5b80915050919050565b600080600090505b600c80549050811015610cba5760003073ffffffffffffffffffffffffffffffffffffffff16636352211e600c8481548110610bce57610bcd612f59565b5b90600052602060002001546040518263ffffffff1660e01b8152600401610bf59190612841565b602060405180830381865afa158015610c12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3691906134b9565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ca6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9d90613532565b60405180910390fd5b508080610cb290613191565b915050610b8f565b506000610cc76008611819565b9050600060405180610120016040528060f58152602001613f6f60f59139600a60405180610100016040528060d88152602001613e9760d89139610d0c600954611827565b6040518060400160405280601581526020017f3c2f747370616e3e3c2f746578743e3c2f7376673e0000000000000000000000815250604051602001610d56959493929190613611565b60405160208183030381529060405290506000610d7282611987565b604051602001610d829190613740565b6040516020818303038152906040529050610d9d3384611aff565b610da78382611b1d565b33600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600c839080600181540180825580915050600190039060005260206000200160009091909190915055610e1b6008611b8a565b82935050505090565b60006060622819a2600b5442610e3a9190613107565b119150816040518060400160405280600381526020017f307830000000000000000000000000000000000000000000000000000000000081525091509150915091565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610eed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee4906137e3565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610f3c611ba0565b610f466000611c1e565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610f8190612be5565b80601f0160208091040260200160405190810160405280929190818152602001828054610fad90612be5565b8015610ffa5780601f10610fcf57610100808354040283529160200191610ffa565b820191906000526020600020905b815481529060010190602001808311610fdd57829003601f168201915b5050505050905090565b61101661100f61145d565b8383611ce4565b5050565b61102b61102561145d565b8361151e565b61106a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106190612dac565b60405180910390fd5b61107684848484611e50565b50505050565b606061108782611412565b60006006600084815260200190815260200160002080546110a790612be5565b80601f01602080910402602001604051908101604052809291908181526020018280546110d390612be5565b80156111205780601f106110f557610100808354040283529160200191611120565b820191906000526020600020905b81548152906001019060200180831161110357829003601f168201915b505050505090506000611131611eac565b90506000815103611146578192505050611189565b60008251111561117b578082604051602001611163929190613803565b60405160208183030381529060405292505050611189565b61118484611ec3565b925050505b919050565b60008060005b600c805490508110156112895760003073ffffffffffffffffffffffffffffffffffffffff16636352211e600c84815481106111d3576111d2612f59565b5b90600052602060002001546040518263ffffffff1660e01b81526004016111fa9190612841565b602060405180830381865afa158015611217573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123b91906134b9565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361127557600192505b50808061128190613191565b915050611194565b508091505090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61132d611ba0565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361139c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139390613899565b60405180910390fd5b6113a581611c1e565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61141b81611f2b565b61145a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145190613499565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166114d883610ad6565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061152a83610ad6565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061156c575061156b8185611291565b5b806115aa57508373ffffffffffffffffffffffffffffffffffffffff1661159284610583565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166115d382610ad6565b73ffffffffffffffffffffffffffffffffffffffff1614611629576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116209061392b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611698576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168f906139bd565b60405180910390fd5b6116a3838383611f97565b6116ae600082611465565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116fe9190613107565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611755919061313b565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611814838383612016565b505050565b600081600001549050919050565b60606000820361186e576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611982565b600082905060005b600082146118a057808061188990613191565b915050600a826118999190613a0c565b9150611876565b60008167ffffffffffffffff8111156118bc576118bb612861565b5b6040519080825280601f01601f1916602001820160405280156118ee5781602001600182028036833780820191505090505b5090505b6000851461197b576001826119079190613107565b9150600a856119169190613a3d565b6030611922919061313b565b60f81b81838151811061193857611937612f59565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856119749190613a0c565b94506118f2565b8093505050505b919050565b606060008251036119a957604051806020016040528060008152509050611afa565b600060405180606001604052806040815260200161406460409139905060006003600285516119d8919061313b565b6119e29190613a0c565b60046119ee9190613a6e565b905060006020826119ff919061313b565b67ffffffffffffffff811115611a1857611a17612861565b5b6040519080825280601f01601f191660200182016040528015611a4a5781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015611ab9576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050611a5e565b600389510660018114611ad35760028114611ae357611aee565b613d3d60f01b6002830352611aee565b603d60f81b60018303525b50505050508093505050505b919050565b611b1982826040518060200160405280600081525061201b565b5050565b611b2682611f2b565b611b65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5c90613b3a565b60405180910390fd5b80600660008481526020019081526020016000209081611b85919061337b565b505050565b6001816000016000828254019250508190555050565b611ba861145d565b73ffffffffffffffffffffffffffffffffffffffff16611bc6610f48565b73ffffffffffffffffffffffffffffffffffffffff1614611c1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1390613ba6565b60405180910390fd5b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611d52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4990613c12565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611e4391906124b2565b60405180910390a3505050565b611e5b8484846115b3565b611e6784848484612076565b611ea6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9d90613ca4565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060611ece82611412565b6000611ed8611eac565b90506000815111611ef85760405180602001604052806000815250611f23565b80611f0284611827565b604051602001611f13929190613803565b6040516020818303038152906040525b915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612006576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ffd90613d10565b60405180910390fd5b6120118383836121fd565b505050565b505050565b6120258383612202565b6120326000848484612076565b612071576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206890613ca4565b60405180910390fd5b505050565b60006120978473ffffffffffffffffffffffffffffffffffffffff166123db565b156121f0578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026120c061145d565b8786866040518563ffffffff1660e01b81526004016120e29493929190613d30565b6020604051808303816000875af192505050801561211e57506040513d601f19601f8201168201806040525081019061211b9190613d91565b60015b6121a0573d806000811461214e576040519150601f19603f3d011682016040523d82523d6000602084013e612153565b606091505b506000815103612198576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218f90613ca4565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506121f5565b600190505b949350505050565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612271576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226890613e0a565b60405180910390fd5b61227a81611f2b565b156122ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b190613e76565b60405180910390fd5b6122c660008383611f97565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612316919061313b565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46123d760008383612016565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61244781612412565b811461245257600080fd5b50565b6000813590506124648161243e565b92915050565b6000602082840312156124805761247f612408565b5b600061248e84828501612455565b91505092915050565b60008115159050919050565b6124ac81612497565b82525050565b60006020820190506124c760008301846124a3565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156125075780820151818401526020810190506124ec565b83811115612516576000848401525b50505050565b6000601f19601f8301169050919050565b6000612538826124cd565b61254281856124d8565b93506125528185602086016124e9565b61255b8161251c565b840191505092915050565b60006020820190508181036000830152612580818461252d565b905092915050565b6000819050919050565b61259b81612588565b81146125a657600080fd5b50565b6000813590506125b881612592565b92915050565b6000602082840312156125d4576125d3612408565b5b60006125e2848285016125a9565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612616826125eb565b9050919050565b6126268161260b565b82525050565b6000602082019050612641600083018461261d565b92915050565b6126508161260b565b811461265b57600080fd5b50565b60008135905061266d81612647565b92915050565b6000806040838503121561268a57612689612408565b5b60006126988582860161265e565b92505060206126a9858286016125a9565b9150509250929050565b6000806000606084860312156126cc576126cb612408565b5b60006126da8682870161265e565b93505060206126eb8682870161265e565b92505060406126fc868287016125a9565b9150509250925092565b600080fd5b600080fd5b600080fd5b60008083601f84011261272b5761272a612706565b5b8235905067ffffffffffffffff8111156127485761274761270b565b5b60208301915083600182028301111561276457612763612710565b5b9250929050565b6000806020838503121561278257612781612408565b5b600083013567ffffffffffffffff8111156127a05761279f61240d565b5b6127ac85828601612715565b92509250509250929050565b6000819050919050565b60006127dd6127d86127d3846125eb565b6127b8565b6125eb565b9050919050565b60006127ef826127c2565b9050919050565b6000612801826127e4565b9050919050565b612811816127f6565b82525050565b600060208201905061282c6000830184612808565b92915050565b61283b81612588565b82525050565b60006020820190506128566000830184612832565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6128998261251c565b810181811067ffffffffffffffff821117156128b8576128b7612861565b5b80604052505050565b60006128cb6123fe565b90506128d78282612890565b919050565b600067ffffffffffffffff8211156128f7576128f6612861565b5b6129008261251c565b9050602081019050919050565b82818337600083830152505050565b600061292f61292a846128dc565b6128c1565b90508281526020810184848401111561294b5761294a61285c565b5b61295684828561290d565b509392505050565b600082601f83011261297357612972612706565b5b813561298384826020860161291c565b91505092915050565b6000602082840312156129a2576129a1612408565b5b600082013567ffffffffffffffff8111156129c0576129bf61240d565b5b6129cc8482850161295e565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60006129fc826129d5565b612a0681856129e0565b9350612a168185602086016124e9565b612a1f8161251c565b840191505092915050565b6000604082019050612a3f60008301856124a3565b8181036020830152612a5181846129f1565b90509392505050565b600060208284031215612a7057612a6f612408565b5b6000612a7e8482850161265e565b91505092915050565b612a9081612497565b8114612a9b57600080fd5b50565b600081359050612aad81612a87565b92915050565b60008060408385031215612aca57612ac9612408565b5b6000612ad88582860161265e565b9250506020612ae985828601612a9e565b9150509250929050565b60008060008060808587031215612b0d57612b0c612408565b5b6000612b1b8782880161265e565b9450506020612b2c8782880161265e565b9350506040612b3d878288016125a9565b925050606085013567ffffffffffffffff811115612b5e57612b5d61240d565b5b612b6a8782880161295e565b91505092959194509250565b60008060408385031215612b8d57612b8c612408565b5b6000612b9b8582860161265e565b9250506020612bac8582860161265e565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612bfd57607f821691505b602082108103612c1057612c0f612bb6565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612c726021836124d8565b9150612c7d82612c16565b604082019050919050565b60006020820190508181036000830152612ca181612c65565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000612d04603e836124d8565b9150612d0f82612ca8565b604082019050919050565b60006020820190508181036000830152612d3381612cf7565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612d96602e836124d8565b9150612da182612d3a565b604082019050919050565b60006020820190508181036000830152612dc581612d89565b9050919050565b7f55706b656570206e6f74206e6565646564210000000000000000000000000000600082015250565b6000612e026012836124d8565b9150612e0d82612dcc565b602082019050919050565b60006020820190508181036000830152612e3181612df5565b9050919050565b600067ffffffffffffffff821115612e5357612e52612861565b5b602082029050602081019050919050565b600081519050612e7381612647565b92915050565b6000612e8c612e8784612e38565b6128c1565b90508083825260208201905060208402830185811115612eaf57612eae612710565b5b835b81811015612ed85780612ec48882612e64565b845260208401935050602081019050612eb1565b5050509392505050565b600082601f830112612ef757612ef6612706565b5b8151612f07848260208601612e79565b91505092915050565b600060208284031215612f2657612f25612408565b5b600082015167ffffffffffffffff811115612f4457612f4361240d565b5b612f5084828501612ee2565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082019050612f9d600083018561261d565b612faa602083018461261d565b9392505050565b600080fd5b600081519050612fc581612592565b92915050565b600081519050612fda81612a87565b92915050565b60006101008284031215612ff757612ff6612fb1565b5b6130026101006128c1565b9050600061301284828501612e64565b600083015250602061302684828501612e64565b602083015250604061303a84828501612e64565b604083015250606061304e84828501612e64565b606083015250608061306284828501612fb6565b60808301525060a061307684828501612fb6565b60a08301525060c061308a84828501612fb6565b60c08301525060e061309e84828501612fcb565b60e08301525092915050565b600061010082840312156130c1576130c0612408565b5b60006130cf84828501612fe0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061311282612588565b915061311d83612588565b9250828210156131305761312f6130d8565b5b828203905092915050565b600061314682612588565b915061315183612588565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613186576131856130d8565b5b828201905092915050565b600061319c82612588565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036131ce576131cd6130d8565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261323b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826131fe565b61324586836131fe565b95508019841693508086168417925050509392505050565b600061327861327361326e84612588565b6127b8565b612588565b9050919050565b6000819050919050565b6132928361325d565b6132a661329e8261327f565b84845461320b565b825550505050565b600090565b6132bb6132ae565b6132c6818484613289565b505050565b5b818110156132ea576132df6000826132b3565b6001810190506132cc565b5050565b601f82111561332f57613300816131d9565b613309846131ee565b81016020851015613318578190505b61332c613324856131ee565b8301826132cb565b50505b505050565b600082821c905092915050565b600061335260001984600802613334565b1980831691505092915050565b600061336b8383613341565b9150826002028217905092915050565b613384826124cd565b67ffffffffffffffff81111561339d5761339c612861565b5b6133a78254612be5565b6133b28282856132ee565b600060209050601f8311600181146133e557600084156133d3578287015190505b6133dd858261335f565b865550613445565b601f1984166133f3866131d9565b60005b8281101561341b578489015182556001820191506020850194506020810190506133f6565b868310156134385784890151613434601f891682613341565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006134836018836124d8565b915061348e8261344d565b602082019050919050565b600060208201905081810360008301526134b281613476565b9050919050565b6000602082840312156134cf576134ce612408565b5b60006134dd84828501612e64565b91505092915050565b7f416c7265616479206d696e746564210000000000000000000000000000000000600082015250565b600061351c600f836124d8565b9150613527826134e6565b602082019050919050565b6000602082019050818103600083015261354b8161350f565b9050919050565b600081905092915050565b6000613568826124cd565b6135728185613552565b93506135828185602086016124e9565b80840191505092915050565b6000815461359b81612be5565b6135a58186613552565b945060018216600081146135c057600181146135d557613608565b60ff1983168652811515820286019350613608565b6135de856131d9565b60005b83811015613600578154818901526001820191506020810190506135e1565b838801955050505b50505092915050565b600061361d828861355d565b9150613629828761358e565b9150613635828661355d565b9150613641828561355d565b915061364d828461355d565b91508190509695505050505050565b7f7b226e616d65223a20224372656469742053636f7265222c202264657363726960008201527f7074696f6e223a202241204372656469742053636f7265205342542070726f7660208201527f6964656420627920537461726b222c2022696d616765223a2022646174613a6960408201527f6d6167652f7376672b786d6c3b6261736536342c000000000000000000000000606082015250565b6000613704607483613552565b915061370f8261365c565b607482019050919050565b7f227d000000000000000000000000000000000000000000000000000000000000815250565b600061374b826136f7565b9150613757828461355d565b91506137628261371a565b60028201915081905092915050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006137cd6029836124d8565b91506137d882613771565b604082019050919050565b600060208201905081810360008301526137fc816137c0565b9050919050565b600061380f828561355d565b915061381b828461355d565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006138836026836124d8565b915061388e82613827565b604082019050919050565b600060208201905081810360008301526138b281613876565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006139156025836124d8565b9150613920826138b9565b604082019050919050565b6000602082019050818103600083015261394481613908565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006139a76024836124d8565b91506139b28261394b565b604082019050919050565b600060208201905081810360008301526139d68161399a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613a1782612588565b9150613a2283612588565b925082613a3257613a316139dd565b5b828204905092915050565b6000613a4882612588565b9150613a5383612588565b925082613a6357613a626139dd565b5b828206905092915050565b6000613a7982612588565b9150613a8483612588565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613abd57613abc6130d8565b5b828202905092915050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000613b24602e836124d8565b9150613b2f82613ac8565b604082019050919050565b60006020820190508181036000830152613b5381613b17565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613b906020836124d8565b9150613b9b82613b5a565b602082019050919050565b60006020820190508181036000830152613bbf81613b83565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000613bfc6019836124d8565b9150613c0782613bc6565b602082019050919050565b60006020820190508181036000830152613c2b81613bef565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000613c8e6032836124d8565b9150613c9982613c32565b604082019050919050565b60006020820190508181036000830152613cbd81613c81565b9050919050565b7f4572723a20746f6b656e207472616e7366657220697320424c4f434b45440000600082015250565b6000613cfa601e836124d8565b9150613d0582613cc4565b602082019050919050565b60006020820190508181036000830152613d2981613ced565b9050919050565b6000608082019050613d45600083018761261d565b613d52602083018661261d565b613d5f6040830185612832565b8181036060830152613d7181846129f1565b905095945050505050565b600081519050613d8b8161243e565b92915050565b600060208284031215613da757613da6612408565b5b6000613db584828501613d7c565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613df46020836124d8565b9150613dff82613dbe565b602082019050919050565b60006020820190508181036000830152613e2381613de7565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613e60601c836124d8565b9150613e6b82613e2a565b602082019050919050565b60006020820190508181036000830152613e8f81613e53565b905091905056fe223e3c746578742064783d2230222064793d22302220666f6e742d66616d696c793d222671756f743b526f626f746f2671756f743b2220666f6e742d73697a653d2231352220666f6e742d7765696768743d2234303022207472616e73666f726d3d226d617472697828342e3931373132342030203020352e3036323439372038372e383736393031203137352e3932373035322922207374726f6b652d77696474683d2230223e3c747370616e20793d22302220666f6e742d7765696768743d2234303022207374726f6b652d77696474683d2230223e3c7376672069643d226543684b34795874657845312220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f7376672220786d6c6e733a786c696e6b3d22687474703a2f2f7777772e77332e6f72672f313939392f786c696e6b222076696577426f783d223020302033303020333030222073686170652d72656e646572696e673d2267656f6d6574726963507265636973696f6e2220746578742d72656e646572696e673d2267656f6d6574726963507265636973696f6e222077696474683d2234353022206865696768743d2233303022207374796c653d226261636b67726f756e642d636f6c6f723a4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220a0c6bca272d5826d23d2cf076ecc5b95b3d0008d66ab3becf7a34c0ad3af4af764736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c80636e04ff0d116100b8578063a22cb4651161007c578063a22cb4651461033d578063b88d4fde14610359578063c87b56dd14610375578063cea9b30a146103a5578063e985e9c5146103c3578063f2fde38b146103f357610137565b80636e04ff0d1461029657806370a08231146102c7578063715018a6146102f75780638da5cb5b1461030157806395d89b411461031f57610137565b806342842e0e116100ff57806342842e0e146101f25780634585e33b1461020e57806356cad2751461022a5780636352211e146102485780636871ee401461027857610137565b806301ffc9a71461013c57806306fdde031461016c578063081812fc1461018a578063095ea7b3146101ba57806323b872dd146101d6575b600080fd5b6101566004803603810190610151919061246a565b61040f565b60405161016391906124b2565b60405180910390f35b6101746104f1565b6040516101819190612566565b60405180910390f35b6101a4600480360381019061019f91906125be565b610583565b6040516101b1919061262c565b60405180910390f35b6101d460048036038101906101cf9190612673565b6105c9565b005b6101f060048036038101906101eb91906126b3565b6106e0565b005b61020c600480360381019061020791906126b3565b610740565b005b6102286004803603810190610223919061276b565b610760565b005b610232610ab0565b60405161023f9190612817565b60405180910390f35b610262600480360381019061025d91906125be565b610ad6565b60405161026f919061262c565b60405180910390f35b610280610b87565b60405161028d9190612841565b60405180910390f35b6102b060048036038101906102ab919061298c565b610e24565b6040516102be929190612a2a565b60405180910390f35b6102e160048036038101906102dc9190612a5a565b610e7d565b6040516102ee9190612841565b60405180910390f35b6102ff610f34565b005b610309610f48565b604051610316919061262c565b60405180910390f35b610327610f72565b6040516103349190612566565b60405180910390f35b61035760048036038101906103529190612ab3565b611004565b005b610373600480360381019061036e9190612af3565b61101a565b005b61038f600480360381019061038a91906125be565b61107c565b60405161039c9190612566565b60405180910390f35b6103ad61118e565b6040516103ba91906124b2565b60405180910390f35b6103dd60048036038101906103d89190612b76565b611291565b6040516103ea91906124b2565b60405180910390f35b61040d60048036038101906104089190612a5a565b611325565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104da57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104ea57506104e9826113a8565b5b9050919050565b60606000805461050090612be5565b80601f016020809104026020016040519081016040528092919081815260200182805461052c90612be5565b80156105795780601f1061054e57610100808354040283529160200191610579565b820191906000526020600020905b81548152906001019060200180831161055c57829003601f168201915b5050505050905090565b600061058e82611412565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105d482610ad6565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610644576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063b90612c88565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661066361145d565b73ffffffffffffffffffffffffffffffffffffffff16148061069257506106918161068c61145d565b611291565b5b6106d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c890612d1a565b60405180910390fd5b6106db8383611465565b505050565b6106f16106eb61145d565b8261151e565b610730576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072790612dac565b60405180910390fd5b61073b8383836115b3565b505050565b61075b8383836040518060200160405280600081525061101a565b505050565b600061077a60405180602001604052806000815250610e24565b509050806107bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b490612e18565b60405180910390fd5b6000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663829268756040518163ffffffff1660e01b8152600401600060405180830381865afa15801561082c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906108559190612f10565b905060005b81518110156109b0576000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636b27e9aa8484815181106108b6576108b5612f59565b5b6020026020010151600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b81526004016108fe929190612f88565b61010060405180830381865afa15801561091c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094091906130aa565b90506000816080015111801561095d57508060a001518160c00151115b1561098157600a600960008282546109759190613107565b9250508190555061099c565b600a60096000828254610994919061313b565b925050819055505b5080806109a890613191565b91505061085a565b5060646009541015610a06576040518060400160405280600781526020017f2346463030303000000000000000000000000000000000000000000000000000815250600a9081610a00919061337b565b50610aa3565b61012c6009541115610a5c576040518060400160405280600781526020017f2330304646303000000000000000000000000000000000000000000000000000815250600a9081610a56919061337b565b50610aa2565b6040518060400160405280600781526020017f2366646666303000000000000000000000000000000000000000000000000000815250600a9081610aa0919061337b565b505b5b42600b8190555050505050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7590613499565b60405180910390fd5b80915050919050565b600080600090505b600c80549050811015610cba5760003073ffffffffffffffffffffffffffffffffffffffff16636352211e600c8481548110610bce57610bcd612f59565b5b90600052602060002001546040518263ffffffff1660e01b8152600401610bf59190612841565b602060405180830381865afa158015610c12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3691906134b9565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ca6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9d90613532565b60405180910390fd5b508080610cb290613191565b915050610b8f565b506000610cc76008611819565b9050600060405180610120016040528060f58152602001613f6f60f59139600a60405180610100016040528060d88152602001613e9760d89139610d0c600954611827565b6040518060400160405280601581526020017f3c2f747370616e3e3c2f746578743e3c2f7376673e0000000000000000000000815250604051602001610d56959493929190613611565b60405160208183030381529060405290506000610d7282611987565b604051602001610d829190613740565b6040516020818303038152906040529050610d9d3384611aff565b610da78382611b1d565b33600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600c839080600181540180825580915050600190039060005260206000200160009091909190915055610e1b6008611b8a565b82935050505090565b60006060622819a2600b5442610e3a9190613107565b119150816040518060400160405280600381526020017f307830000000000000000000000000000000000000000000000000000000000081525091509150915091565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610eed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee4906137e3565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610f3c611ba0565b610f466000611c1e565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610f8190612be5565b80601f0160208091040260200160405190810160405280929190818152602001828054610fad90612be5565b8015610ffa5780601f10610fcf57610100808354040283529160200191610ffa565b820191906000526020600020905b815481529060010190602001808311610fdd57829003601f168201915b5050505050905090565b61101661100f61145d565b8383611ce4565b5050565b61102b61102561145d565b8361151e565b61106a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106190612dac565b60405180910390fd5b61107684848484611e50565b50505050565b606061108782611412565b60006006600084815260200190815260200160002080546110a790612be5565b80601f01602080910402602001604051908101604052809291908181526020018280546110d390612be5565b80156111205780601f106110f557610100808354040283529160200191611120565b820191906000526020600020905b81548152906001019060200180831161110357829003601f168201915b505050505090506000611131611eac565b90506000815103611146578192505050611189565b60008251111561117b578082604051602001611163929190613803565b60405160208183030381529060405292505050611189565b61118484611ec3565b925050505b919050565b60008060005b600c805490508110156112895760003073ffffffffffffffffffffffffffffffffffffffff16636352211e600c84815481106111d3576111d2612f59565b5b90600052602060002001546040518263ffffffff1660e01b81526004016111fa9190612841565b602060405180830381865afa158015611217573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123b91906134b9565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361127557600192505b50808061128190613191565b915050611194565b508091505090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61132d611ba0565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361139c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139390613899565b60405180910390fd5b6113a581611c1e565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61141b81611f2b565b61145a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145190613499565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166114d883610ad6565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061152a83610ad6565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061156c575061156b8185611291565b5b806115aa57508373ffffffffffffffffffffffffffffffffffffffff1661159284610583565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166115d382610ad6565b73ffffffffffffffffffffffffffffffffffffffff1614611629576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116209061392b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611698576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168f906139bd565b60405180910390fd5b6116a3838383611f97565b6116ae600082611465565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116fe9190613107565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611755919061313b565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611814838383612016565b505050565b600081600001549050919050565b60606000820361186e576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611982565b600082905060005b600082146118a057808061188990613191565b915050600a826118999190613a0c565b9150611876565b60008167ffffffffffffffff8111156118bc576118bb612861565b5b6040519080825280601f01601f1916602001820160405280156118ee5781602001600182028036833780820191505090505b5090505b6000851461197b576001826119079190613107565b9150600a856119169190613a3d565b6030611922919061313b565b60f81b81838151811061193857611937612f59565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856119749190613a0c565b94506118f2565b8093505050505b919050565b606060008251036119a957604051806020016040528060008152509050611afa565b600060405180606001604052806040815260200161406460409139905060006003600285516119d8919061313b565b6119e29190613a0c565b60046119ee9190613a6e565b905060006020826119ff919061313b565b67ffffffffffffffff811115611a1857611a17612861565b5b6040519080825280601f01601f191660200182016040528015611a4a5781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015611ab9576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050611a5e565b600389510660018114611ad35760028114611ae357611aee565b613d3d60f01b6002830352611aee565b603d60f81b60018303525b50505050508093505050505b919050565b611b1982826040518060200160405280600081525061201b565b5050565b611b2682611f2b565b611b65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5c90613b3a565b60405180910390fd5b80600660008481526020019081526020016000209081611b85919061337b565b505050565b6001816000016000828254019250508190555050565b611ba861145d565b73ffffffffffffffffffffffffffffffffffffffff16611bc6610f48565b73ffffffffffffffffffffffffffffffffffffffff1614611c1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1390613ba6565b60405180910390fd5b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611d52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4990613c12565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611e4391906124b2565b60405180910390a3505050565b611e5b8484846115b3565b611e6784848484612076565b611ea6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9d90613ca4565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060611ece82611412565b6000611ed8611eac565b90506000815111611ef85760405180602001604052806000815250611f23565b80611f0284611827565b604051602001611f13929190613803565b6040516020818303038152906040525b915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612006576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ffd90613d10565b60405180910390fd5b6120118383836121fd565b505050565b505050565b6120258383612202565b6120326000848484612076565b612071576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206890613ca4565b60405180910390fd5b505050565b60006120978473ffffffffffffffffffffffffffffffffffffffff166123db565b156121f0578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026120c061145d565b8786866040518563ffffffff1660e01b81526004016120e29493929190613d30565b6020604051808303816000875af192505050801561211e57506040513d601f19601f8201168201806040525081019061211b9190613d91565b60015b6121a0573d806000811461214e576040519150601f19603f3d011682016040523d82523d6000602084013e612153565b606091505b506000815103612198576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218f90613ca4565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506121f5565b600190505b949350505050565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612271576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226890613e0a565b60405180910390fd5b61227a81611f2b565b156122ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b190613e76565b60405180910390fd5b6122c660008383611f97565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612316919061313b565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46123d760008383612016565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61244781612412565b811461245257600080fd5b50565b6000813590506124648161243e565b92915050565b6000602082840312156124805761247f612408565b5b600061248e84828501612455565b91505092915050565b60008115159050919050565b6124ac81612497565b82525050565b60006020820190506124c760008301846124a3565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156125075780820151818401526020810190506124ec565b83811115612516576000848401525b50505050565b6000601f19601f8301169050919050565b6000612538826124cd565b61254281856124d8565b93506125528185602086016124e9565b61255b8161251c565b840191505092915050565b60006020820190508181036000830152612580818461252d565b905092915050565b6000819050919050565b61259b81612588565b81146125a657600080fd5b50565b6000813590506125b881612592565b92915050565b6000602082840312156125d4576125d3612408565b5b60006125e2848285016125a9565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612616826125eb565b9050919050565b6126268161260b565b82525050565b6000602082019050612641600083018461261d565b92915050565b6126508161260b565b811461265b57600080fd5b50565b60008135905061266d81612647565b92915050565b6000806040838503121561268a57612689612408565b5b60006126988582860161265e565b92505060206126a9858286016125a9565b9150509250929050565b6000806000606084860312156126cc576126cb612408565b5b60006126da8682870161265e565b93505060206126eb8682870161265e565b92505060406126fc868287016125a9565b9150509250925092565b600080fd5b600080fd5b600080fd5b60008083601f84011261272b5761272a612706565b5b8235905067ffffffffffffffff8111156127485761274761270b565b5b60208301915083600182028301111561276457612763612710565b5b9250929050565b6000806020838503121561278257612781612408565b5b600083013567ffffffffffffffff8111156127a05761279f61240d565b5b6127ac85828601612715565b92509250509250929050565b6000819050919050565b60006127dd6127d86127d3846125eb565b6127b8565b6125eb565b9050919050565b60006127ef826127c2565b9050919050565b6000612801826127e4565b9050919050565b612811816127f6565b82525050565b600060208201905061282c6000830184612808565b92915050565b61283b81612588565b82525050565b60006020820190506128566000830184612832565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6128998261251c565b810181811067ffffffffffffffff821117156128b8576128b7612861565b5b80604052505050565b60006128cb6123fe565b90506128d78282612890565b919050565b600067ffffffffffffffff8211156128f7576128f6612861565b5b6129008261251c565b9050602081019050919050565b82818337600083830152505050565b600061292f61292a846128dc565b6128c1565b90508281526020810184848401111561294b5761294a61285c565b5b61295684828561290d565b509392505050565b600082601f83011261297357612972612706565b5b813561298384826020860161291c565b91505092915050565b6000602082840312156129a2576129a1612408565b5b600082013567ffffffffffffffff8111156129c0576129bf61240d565b5b6129cc8482850161295e565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60006129fc826129d5565b612a0681856129e0565b9350612a168185602086016124e9565b612a1f8161251c565b840191505092915050565b6000604082019050612a3f60008301856124a3565b8181036020830152612a5181846129f1565b90509392505050565b600060208284031215612a7057612a6f612408565b5b6000612a7e8482850161265e565b91505092915050565b612a9081612497565b8114612a9b57600080fd5b50565b600081359050612aad81612a87565b92915050565b60008060408385031215612aca57612ac9612408565b5b6000612ad88582860161265e565b9250506020612ae985828601612a9e565b9150509250929050565b60008060008060808587031215612b0d57612b0c612408565b5b6000612b1b8782880161265e565b9450506020612b2c8782880161265e565b9350506040612b3d878288016125a9565b925050606085013567ffffffffffffffff811115612b5e57612b5d61240d565b5b612b6a8782880161295e565b91505092959194509250565b60008060408385031215612b8d57612b8c612408565b5b6000612b9b8582860161265e565b9250506020612bac8582860161265e565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612bfd57607f821691505b602082108103612c1057612c0f612bb6565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612c726021836124d8565b9150612c7d82612c16565b604082019050919050565b60006020820190508181036000830152612ca181612c65565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000612d04603e836124d8565b9150612d0f82612ca8565b604082019050919050565b60006020820190508181036000830152612d3381612cf7565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612d96602e836124d8565b9150612da182612d3a565b604082019050919050565b60006020820190508181036000830152612dc581612d89565b9050919050565b7f55706b656570206e6f74206e6565646564210000000000000000000000000000600082015250565b6000612e026012836124d8565b9150612e0d82612dcc565b602082019050919050565b60006020820190508181036000830152612e3181612df5565b9050919050565b600067ffffffffffffffff821115612e5357612e52612861565b5b602082029050602081019050919050565b600081519050612e7381612647565b92915050565b6000612e8c612e8784612e38565b6128c1565b90508083825260208201905060208402830185811115612eaf57612eae612710565b5b835b81811015612ed85780612ec48882612e64565b845260208401935050602081019050612eb1565b5050509392505050565b600082601f830112612ef757612ef6612706565b5b8151612f07848260208601612e79565b91505092915050565b600060208284031215612f2657612f25612408565b5b600082015167ffffffffffffffff811115612f4457612f4361240d565b5b612f5084828501612ee2565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082019050612f9d600083018561261d565b612faa602083018461261d565b9392505050565b600080fd5b600081519050612fc581612592565b92915050565b600081519050612fda81612a87565b92915050565b60006101008284031215612ff757612ff6612fb1565b5b6130026101006128c1565b9050600061301284828501612e64565b600083015250602061302684828501612e64565b602083015250604061303a84828501612e64565b604083015250606061304e84828501612e64565b606083015250608061306284828501612fb6565b60808301525060a061307684828501612fb6565b60a08301525060c061308a84828501612fb6565b60c08301525060e061309e84828501612fcb565b60e08301525092915050565b600061010082840312156130c1576130c0612408565b5b60006130cf84828501612fe0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061311282612588565b915061311d83612588565b9250828210156131305761312f6130d8565b5b828203905092915050565b600061314682612588565b915061315183612588565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613186576131856130d8565b5b828201905092915050565b600061319c82612588565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036131ce576131cd6130d8565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261323b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826131fe565b61324586836131fe565b95508019841693508086168417925050509392505050565b600061327861327361326e84612588565b6127b8565b612588565b9050919050565b6000819050919050565b6132928361325d565b6132a661329e8261327f565b84845461320b565b825550505050565b600090565b6132bb6132ae565b6132c6818484613289565b505050565b5b818110156132ea576132df6000826132b3565b6001810190506132cc565b5050565b601f82111561332f57613300816131d9565b613309846131ee565b81016020851015613318578190505b61332c613324856131ee565b8301826132cb565b50505b505050565b600082821c905092915050565b600061335260001984600802613334565b1980831691505092915050565b600061336b8383613341565b9150826002028217905092915050565b613384826124cd565b67ffffffffffffffff81111561339d5761339c612861565b5b6133a78254612be5565b6133b28282856132ee565b600060209050601f8311600181146133e557600084156133d3578287015190505b6133dd858261335f565b865550613445565b601f1984166133f3866131d9565b60005b8281101561341b578489015182556001820191506020850194506020810190506133f6565b868310156134385784890151613434601f891682613341565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006134836018836124d8565b915061348e8261344d565b602082019050919050565b600060208201905081810360008301526134b281613476565b9050919050565b6000602082840312156134cf576134ce612408565b5b60006134dd84828501612e64565b91505092915050565b7f416c7265616479206d696e746564210000000000000000000000000000000000600082015250565b600061351c600f836124d8565b9150613527826134e6565b602082019050919050565b6000602082019050818103600083015261354b8161350f565b9050919050565b600081905092915050565b6000613568826124cd565b6135728185613552565b93506135828185602086016124e9565b80840191505092915050565b6000815461359b81612be5565b6135a58186613552565b945060018216600081146135c057600181146135d557613608565b60ff1983168652811515820286019350613608565b6135de856131d9565b60005b83811015613600578154818901526001820191506020810190506135e1565b838801955050505b50505092915050565b600061361d828861355d565b9150613629828761358e565b9150613635828661355d565b9150613641828561355d565b915061364d828461355d565b91508190509695505050505050565b7f7b226e616d65223a20224372656469742053636f7265222c202264657363726960008201527f7074696f6e223a202241204372656469742053636f7265205342542070726f7660208201527f6964656420627920537461726b222c2022696d616765223a2022646174613a6960408201527f6d6167652f7376672b786d6c3b6261736536342c000000000000000000000000606082015250565b6000613704607483613552565b915061370f8261365c565b607482019050919050565b7f227d000000000000000000000000000000000000000000000000000000000000815250565b600061374b826136f7565b9150613757828461355d565b91506137628261371a565b60028201915081905092915050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006137cd6029836124d8565b91506137d882613771565b604082019050919050565b600060208201905081810360008301526137fc816137c0565b9050919050565b600061380f828561355d565b915061381b828461355d565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006138836026836124d8565b915061388e82613827565b604082019050919050565b600060208201905081810360008301526138b281613876565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006139156025836124d8565b9150613920826138b9565b604082019050919050565b6000602082019050818103600083015261394481613908565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006139a76024836124d8565b91506139b28261394b565b604082019050919050565b600060208201905081810360008301526139d68161399a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613a1782612588565b9150613a2283612588565b925082613a3257613a316139dd565b5b828204905092915050565b6000613a4882612588565b9150613a5383612588565b925082613a6357613a626139dd565b5b828206905092915050565b6000613a7982612588565b9150613a8483612588565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613abd57613abc6130d8565b5b828202905092915050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000613b24602e836124d8565b9150613b2f82613ac8565b604082019050919050565b60006020820190508181036000830152613b5381613b17565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613b906020836124d8565b9150613b9b82613b5a565b602082019050919050565b60006020820190508181036000830152613bbf81613b83565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000613bfc6019836124d8565b9150613c0782613bc6565b602082019050919050565b60006020820190508181036000830152613c2b81613bef565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000613c8e6032836124d8565b9150613c9982613c32565b604082019050919050565b60006020820190508181036000830152613cbd81613c81565b9050919050565b7f4572723a20746f6b656e207472616e7366657220697320424c4f434b45440000600082015250565b6000613cfa601e836124d8565b9150613d0582613cc4565b602082019050919050565b60006020820190508181036000830152613d2981613ced565b9050919050565b6000608082019050613d45600083018761261d565b613d52602083018661261d565b613d5f6040830185612832565b8181036060830152613d7181846129f1565b905095945050505050565b600081519050613d8b8161243e565b92915050565b600060208284031215613da757613da6612408565b5b6000613db584828501613d7c565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613df46020836124d8565b9150613dff82613dbe565b602082019050919050565b60006020820190508181036000830152613e2381613de7565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613e60601c836124d8565b9150613e6b82613e2a565b602082019050919050565b60006020820190508181036000830152613e8f81613e53565b905091905056fe223e3c746578742064783d2230222064793d22302220666f6e742d66616d696c793d222671756f743b526f626f746f2671756f743b2220666f6e742d73697a653d2231352220666f6e742d7765696768743d2234303022207472616e73666f726d3d226d617472697828342e3931373132342030203020352e3036323439372038372e383736393031203137352e3932373035322922207374726f6b652d77696474683d2230223e3c747370616e20793d22302220666f6e742d7765696768743d2234303022207374726f6b652d77696474683d2230223e3c7376672069643d226543684b34795874657845312220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f7376672220786d6c6e733a786c696e6b3d22687474703a2f2f7777772e77332e6f72672f313939392f786c696e6b222076696577426f783d223020302033303020333030222073686170652d72656e646572696e673d2267656f6d6574726963507265636973696f6e2220746578742d72656e646572696e673d2267656f6d6574726963507265636973696f6e222077696474683d2234353022206865696768743d2233303022207374796c653d226261636b67726f756e642d636f6c6f723a4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220a0c6bca272d5826d23d2cf076ecc5b95b3d0008d66ab3becf7a34c0ad3af4af764736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 971,
        "contract": "contracts/CreditScore.sol:CreditScore",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 973,
        "contract": "contracts/CreditScore.sol:CreditScore",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 977,
        "contract": "contracts/CreditScore.sol:CreditScore",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 981,
        "contract": "contracts/CreditScore.sol:CreditScore",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 985,
        "contract": "contracts/CreditScore.sol:CreditScore",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 991,
        "contract": "contracts/CreditScore.sol:CreditScore",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1959,
        "contract": "contracts/CreditScore.sol:CreditScore",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 111,
        "contract": "contracts/CreditScore.sol:CreditScore",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 3142,
        "contract": "contracts/CreditScore.sol:CreditScore",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Counter)2421_storage"
      },
      {
        "astId": 3145,
        "contract": "contracts/CreditScore.sol:CreditScore",
        "label": "score",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3148,
        "contract": "contracts/CreditScore.sol:CreditScore",
        "label": "color",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 3150,
        "contract": "contracts/CreditScore.sol:CreditScore",
        "label": "lastTimeStamp",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3153,
        "contract": "contracts/CreditScore.sol:CreditScore",
        "label": "allTokenIds",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3156,
        "contract": "contracts/CreditScore.sol:CreditScore",
        "label": "creditLogic",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(CreditLogic)3117"
      },
      {
        "astId": 3158,
        "contract": "contracts/CreditScore.sol:CreditScore",
        "label": "sbtOwner",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(CreditLogic)3117": {
        "encoding": "inplace",
        "label": "contract CreditLogic",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2421_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2420,
            "contract": "contracts/CreditScore.sol:CreditScore",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}