{
  "address": "0xdf269C78947CCab9634647dc588d1ec2aB70DFbd",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getBorrowers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getGuarantyRequest",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dealAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeRentedUntil",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "requestAccepted",
              "type": "bool"
            }
          ],
          "internalType": "struct CreditLogic.GuarantyRequest",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "guarantyAcceptRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeRentedUntil",
          "type": "uint256"
        }
      ],
      "name": "guarantyRaiseRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_starkProtocolAddress",
          "type": "address"
        }
      ],
      "name": "setStarkAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa302eb7949b531427d3d21e45b1356883454561688a8c3c4b3367099576ddfff",
  "receipt": {
    "to": null,
    "from": "0xC3A3362DC30588a027767063459dC533Dc4A421a",
    "contractAddress": "0xdf269C78947CCab9634647dc588d1ec2aB70DFbd",
    "transactionIndex": 8,
    "gasUsed": "1314443",
    "logsBloom": "0x
    "blockHash": "0x1fca4aa5b875a13bd956bcc121b37fe2fa9df38ff85ed6784dcc9a6282fecd61",
    "transactionHash": "0xa302eb7949b531427d3d21e45b1356883454561688a8c3c4b3367099576ddfff",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 27300391,
        "transactionHash": "0xa302eb7949b531427d3d21e45b1356883454561688a8c3c4b3367099576ddfff",
        "address": "0xdf269C78947CCab9634647dc588d1ec2aB70DFbd",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c3a3362dc30588a027767063459dc533dc4a421a"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0x1fca4aa5b875a13bd956bcc121b37fe2fa9df38ff85ed6784dcc9a6282fecd61"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 27300391,
        "transactionHash": "0xa302eb7949b531427d3d21e45b1356883454561688a8c3c4b3367099576ddfff",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c3a3362dc30588a027767063459dc533dc4a421a",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000a30a37fed25f5f000000000000000000000000000000000000000000000000142b8031e0313bb900000000000000000000000000000000000000000000201c0d10cc02178f1ca8000000000000000000000000000000000000000000000000138875f9e15edc5a00000000000000000000000000000000000000000000201c0db3d63a16617c07",
        "logIndex": 17,
        "blockHash": "0x1fca4aa5b875a13bd956bcc121b37fe2fa9df38ff85ed6784dcc9a6282fecd61"
      }
    ],
    "blockNumber": 27300391,
    "cumulativeGasUsed": "2592056",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "03c4325649b8b93cc15720a5e539f64e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getBorrowers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getGuarantyRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dealAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeRentedUntil\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"requestAccepted\",\"type\":\"bool\"}],\"internalType\":\"struct CreditLogic.GuarantyRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"guarantyAcceptRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeRentedUntil\",\"type\":\"uint256\"}],\"name\":\"guarantyRaiseRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_starkProtocolAddress\",\"type\":\"address\"}],\"name\":\"setStarkAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CreditLogic.sol\":\"CreditLogic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/CreditLogic.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"./p2p/Deal.sol\\\";\\nimport \\\"./interfaces/IStark.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract CreditLogic is Context, Ownable {\\n    // deal_contract private dealContract;\\n    Istark_protocol starkContract;\\n    address private starkProtocolAddress;\\n    address[] private borrowers;\\n\\n    function setStarkAddress(address _starkProtocolAddress) external onlyOwner {\\n        starkContract = Istark_protocol(_starkProtocolAddress);\\n        starkProtocolAddress = _starkProtocolAddress;\\n    }\\n\\n    // struct P2PRequest {\\n    //     address borrower; // * Address of the borrower\\n    //     address lender; // * Address of the Lender\\n    //     address dealAddress; // * Address of the Deal Contract\\n    //     address tokenAddress;\\n    //     uint256 instalmentAmount; //* Amount to be paid in each instalment\\n    //     uint256 totalAmount; // * Total Amount borrowed\\n    //     uint256 interestRate; // * Interest Rate by the Lender\\n    //     uint16 noOfInstalments; // * No of Instalments\\n    //     bool requestAccepted; // * Request Raised by the lender accepted or not\\n    // }\\n\\n    struct GuarantyRequest {\\n        address borrower; // * Address of the borrower\\n        address lender; // * Address of the Lender\\n        address dealAddress;\\n        address tokenAddress;\\n        uint256 totalAmount; // * Amount looking for the guaranty\\n        uint256 timeRentedUntil;\\n        bool requestAccepted; // * Request Raised by the lender accepted or not\\n    }\\n\\n    // * To store all the GuarantyRequest made in the protocol\\n    // guarantyRequests[_lender][_borrower]\\n    mapping(address => mapping(address => GuarantyRequest)) private guarantyRequests;\\n\\n    // * To store all the p2pRequests made in the protocol\\n    // lender & borrower -> request\\n    // mapping(address => mapping(address => P2PRequest)) private p2pRequests;\\n\\n    ///////////////////////\\n    //// p2p functions ///\\n    //////////////////////\\n\\n    // * FUNCTION: To deploy the Deal Contract\\n    // function p2pDeploy(address _lender, address _borrower) internal {\\n    //     P2PRequest memory requestDetails = p2pRequests[_lender][_borrower];\\n\\n    //     dealContract = new deal_contract(\\n    //         requestDetails.borrower,\\n    //         requestDetails.lender,\\n    //         starkProtocolAddress,\\n    //         requestDetails.tokenAddress,\\n    //         requestDetails.instalmentAmount,\\n    //         requestDetails.totalAmount,\\n    //         requestDetails.interestRate,\\n    //         requestDetails.noOfInstalments\\n    //     );\\n\\n    //     p2pRequests[requestDetails.lender][requestDetails.borrower].dealAddress = address(\\n    //         dealContract\\n    //     );\\n\\n    //     starkContract.addAllowContracts(address(dealContract));\\n\\n    //     // emit Event to notify both lender and borrower\\n    // }\\n\\n    // // * FUNCTION: To raise the P2PRequest to borrow\\n    // function p2pRaiseRequest(\\n    //     uint256 _instalmentAmount,\\n    //     uint256 _totalAmount,\\n    //     uint256 _interestRate,\\n    //     uint16 _noOfInstalments,\\n    //     address _lender,\\n    //     address _tokenAddress\\n    // ) external {\\n    //     require(!p2pRequests[_lender][_msgSender()].requestAccepted, \\\"ERR:RA\\\"); // RA => Request Accepted\\n\\n    //     P2PRequest memory requestDetails;\\n\\n    //     requestDetails.borrower = _msgSender();\\n    //     requestDetails.lender = _lender;\\n    //     requestDetails.instalmentAmount = _instalmentAmount;\\n    //     requestDetails.totalAmount = _totalAmount;\\n    //     requestDetails.interestRate = _interestRate;\\n    //     requestDetails.noOfInstalments = _noOfInstalments;\\n    //     requestDetails.tokenAddress = _tokenAddress;\\n\\n    //     p2pRequests[_lender][_msgSender()] = requestDetails;\\n\\n    //     // emit event to notify lender\\n    // }\\n\\n    // // * FUNCTION: To accept the P2PRequest made by the borrower\\n    // function p2pAcceptRequest(address _borrower) external payable {\\n    //     P2PRequest memory requestDetails = p2pRequests[_msgSender()][_borrower];\\n\\n    //     require(!requestDetails.requestAccepted, \\\"ERR:AA\\\"); // AA =>Already Accepted\\n    //     uint256 tokenAmountinProtocol = starkContract.getSupplyBalance(\\n    //         requestDetails.tokenAddress,\\n    //         _msgSender()\\n    //     );\\n    //     require(requestDetails.totalAmount <= tokenAmountinProtocol, \\\"ERR:NE\\\"); // NA => Not Enough Amount\\n\\n    //     starkContract.lockBalanceChanges(\\n    //         requestDetails.tokenAddress,\\n    //         _msgSender(),\\n    //         _borrower,\\n    //         requestDetails.totalAmount\\n    //     );\\n\\n    //     p2pRequests[_msgSender()][_borrower].requestAccepted = true;\\n\\n    //     p2pDeploy(_msgSender(), _borrower);\\n\\n    //     // emit event to notify borrower\\n    // }\\n\\n    ////////////////////////////\\n    ///// guaranty functions ///\\n    ////////////////////////////\\n\\n    // * FUNCTION: To raise the request for backing the loan from the protocol\\n    function guarantyRaiseRequest(\\n        address _lender,\\n        address _tokenAddress,\\n        uint256 _totalAmount,\\n        uint256 _timeRentedUntil\\n    ) external {\\n        require(!guarantyRequests[_lender][_msgSender()].requestAccepted, \\\"Err: Already Raised\\\");\\n\\n        GuarantyRequest memory requestDetails;\\n        requestDetails.borrower = _msgSender();\\n        requestDetails.lender = _lender;\\n        requestDetails.totalAmount = _totalAmount;\\n        requestDetails.timeRentedUntil = _timeRentedUntil;\\n        requestDetails.tokenAddress = _tokenAddress;\\n        borrowers.push(_msgSender());\\n\\n        guarantyRequests[_lender][_msgSender()] = requestDetails;\\n        // emit event to notify lender\\n    }\\n\\n    // * FUNCTION: To accept the GuarantyRequest made by the borrower\\n    function guarantyAcceptRequest(address _borrower) external {\\n        GuarantyRequest memory requestDetails = guarantyRequests[_msgSender()][_borrower];\\n\\n        require(!requestDetails.requestAccepted, \\\"ERR: Already Accepted\\\"); // AA =>Already Accepted\\n\\n        uint256 tokenAmountinProtocol = starkContract.getSupplyBalance(\\n            requestDetails.tokenAddress,\\n            _msgSender()\\n        );\\n\\n        require(requestDetails.totalAmount <= tokenAmountinProtocol, \\\"ERR: Not Enough Amount\\\"); // NA => Not Enough Amount\\n\\n        starkContract.lockBalanceChanges(\\n            requestDetails.tokenAddress,\\n            _msgSender(),\\n            _borrower,\\n            requestDetails.totalAmount\\n        );\\n\\n        guarantyRequests[_msgSender()][_borrower].requestAccepted = true;\\n        // emit event to notify borrower\\n    }\\n\\n    //////////////////////////\\n    ///// getter functions ///\\n    /////////////////////////\\n\\n    // * FUNCTION: To get the p2pRequests made by a particualr address\\n    // function getP2PRequest(address _lender, address _borrower)\\n    //     external\\n    //     view\\n    //     returns (P2PRequest memory)\\n    // {\\n    //     return p2pRequests[_lender][_borrower];\\n    // }\\n\\n    // * FUNCTION: To get the p2pRequests made by a particualr address\\n    function getGuarantyRequest(address _lender, address _borrower)\\n        external\\n        view\\n        returns (GuarantyRequest memory)\\n    {\\n        return guarantyRequests[_lender][_borrower];\\n    }\\n\\n    function getBorrowers() external view returns (address[] memory) {\\n        return borrowers;\\n    }\\n}\\n\",\"keccak256\":\"0x7e7b6072875b9265f7e22a72377477e0eb06a69b3c22947799c035c65a0364a7\",\"license\":\"MIT\"},\"contracts/interfaces/IStark.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface Istark_protocol {\\n    function getSupplyBalance(address tokenAddress, address userAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLockedBalance(address tokenAddress, address userAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function lockBalanceChanges(\\n        address _tokenAddress,\\n        address _lender,\\n        address _borrower,\\n        uint256 _tokenAmount\\n    ) external;\\n\\n    function addAllowContracts(address _contractAddress) external;\\n\\n    function repayChanges(\\n        address _tokenAddress,\\n        address _lender,\\n        address _borrower,\\n        uint256 _tokenAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf40376d4d0dd545f2712788282994aa3b1677e3800fed6bf5c5bc5abd5d9b423\",\"license\":\"MIT\"},\"contracts/p2p/Deal.sol\":{\"content\":\"// //SPDX-License-Identifier: Unlicense\\n// pragma solidity 0.8.15;\\n\\n// import \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n// import \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n// import \\\"../interfaces/IStark.sol\\\";\\n\\n// contract deal_contract is Context {\\n//     using SafeMath for uint256;\\n\\n//     address private deployer;\\n//     address private borrower;\\n//     address private lender;\\n\\n//     Istark_protocol starkContract;\\n\\n//     struct DealDetials {\\n//         address tokenAddress;\\n//         uint256 totalAmount; // * Total amount borrowed by the borrower\\n//         uint256 totalAmountToPay; // * Total amount including interest left to be paid\\n//         uint256 amountPaidTotal; // * Amount paid by the borrower in total\\n//         uint256 instalmentAmt; // * Amount to be paid per insalment\\n//         uint256 timeRentedSince; // * Time when the deal started\\n//         uint256 interestRate; // * Interest rate decided by the lender.\\n//         uint256 addedInterestRate; // * Additional Interest Rate for additional no. of instalments.\\n//         uint16 noOfInstalments; // * No of instalments in which borrower will pay amount\\n//         bool addedInstalments; // * If borrower got more instalments after request.\\n//     }\\n\\n//     DealDetials private deal;\\n\\n//     struct AdditionalRequest {\\n//         uint16 noOfInstalments; // * No of additional instalments\\n//         uint256 interestRate; // * Interest Rate\\n//         bool isAccepted; // * Request Accepted or Not\\n//     }\\n\\n//     mapping(address => AdditionalRequest) additionRequest;\\n\\n//     constructor(\\n//         address _borrower,\\n//         address _lender,\\n//         address _starkAddress,\\n//         address _tokenAddress,\\n//         uint256 _instalmentAmount,\\n//         uint256 _totalAmount,\\n//         uint256 _interestRate,\\n//         uint16 _noOfInstalments\\n//     ) {\\n//         deployer = _msgSender();\\n//         borrower = _borrower;\\n//         lender = _lender;\\n//         starkContract = Istark_protocol(_starkAddress);\\n\\n//         DealDetials storage dealDetails = deal;\\n\\n//         dealDetails.noOfInstalments = _noOfInstalments;\\n//         dealDetails.totalAmount = _totalAmount;\\n//         dealDetails.interestRate = _interestRate;\\n//         dealDetails.timeRentedSince = uint256(block.timestamp);\\n//         dealDetails.instalmentAmt = getInstalmentAmount(_instalmentAmount);\\n//         dealDetails.totalAmountToPay = _totalAmount + dealDetails.instalmentAmt;\\n//         dealDetails.tokenAddress = _tokenAddress;\\n//     }\\n\\n//     modifier onlyBorrower() {\\n//         require(msg.sender == borrower, \\\"ERR:BO\\\"); // BO => Borrower only\\n//         _;\\n//     }\\n\\n//     modifier onlyLender() {\\n//         require(msg.sender == lender, \\\"ERR:LO\\\"); // BL => Lender only\\n//         _;\\n//     }\\n\\n//     // * FUNCTION: To get the address of the borrower.\\n//     function getBorrower() public view returns (address) {\\n//         return borrower;\\n//     }\\n\\n//     // * FUNCTION: To get the address of the lender.\\n//     function getLender() public view returns (address) {\\n//         return lender;\\n//     }\\n\\n//     // * FUNCTION: To get the detials of the Deal.\\n//     function getDealDetails() public view returns (DealDetials memory) {\\n//         return deal;\\n//     }\\n\\n//     // * FUNCTION: To get the Instalment Amount\\n//     function getInstalmentAmount(uint256 _instalmentAmount) public view returns (uint256) {\\n//         DealDetials memory dealDetails = deal;\\n//         uint256 interestAmount = (_instalmentAmount * dealDetails.interestRate).div(\\n//             uint256(dealDetails.noOfInstalments  * 100)\\n//         );\\n\\n//         uint256 instalmentAmount = _instalmentAmount + interestAmount;\\n//         return instalmentAmount;\\n//     }\\n\\n//     // * FUNCTION: To get the number of instalments\\n//     function getNoOfInstalments() public view returns (uint16) {\\n//         return deal.noOfInstalments;\\n//     }\\n\\n//     // * FUNCTION: To get the total amount owed\\n//     function getTotalAmountOwed() public view returns (uint256) {\\n//         return deal.totalAmount;\\n//     }\\n\\n//     // * FUNCTION: To get the amount left to be paid\\n//     function getTotalAmountLeft() public view returns (uint256) {\\n//         return deal.totalAmountToPay;\\n//     }\\n\\n//     // * FUNCTION: To get the interest rate\\n//     function getInterestRate() public view returns (uint256) {\\n//         return deal.interestRate;\\n//     }\\n\\n//     // * FUNCTION: Pay the amount left at once\\n//     function payAtOnce() external onlyBorrower {\\n//         DealDetials memory dealDetails = deal;\\n//         require(dealDetails.noOfInstalments > 0, \\\"ERR:NM\\\"); // NM => No more installments\\n//         require(dealDetails.amountPaidTotal < dealDetails.totalAmount, \\\"ERR:NM\\\"); // NM => No more installments\\n\\n//         // uint256 value = msg.value;\\n//         uint256 amountLeftToPay = getTotalAmountLeft();\\n//         // require(value == amountLeftToPay, \\\"ERR:WV\\\"); // WV => Wrong value\\n\\n//         starkContract.repayChanges(dealDetails.tokenAddress, lender, borrower, amountLeftToPay);\\n\\n//         deal.amountPaidTotal += amountLeftToPay;\\n//         deal.totalAmountToPay -= amountLeftToPay;\\n//     }\\n\\n//     // * FUNCTION: Pay the pre-defined amount in instalments not necessarily periodically.\\n//     function payInInstalment() external payable onlyBorrower {\\n//         DealDetials memory dealDetails = deal;\\n\\n//         require(dealDetails.noOfInstalments > 0, \\\"ERR:NM\\\"); // NM => No more installments\\n//         require(dealDetails.amountPaidTotal < dealDetails.totalAmount, \\\"ERR:NM\\\"); // NM => No more installments\\n\\n//         // * amtToLenderOnly: Amount with standard interest\\n//         uint256 amtToLenderOnly = dealDetails.instalmentAmt;\\n\\n//         if (dealDetails.addedInstalments) {\\n//             // * totalInterestedAmount: Amount after additional interest is added\\n//             uint256 totalInterestedAmount = amtToLenderOnly +\\n//                 (dealDetails.addedInterestRate * dealDetails.instalmentAmt);\\n\\n//             // require(value == totalInterestedAmount, \\\"ERR:WV\\\"); // WV => Wrong value\\n\\n//             // * amtToLender: Amount after with 95% of additional interest is added\\n//             uint256 amtToLender = amtToLenderOnly +\\n//                 (dealDetails.instalmentAmt * dealDetails.addedInterestRate * 95 * 10**16);\\n\\n//             // * amtToProtocol: Amount after with 5% of additional interest is added\\n//             uint256 amtToProtocol = dealDetails.instalmentAmt *\\n//                 dealDetails.addedInterestRate *\\n//                 5 *\\n//                 10**16;\\n\\n//             // (bool successInLender, ) = lender.call{value: amtToLender}(\\\"\\\");\\n//             // require(successInLender, \\\"ERR:OT\\\"); //OT => On Transfer\\n\\n//             starkContract.repayChanges(dealDetails.tokenAddress, lender, borrower, amtToLender);\\n\\n//             // (bool successInBorrower, ) = deployer.call{value: amtToProtocol}(\\\"\\\");\\n//             // require(successInBorrower, \\\"ERR:OT\\\"); //OT => On Transfer\\n//             deal.amountPaidTotal += amtToLender;\\n//             deal.totalAmountToPay -= amtToLender;\\n//             //! TODO: Function to pass the value to the protocol\\n//         } else {\\n//             starkContract.repayChanges(\\n//                 dealDetails.tokenAddress,\\n//                 lender,\\n//                 borrower,\\n//                 amtToLenderOnly\\n//             );\\n\\n//             deal.amountPaidTotal += amtToLenderOnly;\\n//             deal.totalAmountToPay -= amtToLenderOnly;\\n//         }\\n//         --deal.noOfInstalments;\\n//     }\\n\\n//     // * FUNCTION: Request the Lender for more instalments\\n//     function requestNoOfInstalment(uint16 noOfAddInstalments, uint256 _interestRate)\\n//         external\\n//         onlyBorrower\\n//     {\\n//         require(noOfAddInstalments >= 3, \\\"ERR:MR\\\"); // MR => Minimum required no of instalments\\n\\n//         additionRequest[_msgSender()] = AdditionalRequest(\\n//             noOfAddInstalments,\\n//             _interestRate,\\n//             false\\n//         );\\n\\n//         // emit event\\n//     }\\n\\n//     // * FUNCTION: Accept the request made the Lender for more instalments\\n//     function acceptRequestOfInstalment(\\n//         address _borrower,\\n//         uint16 _noOfAddInstalments,\\n//         uint256 _interestRate\\n//     ) external onlyLender {\\n//         require(!additionRequest[_borrower].isAccepted, \\\"ERR:AA\\\"); // AA => Already Accepted\\n\\n//         additionRequest[_borrower].isAccepted = true;\\n\\n//         deal.noOfInstalments += _noOfAddInstalments;\\n//         deal.addedInterestRate = _interestRate;\\n//         deal.addedInstalments = true;\\n//     }\\n// }\\n\",\"keccak256\":\"0x644f28ad932473b5c85dca106f1d1bd8e1c5e2f138e6dd7d42fc7e279ff77f9c\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61165e8061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806383e2636b1161005b57806383e2636b146101015780638cd801a01461011d5780638da5cb5b14610139578063f2fde38b1461015757610088565b80636854786a1461008d578063692177e7146100ab5780636b27e9aa146100c7578063715018a6146100f7575b600080fd5b610095610173565b6040516100a291906110bc565b60405180910390f35b6100c560048036038101906100c0919061110f565b610201565b005b6100e160048036038101906100dc919061113c565b610699565b6040516100ee919061123e565b60405180910390f35b6100ff6108b7565b005b61011b60048036038101906101169190611285565b6108cb565b005b6101376004803603810190610132919061110f565b610cb2565b005b610141610d3f565b60405161014e91906112fb565b60405180910390f35b610171600480360381019061016c919061110f565b610d68565b005b606060038054806020026020016040519081016040528092919081815260200182805480156101f757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116101ad575b5050505050905090565b60006004600061020f610deb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff16151515158152505090508060c001511561045f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045690611373565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ba37773183606001516104ac610deb565b6040518363ffffffff1660e01b81526004016104c9929190611393565b602060405180830381865afa1580156104e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050a91906113d1565b90508082608001511115610553576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054a9061144a565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bcbc3e1b836060015161059e610deb565b8686608001516040518563ffffffff1660e01b81526004016105c39493929190611479565b600060405180830381600087803b1580156105dd57600080fd5b505af11580156105f1573d6000803e3d6000fd5b50505050600160046000610603610deb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060160006101000a81548160ff021916908315150217905550505050565b6106a1610f35565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581525050905092915050565b6108bf610df3565b6108c96000610e71565b565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610914610deb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060160009054906101000a900460ff161561099f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109969061150a565b60405180910390fd5b6109a7610f35565b6109af610deb565b816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505084816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082816080018181525050818160a001818152505083816060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506003610a74610deb565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610b1e610deb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff0219169083151502179055509050505050505050565b610cba610df3565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610d70610df3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ddf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd69061159c565b60405180910390fd5b610de881610e71565b50565b600033905090565b610dfb610deb565b73ffffffffffffffffffffffffffffffffffffffff16610e19610d3f565b73ffffffffffffffffffffffffffffffffffffffff1614610e6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6690611608565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000151581525090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061102382610ff8565b9050919050565b61103381611018565b82525050565b6000611045838361102a565b60208301905092915050565b6000602082019050919050565b600061106982610fcc565b6110738185610fd7565b935061107e83610fe8565b8060005b838110156110af5781516110968882611039565b97506110a183611051565b925050600181019050611082565b5085935050505092915050565b600060208201905081810360008301526110d6818461105e565b905092915050565b600080fd5b6110ec81611018565b81146110f757600080fd5b50565b600081359050611109816110e3565b92915050565b600060208284031215611125576111246110de565b5b6000611133848285016110fa565b91505092915050565b60008060408385031215611153576111526110de565b5b6000611161858286016110fa565b9250506020611172858286016110fa565b9150509250929050565b6000819050919050565b61118f8161117c565b82525050565b60008115159050919050565b6111aa81611195565b82525050565b60e0820160008201516111c6600085018261102a565b5060208201516111d9602085018261102a565b5060408201516111ec604085018261102a565b5060608201516111ff606085018261102a565b5060808201516112126080850182611186565b5060a082015161122560a0850182611186565b5060c082015161123860c08501826111a1565b50505050565b600060e08201905061125360008301846111b0565b92915050565b6112628161117c565b811461126d57600080fd5b50565b60008135905061127f81611259565b92915050565b6000806000806080858703121561129f5761129e6110de565b5b60006112ad878288016110fa565b94505060206112be878288016110fa565b93505060406112cf87828801611270565b92505060606112e087828801611270565b91505092959194509250565b6112f581611018565b82525050565b600060208201905061131060008301846112ec565b92915050565b600082825260208201905092915050565b7f4552523a20416c72656164792041636365707465640000000000000000000000600082015250565b600061135d601583611316565b915061136882611327565b602082019050919050565b6000602082019050818103600083015261138c81611350565b9050919050565b60006040820190506113a860008301856112ec565b6113b560208301846112ec565b9392505050565b6000815190506113cb81611259565b92915050565b6000602082840312156113e7576113e66110de565b5b60006113f5848285016113bc565b91505092915050565b7f4552523a204e6f7420456e6f75676820416d6f756e7400000000000000000000600082015250565b6000611434601683611316565b915061143f826113fe565b602082019050919050565b6000602082019050818103600083015261146381611427565b9050919050565b6114738161117c565b82525050565b600060808201905061148e60008301876112ec565b61149b60208301866112ec565b6114a860408301856112ec565b6114b5606083018461146a565b95945050505050565b7f4572723a20416c72656164792052616973656400000000000000000000000000600082015250565b60006114f4601383611316565b91506114ff826114be565b602082019050919050565b60006020820190508181036000830152611523816114e7565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611586602683611316565b91506115918261152a565b604082019050919050565b600060208201905081810360008301526115b581611579565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006115f2602083611316565b91506115fd826115bc565b602082019050919050565b60006020820190508181036000830152611621816115e5565b905091905056fea26469706673582212204cdeb4cddb4fba631725dafeaacddfa38539576dfd0d91ee4d32fdb795cad14d64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c806383e2636b1161005b57806383e2636b146101015780638cd801a01461011d5780638da5cb5b14610139578063f2fde38b1461015757610088565b80636854786a1461008d578063692177e7146100ab5780636b27e9aa146100c7578063715018a6146100f7575b600080fd5b610095610173565b6040516100a291906110bc565b60405180910390f35b6100c560048036038101906100c0919061110f565b610201565b005b6100e160048036038101906100dc919061113c565b610699565b6040516100ee919061123e565b60405180910390f35b6100ff6108b7565b005b61011b60048036038101906101169190611285565b6108cb565b005b6101376004803603810190610132919061110f565b610cb2565b005b610141610d3f565b60405161014e91906112fb565b60405180910390f35b610171600480360381019061016c919061110f565b610d68565b005b606060038054806020026020016040519081016040528092919081815260200182805480156101f757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116101ad575b5050505050905090565b60006004600061020f610deb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff16151515158152505090508060c001511561045f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045690611373565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ba37773183606001516104ac610deb565b6040518363ffffffff1660e01b81526004016104c9929190611393565b602060405180830381865afa1580156104e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050a91906113d1565b90508082608001511115610553576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054a9061144a565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bcbc3e1b836060015161059e610deb565b8686608001516040518563ffffffff1660e01b81526004016105c39493929190611479565b600060405180830381600087803b1580156105dd57600080fd5b505af11580156105f1573d6000803e3d6000fd5b50505050600160046000610603610deb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060160006101000a81548160ff021916908315150217905550505050565b6106a1610f35565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581525050905092915050565b6108bf610df3565b6108c96000610e71565b565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610914610deb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060160009054906101000a900460ff161561099f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109969061150a565b60405180910390fd5b6109a7610f35565b6109af610deb565b816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505084816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082816080018181525050818160a001818152505083816060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506003610a74610deb565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610b1e610deb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff0219169083151502179055509050505050505050565b610cba610df3565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610d70610df3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ddf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd69061159c565b60405180910390fd5b610de881610e71565b50565b600033905090565b610dfb610deb565b73ffffffffffffffffffffffffffffffffffffffff16610e19610d3f565b73ffffffffffffffffffffffffffffffffffffffff1614610e6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6690611608565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000151581525090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061102382610ff8565b9050919050565b61103381611018565b82525050565b6000611045838361102a565b60208301905092915050565b6000602082019050919050565b600061106982610fcc565b6110738185610fd7565b935061107e83610fe8565b8060005b838110156110af5781516110968882611039565b97506110a183611051565b925050600181019050611082565b5085935050505092915050565b600060208201905081810360008301526110d6818461105e565b905092915050565b600080fd5b6110ec81611018565b81146110f757600080fd5b50565b600081359050611109816110e3565b92915050565b600060208284031215611125576111246110de565b5b6000611133848285016110fa565b91505092915050565b60008060408385031215611153576111526110de565b5b6000611161858286016110fa565b9250506020611172858286016110fa565b9150509250929050565b6000819050919050565b61118f8161117c565b82525050565b60008115159050919050565b6111aa81611195565b82525050565b60e0820160008201516111c6600085018261102a565b5060208201516111d9602085018261102a565b5060408201516111ec604085018261102a565b5060608201516111ff606085018261102a565b5060808201516112126080850182611186565b5060a082015161122560a0850182611186565b5060c082015161123860c08501826111a1565b50505050565b600060e08201905061125360008301846111b0565b92915050565b6112628161117c565b811461126d57600080fd5b50565b60008135905061127f81611259565b92915050565b6000806000806080858703121561129f5761129e6110de565b5b60006112ad878288016110fa565b94505060206112be878288016110fa565b93505060406112cf87828801611270565b92505060606112e087828801611270565b91505092959194509250565b6112f581611018565b82525050565b600060208201905061131060008301846112ec565b92915050565b600082825260208201905092915050565b7f4552523a20416c72656164792041636365707465640000000000000000000000600082015250565b600061135d601583611316565b915061136882611327565b602082019050919050565b6000602082019050818103600083015261138c81611350565b9050919050565b60006040820190506113a860008301856112ec565b6113b560208301846112ec565b9392505050565b6000815190506113cb81611259565b92915050565b6000602082840312156113e7576113e66110de565b5b60006113f5848285016113bc565b91505092915050565b7f4552523a204e6f7420456e6f75676820416d6f756e7400000000000000000000600082015250565b6000611434601683611316565b915061143f826113fe565b602082019050919050565b6000602082019050818103600083015261146381611427565b9050919050565b6114738161117c565b82525050565b600060808201905061148e60008301876112ec565b61149b60208301866112ec565b6114a860408301856112ec565b6114b5606083018461146a565b95945050505050565b7f4572723a20416c72656164792052616973656400000000000000000000000000600082015250565b60006114f4601383611316565b91506114ff826114be565b602082019050919050565b60006020820190508181036000830152611523816114e7565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611586602683611316565b91506115918261152a565b604082019050919050565b600060208201905081810360008301526115b581611579565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006115f2602083611316565b91506115fd826115bc565b602082019050919050565b60006020820190508181036000830152611621816115e5565b905091905056fea26469706673582212204cdeb4cddb4fba631725dafeaacddfa38539576dfd0d91ee4d32fdb795cad14d64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 111,
        "contract": "contracts/CreditLogic.sol:CreditLogic",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 980,
        "contract": "contracts/CreditLogic.sol:CreditLogic",
        "label": "starkContract",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Istark_protocol)3327"
      },
      {
        "astId": 982,
        "contract": "contracts/CreditLogic.sol:CreditLogic",
        "label": "starkProtocolAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 985,
        "contract": "contracts/CreditLogic.sol:CreditLogic",
        "label": "borrowers",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1025,
        "contract": "contracts/CreditLogic.sol:CreditLogic",
        "label": "guarantyRequests",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(GuarantyRequest)1018_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Istark_protocol)3327": {
        "encoding": "inplace",
        "label": "contract Istark_protocol",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(GuarantyRequest)1018_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct CreditLogic.GuarantyRequest))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(GuarantyRequest)1018_storage)"
      },
      "t_mapping(t_address,t_struct(GuarantyRequest)1018_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CreditLogic.GuarantyRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(GuarantyRequest)1018_storage"
      },
      "t_struct(GuarantyRequest)1018_storage": {
        "encoding": "inplace",
        "label": "struct CreditLogic.GuarantyRequest",
        "members": [
          {
            "astId": 1005,
            "contract": "contracts/CreditLogic.sol:CreditLogic",
            "label": "borrower",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1007,
            "contract": "contracts/CreditLogic.sol:CreditLogic",
            "label": "lender",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1009,
            "contract": "contracts/CreditLogic.sol:CreditLogic",
            "label": "dealAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1011,
            "contract": "contracts/CreditLogic.sol:CreditLogic",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1013,
            "contract": "contracts/CreditLogic.sol:CreditLogic",
            "label": "totalAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1015,
            "contract": "contracts/CreditLogic.sol:CreditLogic",
            "label": "timeRentedUntil",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1017,
            "contract": "contracts/CreditLogic.sol:CreditLogic",
            "label": "requestAccepted",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}