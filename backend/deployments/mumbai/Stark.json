{
  "address": "0xe7741e436d63d8CAF5AAAF2AEe6F789fc69bFbEe",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "allowedTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "priceFeeds",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "updateInterval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stark__CannotWithdrawMoreThanSupplied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Stark__CouldNotBorrowMoreThan80PercentOfCollateral",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stark__NeedMoreThanZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stark__NotAllowedBeforeRepayingExistingLoan",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Stark__NotSupplied",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "Stark__SorryWeCurrentlyDoNotHaveThisToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "Stark__ThisTokenIsNotAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Stark__TransactionFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Stark__UpKeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "friendAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "reponse",
          "type": "bool"
        }
      ],
      "name": "Guaranteed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenBorrowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenRepaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenSupplied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenWithdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        }
      ],
      "name": "addAllowContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "friendAddress",
          "type": "address"
        }
      ],
      "name": "allowGuaranty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "friendAddress",
          "type": "address"
        }
      ],
      "name": "disAllowGuaranty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "faucet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTokenSupplyInUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllowedTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getBorrowedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBorrowers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getLockedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getMaxBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getMaxTokenBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getMaxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSuppliers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getSupplyBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getTokenTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getTotalAllowedValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getTotalBorrowValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getTotalLockedValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getTotalSupplyAllowedValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getTotalSupplyValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUniqueBorrowerTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUniqueSupplierTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "lockBalanceChanges",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "supply",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6367eaa8eeddfcc4cf203e7ab78cfad2762f8d777b9290edc79b2aa7a511372e",
  "receipt": {
    "to": null,
    "from": "0xC3A3362DC30588a027767063459dC533Dc4A421a",
    "contractAddress": "0xe7741e436d63d8CAF5AAAF2AEe6F789fc69bFbEe",
    "transactionIndex": 0,
    "gasUsed": "5449425",
    "logsBloom": "0x
    "blockHash": "0x2434b9f36980577f7a657891cad4494f5bf2db01eb6c6c7994a2073e9b53bf39",
    "transactionHash": "0x6367eaa8eeddfcc4cf203e7ab78cfad2762f8d777b9290edc79b2aa7a511372e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 27312889,
        "transactionHash": "0x6367eaa8eeddfcc4cf203e7ab78cfad2762f8d777b9290edc79b2aa7a511372e",
        "address": "0xe7741e436d63d8CAF5AAAF2AEe6F789fc69bFbEe",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c3a3362dc30588a027767063459dc533dc4a421a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2434b9f36980577f7a657891cad4494f5bf2db01eb6c6c7994a2073e9b53bf39"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 27312889,
        "transactionHash": "0x6367eaa8eeddfcc4cf203e7ab78cfad2762f8d777b9290edc79b2aa7a511372e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c3a3362dc30588a027767063459dc533dc4a421a",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002623771474c80de0000000000000000000000000000000000000000000000003bd9ba63502dacdb00000000000000000000000000000000000000000000202ccd4122fe7dfd81e7000000000000000000000000000000000000000000000000397782f208e12bfd00000000000000000000000000000000000000000000202ccfa35a6fc54a02c5",
        "logIndex": 1,
        "blockHash": "0x2434b9f36980577f7a657891cad4494f5bf2db01eb6c6c7994a2073e9b53bf39"
      }
    ],
    "blockNumber": 27312889,
    "cumulativeGasUsed": "5449425",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0xe83b16E5EDEd23f7e8276930D26D376d0b05b915",
      "0xc113cb45987F301081edc7A4ce0376525F573Aab",
      "0x6FFD350f9C705d58586Da02be32623D040f8976E",
      "0x74758d04BCE3Aee82e88335BB3212010Eb0B91A3",
      "0xD41D929D5eAa0aF3e89679950640bA6abB8e589b"
    ],
    [
      "0x007A22900a3B98143368Bd5906f8E17e9867581b",
      "0x0715A7794a1dc8e42615F059dD6e406A6594651A",
      "0x0FCAa9c899EC5A91eBc3D5Dd869De833b06fB046",
      "0x572dDec9087154dC5dfBB1546Bb62713147e0Ab0",
      "0x0FCAa9c899EC5A91eBc3D5Dd869De833b06fB046"
    ],
    "30"
  ],
  "numDeployments": 4,
  "solcInputHash": "10a5bbddd3aba8887f48d74b9df19dca",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"allowedTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"priceFeeds\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"updateInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stark__CannotWithdrawMoreThanSupplied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Stark__CouldNotBorrowMoreThan80PercentOfCollateral\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stark__NeedMoreThanZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stark__NotAllowedBeforeRepayingExistingLoan\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Stark__NotSupplied\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"Stark__SorryWeCurrentlyDoNotHaveThisToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"Stark__ThisTokenIsNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Stark__TransactionFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Stark__UpKeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"friendAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"reponse\",\"type\":\"bool\"}],\"name\":\"Guaranteed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenBorrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenSupplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"addAllowContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"friendAddress\",\"type\":\"address\"}],\"name\":\"allowGuaranty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"friendAddress\",\"type\":\"address\"}],\"name\":\"disAllowGuaranty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"faucet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokenSupplyInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getBorrowedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getMaxBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getMaxTokenBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getMaxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSuppliers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getSupplyBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getTotalAllowedValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getTotalBorrowValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getTotalLockedValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getTotalSupplyAllowedValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getTotalSupplyValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUniqueBorrowerTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUniqueSupplierTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"lockBalanceChanges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Main  Functions   ///\"},\"getTokenTotalSupply(address)\":{\"notice\":\"getter functions   ///\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Stark.sol\":\"Stark\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/KeeperBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract KeeperBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5dc972fdf3a524312e68ef6d2e58bcdaf965d08d9415aefa289207350c2bc85a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./KeeperBase.sol\\\";\\nimport \\\"./interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\\n\",\"keccak256\":\"0xfdb84fea1ee213662ae66b95d4f620be73b7af5ede58be3d330b222b9b566d95\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Stark.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror Stark__NeedMoreThanZero(uint256 amount);\\nerror Stark__NotSupplied();\\nerror Stark__CannotWithdrawMoreThanSupplied(uint256 amount);\\nerror Stark__CouldNotBorrowMoreThan80PercentOfCollateral();\\nerror Stark__ThisTokenIsNotAvailable(address tokenAddress);\\nerror Stark__NotAllowedBeforeRepayingExistingLoan(uint256 amount);\\nerror Stark__TransactionFailed();\\nerror Stark__SorryWeCurrentlyDoNotHaveThisToken(address tokenAddress);\\nerror Stark__UpKeepNotNeeded();\\n\\ncontract Stark is ReentrancyGuard, KeeperCompatibleInterface, Ownable {\\n    address private deployer;\\n    address[] private s_allowedTokens; // * Array of allowed tokens\\n    address[] private s_suppliers; // * Array of all suppliers\\n    address[] private s_borrowers; // * Array of all borrowers\\n    address[] private s_allowedContracts;\\n    uint256 private immutable i_interval; // * Chainlink keepers Interval\\n    uint256 private s_lastTimeStamp; // * Time stamp for chainlink keepers\\n\\n    //////////////////\\n    //// Events /////\\n    ////////////////\\n\\n    event TokenSupplied(\\n        address indexed tokenAddress,\\n        address indexed userAddress,\\n        uint256 indexed amount\\n    );\\n    event TokenWithdrawn(\\n        address indexed tokenAddress,\\n        address indexed userAddress,\\n        uint256 indexed amount\\n    );\\n    event TokenBorrowed(\\n        address indexed tokenAddress,\\n        address indexed userAddress,\\n        uint256 indexed amount\\n    );\\n    event TokenRepaid(\\n        address indexed tokenAddress,\\n        address indexed userAddress,\\n        uint256 indexed amount\\n    );\\n    event Guaranteed(\\n        address indexed userAddress,\\n        address indexed friendAddress,\\n        bool indexed reponse\\n    );\\n\\n    //////////////////////\\n    /////  mappings  /////\\n    /////////////////////\\n\\n    // token address -> total supply of that token\\n    mapping(address => uint256) private s_totalSupply;\\n\\n    // tokenAddress & user address -> their supplied balances\\n    mapping(address => mapping(address => uint256)) private s_supplyBalances;\\n\\n    // tokenAddress & user adddress -> their borrowed balance\\n    mapping(address => mapping(address => uint256)) private s_borrowedBalances;\\n\\n    // tokenAddress & user adddress -> their locked balance\\n    mapping(address => mapping(address => uint256)) private s_lockedBalances;\\n\\n    // token address -> price feeds\\n    mapping(address => AggregatorV3Interface) private s_priceFeeds;\\n\\n    // userAddress -> all of his unique supplied tokens\\n    mapping(address => address[]) private s_supplierUniqueTokens;\\n\\n    // userAddress -> all of his unique borrowed tokens\\n    mapping(address => address[]) private s_borrowerUniqueTokens;\\n\\n    // userAddress & friend address => their guaranties\\n    mapping(address => mapping(address => bool)) private s_guarantys;\\n\\n    // contractAddress -> permission to modify the data in this contract\\n    // mapping(address => bool) private s_allowedContracts;\\n\\n    /////////////////////\\n    ///   Modifiers   ///\\n    /////////////////////\\n\\n    // * MODIFIER: check if user have supplied token or not\\n    modifier hasSupplied() {\\n        bool success;\\n        for (uint256 i = 0; i < s_allowedTokens.length; i++) {\\n            if (\\n                s_supplyBalances[s_allowedTokens[i]][msg.sender] > 0 ||\\n                s_allowedBalances[s_allowedTokens[i]][msg.sender] > 0\\n            ) {\\n                success = true;\\n            }\\n        }\\n\\n        if (!success) {\\n            revert Stark__NotSupplied();\\n        }\\n        _;\\n    }\\n\\n    // * MODIFIER: check value is more then 0\\n    modifier notZero(uint256 amount) {\\n        if (amount <= 0) {\\n            revert Stark__NeedMoreThanZero(amount);\\n        }\\n        _;\\n    }\\n\\n    // * MODIFIER: check is token allowed or not\\n    modifier isTokenAllowed(address tokenAddress) {\\n        bool execute;\\n        for (uint256 i = 0; i < s_allowedTokens.length; i++) {\\n            if (s_allowedTokens[i] == tokenAddress) {\\n                execute = true;\\n            }\\n        }\\n\\n        if (!execute) {\\n            revert Stark__ThisTokenIsNotAvailable(tokenAddress);\\n        }\\n        _;\\n    }\\n\\n    // * MODIFIER: Check whether the contract address is allowed to modify values.\\n    modifier onlyAllowedContracts(address _contractAddress) {\\n        bool execute;\\n        for (uint256 i = 0; i < s_allowedContracts.length; i++) {\\n            if (s_allowedContracts[i] == _contractAddress) {\\n                execute = true;\\n            }\\n        }\\n        require(execute, \\\"not onlyAllowedContracts\\\");\\n        _;\\n    }\\n\\n    //////////////////////////\\n    ///  Main  Functions   ///\\n    /////////////////////////\\n\\n    constructor(\\n        address[] memory allowedTokens,\\n        address[] memory priceFeeds,\\n        uint256 updateInterval\\n    ) {\\n        s_allowedTokens = allowedTokens;\\n        for (uint256 i = 0; i < allowedTokens.length; i++) {\\n            s_priceFeeds[allowedTokens[i]] = AggregatorV3Interface(priceFeeds[i]);\\n        }\\n        i_interval = updateInterval;\\n        s_lastTimeStamp = block.timestamp;\\n        s_allowedContracts.push(msg.sender);\\n    }\\n\\n    // * FUNCTION: Users can supply tokens\\n    function supply(address tokenAddress, uint256 amount)\\n        external\\n        payable\\n        isTokenAllowed(tokenAddress)\\n        notZero(amount)\\n        nonReentrant\\n    {\\n        bool success = IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount);\\n        if (!success) {\\n            revert Stark__TransactionFailed();\\n        }\\n        s_totalSupply[tokenAddress] += amount;\\n        s_supplyBalances[tokenAddress][msg.sender] += amount;\\n        addSupplier(msg.sender); // adds supplier in s_suppliers array\\n        addUniqueToken(s_supplierUniqueTokens[msg.sender], tokenAddress); // adding token address to their unique tokens array (check this function in helper functions sections)\\n        // s_supplierUniqueTokens[msg.sender] -> mapping\\n        emit TokenSupplied(tokenAddress, msg.sender, amount);\\n    }\\n\\n    // * FUNCTION: Users can withdraw their supplied tokens\\n    function withdraw(address tokenAddress, uint256 amount)\\n        external\\n        payable\\n        hasSupplied\\n        notZero(amount)\\n        nonReentrant\\n    {\\n        if (amount > s_supplyBalances[tokenAddress][msg.sender]) {\\n            revert Stark__CannotWithdrawMoreThanSupplied(amount);\\n        }\\n\\n        revertIfHighBorrowing(tokenAddress, msg.sender, amount); // not allows to withdraw if borrowing is already high\\n        s_supplyBalances[tokenAddress][msg.sender] -= amount;\\n        s_totalSupply[tokenAddress] -= amount;\\n        removeSupplierAndUniqueToken(tokenAddress, msg.sender); // removes supplier and his unique token\\n        IERC20(tokenAddress).transfer(msg.sender, amount);\\n        emit TokenWithdrawn(tokenAddress, msg.sender, amount);\\n    }\\n\\n    // * FUNCTION: Users can borrow based on their supplies\\n    function borrow(address tokenAddress, uint256 amount)\\n        external\\n        payable\\n        isTokenAllowed(tokenAddress)\\n        hasSupplied\\n        notZero(amount)\\n        nonReentrant\\n    {\\n        if (s_totalSupply[tokenAddress] <= 0) {\\n            // reverts if we don't have supply of that token\\n            revert Stark__SorryWeCurrentlyDoNotHaveThisToken(tokenAddress);\\n        }\\n\\n        notMoreThanMaxBorrow(tokenAddress, msg.sender, amount); // not allows to borrow if asking more than their max borrow\\n        addBorrower(msg.sender); // adds borrower in s_borrowers array\\n        addUniqueToken(s_borrowerUniqueTokens[msg.sender], tokenAddress);\\n        s_borrowedBalances[tokenAddress][msg.sender] += amount;\\n        s_totalSupply[tokenAddress] -= amount;\\n        IERC20(tokenAddress).transfer(msg.sender, amount);\\n        emit TokenBorrowed(tokenAddress, msg.sender, amount);\\n    }\\n\\n    // * FUNCTION: To repay the loan\\n    function repay(address tokenAddress, uint256 amount)\\n        external\\n        payable\\n        notZero(amount)\\n        nonReentrant\\n    {\\n        bool success = IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount);\\n        if (!success) {\\n            revert Stark__TransactionFailed();\\n        }\\n        isAllowedBalance(tokenAddress, msg.sender, amount);\\n        s_borrowedBalances[tokenAddress][msg.sender] -= amount;\\n        s_totalSupply[tokenAddress] += amount;\\n        removeBorrowerAndUniqueToken(tokenAddress, msg.sender); // removes borrower and his unique token from array\\n        emit TokenRepaid(tokenAddress, msg.sender, amount);\\n    }\\n\\n    function isAllowedBalance(\\n        address tokenAddress,\\n        address userAddress,\\n        uint256 amount\\n    ) private {\\n        if (s_allowedBalances[tokenAddress][userAddress] <= 0) return;\\n        uint256 bitAmount = amount / s_lenders[userAddress].length;\\n        for (uint256 i = 0; i < s_lenders[userAddress].length; i++) {\\n            s_lockedBalances[tokenAddress][s_lenders[userAddress][i]] -= bitAmount;\\n        }\\n    }\\n\\n    // * FUNCTION: For liquidation\\n    function liquidation() external onlyOwner {\\n        for (uint256 i = 0; i < s_borrowers.length; i++) {\\n            if (getTotalBorrowValue(s_borrowers[i]) >= getTotalSupplyValue(s_borrowers[i])) {\\n                // * Checking if total borrow value is equal or greater than total supply value in USD\\n                for (uint256 index = 0; index < s_allowedTokens.length; index++) {\\n                    s_supplyBalances[s_allowedTokens[index]][s_borrowers[i]] = 0;\\n                    s_borrowedBalances[s_allowedTokens[index]][s_borrowers[i]] = 0; // reducing their borrowed balance & supply balance to 0\\n                }\\n            }\\n        }\\n    }\\n\\n    // * FUNCTION: To allow guaranty requests to be sent\\n    function allowGuaranty(address friendAddress) external {\\n        s_guarantys[msg.sender][friendAddress] = true;\\n        emit Guaranteed(msg.sender, friendAddress, true);\\n    }\\n\\n    // * FUNCTION: To disallow guaranty requests to be sent\\n    function disAllowGuaranty(address friendAddress) external {\\n        s_guarantys[msg.sender][friendAddress] = false;\\n        emit Guaranteed(msg.sender, friendAddress, false);\\n    }\\n\\n    // PS: change the name guaranty to something else if you don't like\\n\\n    // function noCollateralBorrow(address friendAddress) external {\\n    //     // use table land to store data of all users who have guaranty\\n    //     // then use query to read data to find if this msg.sender have guantees or if have then\\n    //     // take allower address and borrower address from table and update their balance accordingly\\n    //     hasGuaranty();\\n    // }\\n\\n    // function hasGuaranty() public {\\n    //     // read from database and check if allowed\\n    // }\\n\\n    // * FUNCTION: TO charge APY on borrowings\\n    function chargeAPY() private {\\n        for (uint256 i = 0; i < s_borrowers.length; i++) {\\n            // looping borrowers array\\n            for (\\n                uint256 index = 0;\\n                index < s_borrowerUniqueTokens[s_borrowers[i]].length; // using borrower unique tokens to loop, so we don't need to loop every token\\n                // s_borrowers[i] => current borrower\\n                // s_borrowerUniqueTokens[s_borrowers[i]] => his all unique tokens\\n                index++\\n            ) {\\n                s_borrowedBalances[s_borrowerUniqueTokens[s_borrowers[i]][index]][ // s_borrowedBalances[tokenAddress][userAddress] => thier borrowed balance\\n                    s_borrowers[i]\\n                    // s_borrowerUniqueTokens[s_borrowers[i]] => borrower's all unique tokens\\n                    // s_borrowerUniqueTokens[s_borrowers[i]][index] => tokenAddress (from unique tokens)\\n                ] += (\\n                    (s_borrowedBalances[s_borrowerUniqueTokens[s_borrowers[i]][index]][\\n                        s_borrowers[i]\\n                    ] / uint256(50)) // adding 2 % to their borrowed balance (in s_borrowedBalances)\\n                );\\n            }\\n        }\\n    }\\n\\n    // * FUNCTION: TO reward APY on suppliers\\n    function rewardAPY() private {\\n        for (uint256 i = 0; i < s_suppliers.length; i++) {\\n            // looping suppleirs array\\n            for (\\n                uint256 index = 0;\\n                index < s_supplierUniqueTokens[s_suppliers[i]].length; // using supplier unique tokens to loop, so we don't need to loop every token\\n                // s_suppliers[i] => current supplier\\n                // s_supplierUniqueTokens[s_suppliers[i]] => his all unique tokens\\n                index++\\n            ) {\\n                s_supplyBalances[s_supplierUniqueTokens[s_suppliers[i]][index]][\\n                    s_suppliers[i]\\n                    // s_supplierUniqueTokens[s_suppliers[i]] => supplier's all unique tokens\\n                    // s_supplierUniqueTokens[s_suppliers[i]][index] => tokenAddress (from unique tokens)\\n                ] += (s_supplyBalances[s_supplierUniqueTokens[s_suppliers[i]][index]][\\n                    s_suppliers[i]\\n                ] / uint256(100)); // adding 2 % to their borrowed balance (in s_borrowedBalances)\\n            }\\n        }\\n    }\\n\\n    // * FUNCTION: checkUpkeep function from chainlink keepers\\n    /* returns true if\\n     * have atleast 1 borrower/supplier\\n     * time has passed\\n     */\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        bool hasUsers = (s_borrowers.length > 0) || (s_suppliers.length > 0);\\n        bool isTimePassed = (block.timestamp - s_lastTimeStamp) > i_interval;\\n        upkeepNeeded = (hasUsers && isTimePassed);\\n        return (upkeepNeeded, \\\"0x0\\\");\\n    }\\n\\n    // * FUNCTION: performUpkeep function from chainlink keepers\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n\\n        if (!upkeepNeeded) {\\n            revert Stark__UpKeepNotNeeded();\\n        }\\n\\n        if (s_borrowers.length > 0) {\\n            chargeAPY();\\n        }\\n\\n        if (s_suppliers.length > 0) {\\n            rewardAPY();\\n        }\\n\\n        s_lastTimeStamp = block.timestamp;\\n    }\\n\\n    // * FUNCTION: so people can also take some test tokens\\n    function faucet(address tokenAddress) external {\\n        IERC20(tokenAddress).transfer(msg.sender, 10000 * 10**18);\\n    }\\n\\n    ////////////////////////\\n    // Helper functions ////\\n    ///////////////////////\\n\\n    // * FUNCTION: To not allow to withdraw if borrowing is already high\\n    function revertIfHighBorrowing(\\n        address tokenAddress,\\n        address userAddress,\\n        uint256 amount\\n    ) private view {\\n        uint256 availableAmountValue = (getTotalSupplyValue(userAddress)) -\\n            (((uint256(100) * getTotalBorrowValue(userAddress)) / uint256(80)) +\\n                getTotalLockedValue(userAddress));\\n\\n        (uint256 price, uint256 decimals) = getLatestPrice(tokenAddress);\\n        uint256 askedAmountValue = amount * (price / 10**decimals);\\n\\n        if (askedAmountValue > availableAmountValue) {\\n            revert Stark__NotAllowedBeforeRepayingExistingLoan(amount);\\n        }\\n    }\\n\\n    // * FUNCTION: To not allow to borrow if asking more than their max borrow\\n    function notMoreThanMaxBorrow(\\n        address tokenAddress,\\n        address userAddress,\\n        uint256 amount\\n    ) private view {\\n        uint256 maxBorrow = getMaxBorrow(userAddress); // max borrow in usd\\n        (uint256 price, uint256 decimals) = getLatestPrice(tokenAddress);\\n        uint256 askedAmountValue = amount * (price / 10**decimals);\\n\\n        if (askedAmountValue > maxBorrow) {\\n            revert Stark__CouldNotBorrowMoreThan80PercentOfCollateral();\\n        }\\n    }\\n\\n    // * FUNCTION: To add tokenAddress in their unique token array\\n    // * in its first arg it takes a array so it can be used for borrower & supplier unique token\\n    function addUniqueToken(address[] storage uniqueTokenArray, address tokenAddress) private {\\n        if (uniqueTokenArray.length == 0) {\\n            uniqueTokenArray.push(tokenAddress);\\n        } else {\\n            bool add = true;\\n            for (uint256 i = 0; i < uniqueTokenArray.length; i++) {\\n                if (uniqueTokenArray[i] == tokenAddress) {\\n                    add = false;\\n                }\\n            }\\n            if (add) {\\n                uniqueTokenArray.push(tokenAddress);\\n            }\\n        }\\n    }\\n\\n    // * FUNCTION: To add supplier in s_suppliers array\\n    function addSupplier(address userAddress) private {\\n        if (s_suppliers.length == 0) {\\n            s_suppliers.push(userAddress);\\n        } else {\\n            bool add = true;\\n            for (uint256 i = 0; i < s_suppliers.length; i++) {\\n                if (s_suppliers[i] == userAddress) {\\n                    add = false;\\n                }\\n            }\\n            if (add) {\\n                s_suppliers.push(userAddress);\\n            }\\n        }\\n    }\\n\\n    // * FUNCTION: To add supplier in s_suppliers array\\n    function addBorrower(address userAddress) private {\\n        if (s_borrowers.length == 0) {\\n            s_borrowers.push(userAddress);\\n        } else {\\n            bool add = true;\\n            for (uint256 i = 0; i < s_borrowers.length; i++) {\\n                if (s_borrowers[i] == userAddress) {\\n                    add = false;\\n                }\\n            }\\n            if (add) {\\n                s_borrowers.push(userAddress);\\n            }\\n        }\\n    }\\n\\n    // * FUNCTION: To remove supplier and his unique token\\n    function removeSupplierAndUniqueToken(address tokenAddress, address userAddress) private {\\n        if (s_supplyBalances[tokenAddress][userAddress] <= 0) {\\n            remove(s_supplierUniqueTokens[userAddress], tokenAddress);\\n        }\\n\\n        if (s_supplierUniqueTokens[userAddress].length == 0) {\\n            remove(s_suppliers, userAddress);\\n        }\\n    }\\n\\n    // * FUNCTION: To remove borrower and his unique token from array\\n    function removeBorrowerAndUniqueToken(address tokenAddress, address userAddress) private {\\n        if (s_borrowedBalances[tokenAddress][userAddress] <= 0) {\\n            remove(s_borrowerUniqueTokens[userAddress], tokenAddress);\\n        }\\n        if (s_borrowerUniqueTokens[userAddress].length == 0) {\\n            remove(s_borrowers, userAddress);\\n        }\\n    }\\n\\n    // * FUNCTION: small algorithm for removing element from an array\\n    function remove(address[] storage array, address removingAddress) private {\\n        for (uint256 i = 0; i < array.length; i++) {\\n            if (array[i] == removingAddress) {\\n                array[i] = array[array.length - 1];\\n                array.pop();\\n            }\\n        }\\n    }\\n\\n    ////////////////////////////\\n    ///   getter functions   ///\\n    ////////////////////////////\\n\\n    function getTokenTotalSupply(address tokenAddress) external view returns (uint256) {\\n        return s_totalSupply[tokenAddress];\\n    }\\n\\n    function getAllTokenSupplyInUsd() external view returns (uint256) {\\n        uint256 totalValue = 0;\\n        for (uint256 i = 0; i < s_allowedTokens.length; i++) {\\n            (uint256 price, uint256 decimals) = getLatestPrice(s_allowedTokens[i]);\\n\\n            totalValue += ((price / 10**decimals) * s_totalSupply[s_allowedTokens[i]]);\\n        }\\n        return totalValue;\\n    }\\n\\n    function getSupplyBalance(address tokenAddress, address userAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_supplyBalances[tokenAddress][userAddress];\\n    }\\n\\n    function getLockedBalance(address tokenAddress, address userAddress)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return s_lockedBalances[tokenAddress][userAddress];\\n    }\\n\\n    function getBorrowedBalance(address tokenAddress, address userAddress)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return s_borrowedBalances[tokenAddress][userAddress];\\n    }\\n\\n    function getLatestPrice(address tokenAddress) public view returns (uint256, uint256) {\\n        (, int256 price, , , ) = s_priceFeeds[tokenAddress].latestRoundData();\\n        uint256 decimals = uint256(s_priceFeeds[tokenAddress].decimals());\\n        return (uint256(price), decimals);\\n    }\\n\\n    // * FUNCTION: returns max borrow allowed to a user\\n    function getMaxBorrow(address userAddress) public view returns (uint256) {\\n        uint256 availableAmountValue = (getTotalSupplyValue(userAddress) +\\n            getTotalAllowedValue(userAddress)) -\\n            (((uint256(100) * getTotalBorrowValue(userAddress)) / uint256(80)) +\\n                getTotalLockedValue(userAddress));\\n\\n        if(getTotalAllowedValue(userAddress) > 0) {\\n            return availableAmountValue;\\n        }\\n\\n        return (availableAmountValue * uint256(80)) / uint256(100);\\n    }\\n\\n    function getMaxWithdraw(address tokenAddress, address userAddress)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 availableAmount = s_supplyBalances[tokenAddress][userAddress] -\\n            (((uint256(100) * s_borrowedBalances[tokenAddress][userAddress]) / uint256(80)) +\\n                s_lockedBalances[tokenAddress][userAddress]);\\n\\n        return availableAmount;\\n    }\\n\\n    function getMaxTokenBorrow(address tokenAddress, address userAddress)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 availableAmountValue = (getTotalSupplyValue(userAddress) +\\n            getTotalAllowedValue(userAddress)) -\\n            (((uint256(100) * getTotalBorrowValue(userAddress)) / uint256(80)) +\\n                getTotalLockedValue(userAddress));\\n\\n        (uint256 price, uint256 decimals) = getLatestPrice(tokenAddress);\\n        if(s_allowedBalances[tokenAddress][userAddress] > 0) {\\n            return availableAmountValue / (price / 10**decimals);\\n        }\\n        return ((availableAmountValue / (price / 10**decimals)) * uint256(80)) / uint256(100);\\n    }\\n\\n    function getTotalSupplyAllowedValue(address userAddress) public view returns (uint256) {\\n        return getTotalSupplyValue(userAddress) + getTotalAllowedValue(userAddress);\\n    }\\n\\n    function getTotalSupplyValue(address userAddress) public view returns (uint256) {\\n        uint256 totalValue = 0;\\n        for (uint256 i = 0; i < s_allowedTokens.length; i++) {\\n            (uint256 price, uint256 decimals) = getLatestPrice(s_allowedTokens[i]);\\n\\n            totalValue += ((price / 10**decimals) *\\n                s_supplyBalances[s_allowedTokens[i]][userAddress]);\\n        }\\n        return totalValue;\\n    }\\n\\n    function getTotalLockedValue(address userAddress) public view returns (uint256) {\\n        uint256 totalValue = 0;\\n        for (uint256 i = 0; i < s_allowedTokens.length; i++) {\\n            (uint256 price, uint256 decimals) = getLatestPrice(s_allowedTokens[i]);\\n\\n            totalValue += ((price / 10**decimals) *\\n                s_lockedBalances[s_allowedTokens[i]][userAddress]);\\n        }\\n        return totalValue;\\n    }\\n\\n    function getTotalAllowedValue(address userAddress) public view returns (uint256) {\\n        uint256 totalValue = 0;\\n        for (uint256 i = 0; i < s_allowedTokens.length; i++) {\\n            (uint256 price, uint256 decimals) = getLatestPrice(s_allowedTokens[i]);\\n\\n            totalValue += ((price / 10**decimals) *\\n                s_allowedBalances[s_allowedTokens[i]][userAddress]);\\n        }\\n        return totalValue;\\n    }\\n\\n    function getTotalBorrowValue(address userAddress) public view returns (uint256) {\\n        uint256 totalValue = 0;\\n        for (uint256 i = 0; i < s_allowedTokens.length; i++) {\\n            (uint256 price, uint256 decimals) = getLatestPrice(s_allowedTokens[i]);\\n            totalValue += ((price / 10**decimals) *\\n                s_borrowedBalances[s_allowedTokens[i]][userAddress]);\\n        }\\n        return totalValue;\\n    }\\n\\n    function getAllowedTokens() external view returns (address[] memory) {\\n        return s_allowedTokens;\\n    }\\n\\n    function getSuppliers() external view returns (address[] memory) {\\n        return s_suppliers;\\n    }\\n\\n    function getBorrowers() external view returns (address[] memory) {\\n        return s_borrowers;\\n    }\\n\\n    function getUniqueSupplierTokens(address userAddress)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return s_supplierUniqueTokens[userAddress];\\n    }\\n\\n    function getUniqueBorrowerTokens(address userAddress)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return s_borrowerUniqueTokens[userAddress];\\n    }\\n\\n    function getInterval() external view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    /////////////////////////////\\n    ///   Interface Functions ///\\n    /////////////////////////////\\n\\n    // function setCreditLogicContract(address _starkProtocolAddress) external onlyOwner {\\n    //     starkContract = Istark_protocol(_starkProtocolAddress);\\n    //     starkProtocolAddress = _starkProtocolAddress;\\n    // }\\n\\n    // * FUNCTION: To Lock the Balance of the lender\\n\\n    mapping(address => mapping(address => uint256)) s_allowedBalances;\\n    mapping(address => address[]) s_lenders;\\n\\n    function lockBalanceChanges(\\n        address _tokenAddress,\\n        address _lender,\\n        address _borrower,\\n        uint256 _tokenAmount\\n    ) public onlyAllowedContracts(msg.sender) {\\n        s_lockedBalances[_tokenAddress][_lender] += _tokenAmount;\\n        s_allowedBalances[_tokenAddress][_borrower] += _tokenAmount;\\n        s_lenders[_borrower].push(_lender);\\n\\n        // emit Event to Lender that his funds are locked\\n\\n        // requestChange_LendBalance(_tokenAddress, _borrower, _tokenAmount);\\n    }\\n\\n    // * FUNCTION: To transfer the funds to the Borrower Balance\\n    // function requestChange_LendBalance(\\n    //     address _tokenAddress,\\n    //     address _borrower,\\n    //     uint256 _tokenAmount\\n    // ) internal {\\n    //     s_supplyBalances[_tokenAddress][_borrower] += _tokenAmount;\\n\\n    //     s_totalSupply[_tokenAddress] -= _tokenAmount;\\n\\n    //     // emit Event to Borrower that he received the funds\\n    // }\\n\\n    // * FUNCTION: Deployer will add the guaranty contract in the List.\\n    function addAllowContracts(address _contractAddress)\\n        external\\n        onlyAllowedContracts(msg.sender)\\n    {\\n        s_allowedContracts.push(_contractAddress);\\n        // emit Event (optional)\\n    }\\n\\n    // function repayChanges(\\n    //     address _tokenAddress,\\n    //     address _lender,\\n    //     address _borrower,\\n    //     uint256 _tokenAmount\\n    // ) external onlyAllowedContracts(msg.sender) {\\n    //     s_borrowedBalances[_tokenAddress][_borrower] -= _tokenAmount;\\n    //     s_totalSupply[_tokenAddress] += _tokenAmount;\\n    //     s_lockedBalances[_tokenAddress][_lender] -= _tokenAmount;\\n    // }\\n}\\n\",\"keccak256\":\"0x88520fced6516c94612c1660b3da4fb53c3f062742a999000b4c8cc51ae04e86\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200619d3803806200619d833981810160405281019062000037919062000574565b60016000819055506200005f62000053620001cf60201b60201c565b620001d760201b60201c565b8260039080519060200190620000779291906200029d565b5060005b835181101562000153578281815181106200009b576200009a6200060e565b5b6020026020010151600c6000868481518110620000bd57620000bc6200060e565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080806200014a906200066c565b9150506200007b565b508060808181525050426007819055506006339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620006b9565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b82805482825590600052602060002090810192821562000319579160200282015b82811115620003185782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190620002be565b5b5090506200032891906200032c565b5090565b5b80821115620003475760008160009055506001016200032d565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620003af8262000364565b810181811067ffffffffffffffff82111715620003d157620003d062000375565b5b80604052505050565b6000620003e66200034b565b9050620003f48282620003a4565b919050565b600067ffffffffffffffff82111562000417576200041662000375565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200045a826200042d565b9050919050565b6200046c816200044d565b81146200047857600080fd5b50565b6000815190506200048c8162000461565b92915050565b6000620004a9620004a384620003f9565b620003da565b90508083825260208201905060208402830185811115620004cf57620004ce62000428565b5b835b81811015620004fc5780620004e788826200047b565b845260208401935050602081019050620004d1565b5050509392505050565b600082601f8301126200051e576200051d6200035f565b5b81516200053084826020860162000492565b91505092915050565b6000819050919050565b6200054e8162000539565b81146200055a57600080fd5b50565b6000815190506200056e8162000543565b92915050565b60008060006060848603121562000590576200058f62000355565b5b600084015167ffffffffffffffff811115620005b157620005b06200035a565b5b620005bf8682870162000506565b935050602084015167ffffffffffffffff811115620005e357620005e26200035a565b5b620005f18682870162000506565b925050604062000604868287016200055d565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620006798262000539565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203620006ae57620006ad6200063d565b5b600182019050919050565b608051615ac1620006dc6000396000818161199f0152611a5f0152615ac16000f3fe6080604052600436106102045760003560e01c8063b3b6a29611610118578063e6b98eba116100a0578063f2fde38b1161006f578063f2fde38b146107b0578063f3fef3a3146107d9578063f73a25af146107f5578063fd1c317a14610820578063ffd70a271461085d57610204565b8063e6b98eba14610717578063eb4e51e014610740578063f2b9fdb81461077d578063f2dfbf661461079957610204565b8063bcbc3e1b116100e7578063bcbc3e1b146105fa578063c736887e14610623578063cbbc251214610660578063d0c3fd211461069d578063e1d41263146106da57610204565b8063b3b6a2961461051a578063b6a6df6e14610557578063b86d1d6314610594578063ba377731146105bd57610204565b80635d7021521161019b5780638da5cb5b1161016a5780638da5cb5b1461042157806391ad27b41461044c578063a9cbf35614610477578063aed00420146104b4578063b37bdb05146104dd57610204565b80635d702152146103785780636854786a146103a15780636e04ff0d146103cc578063715018a61461040a57610204565b80632c4fe48d116101d75780632c4fe48d146102cb57806343516832146103085780634585e33b146103335780634b8a35291461035c57610204565b8063024ece891461020957806316345f18146102345780631a1a919e1461027257806322867d78146102af575b600080fd5b34801561021557600080fd5b5061021e61089a565b60405161022b9190614d40565b60405180910390f35b34801561024057600080fd5b5061025b60048036038101906102569190614da2565b610928565b604051610269929190614de8565b60405180910390f35b34801561027e57600080fd5b5061029960048036038101906102949190614da2565b610ae3565b6040516102a69190614e11565b60405180910390f35b6102c960048036038101906102c49190614e58565b610c51565b005b3480156102d757600080fd5b506102f260048036038101906102ed9190614da2565b610f06565b6040516102ff9190614e11565b60405180910390f35b34801561031457600080fd5b5061031d611074565b60405161032a9190614d40565b60405180910390f35b34801561033f57600080fd5b5061035a60048036038101906103559190614efd565b611102565b005b61037660048036038101906103719190614e58565b611190565b005b34801561038457600080fd5b5061039f600480360381019061039a9190614da2565b6117a5565b005b3480156103ad57600080fd5b506103b66118ed565b6040516103c39190614d40565b60405180910390f35b3480156103d857600080fd5b506103f360048036038101906103ee919061508b565b61197b565b604051610401929190615177565b60405180910390f35b34801561041657600080fd5b5061041f611a1d565b005b34801561042d57600080fd5b50610436611a31565b60405161044391906151b6565b60405180910390f35b34801561045857600080fd5b50610461611a5b565b60405161046e9190614e11565b60405180910390f35b34801561048357600080fd5b5061049e600480360381019061049991906151d1565b611a83565b6040516104ab9190614e11565b60405180910390f35b3480156104c057600080fd5b506104db60048036038101906104d69190614da2565b611b0a565b005b3480156104e957600080fd5b5061050460048036038101906104ff9190614da2565b611c00565b6040516105119190614e11565b60405180910390f35b34801561052657600080fd5b50610541600480360381019061053c91906151d1565b611c49565b60405161054e9190614e11565b60405180910390f35b34801561056357600080fd5b5061057e60048036038101906105799190614da2565b611dfb565b60405161058b9190614d40565b60405180910390f35b3480156105a057600080fd5b506105bb60048036038101906105b69190614da2565b611ec8565b005b3480156105c957600080fd5b506105e460048036038101906105df91906151d1565b611f54565b6040516105f19190614e11565b60405180910390f35b34801561060657600080fd5b50610621600480360381019061061c9190615211565b611fdb565b005b34801561062f57600080fd5b5061064a600480360381019061064591906151d1565b612289565b6040516106579190614e11565b60405180910390f35b34801561066c57600080fd5b5061068760048036038101906106829190614da2565b612310565b6040516106949190614e11565b60405180910390f35b3480156106a957600080fd5b506106c460048036038101906106bf9190614da2565b612335565b6040516106d19190614d40565b60405180910390f35b3480156106e657600080fd5b5061070160048036038101906106fc91906151d1565b612402565b60405161070e9190614e11565b60405180910390f35b34801561072357600080fd5b5061073e60048036038101906107399190614da2565b61256a565b005b34801561074c57600080fd5b5061076760048036038101906107629190614da2565b612660565b6040516107749190614e11565b60405180910390f35b61079760048036038101906107929190614e58565b6127ce565b005b3480156107a557600080fd5b506107ae612ba3565b005b3480156107bc57600080fd5b506107d760048036038101906107d29190614da2565b612e85565b005b6107f360048036038101906107ee9190614e58565b612f08565b005b34801561080157600080fd5b5061080a61342f565b6040516108179190614e11565b60405180910390f35b34801561082c57600080fd5b5061084760048036038101906108429190614da2565b61355e565b6040516108549190614e11565b60405180910390f35b34801561086957600080fd5b50610884600480360381019061087f9190614da2565b6135f9565b6040516108919190614e11565b60405180910390f35b6060600380548060200260200160405190810160405280929190818152602001828054801561091e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116108d4575b5050505050905090565b6000806000600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156109d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fb9190615305565b5050509150506000600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad191906153b9565b60ff1690508181935093505050915091565b6000806000905060005b600380549050811015610c4757600080610b4460038481548110610b1457610b136153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610928565b915091506010600060038581548110610b6057610b5f6153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600a610c109190615577565b83610c1b91906155f1565b610c259190615622565b84610c30919061567c565b935050508080610c3f906156d2565b915050610aed565b5080915050919050565b8060008111610c9757806040517f405ec990000000000000000000000000000000000000000000000000000000008152600401610c8e9190614e11565b60405180910390fd5b600260005403610cdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd390615777565b60405180910390fd5b600260008190555060008373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610d2393929190615797565b6020604051808303816000875af1158015610d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6691906157fa565b905080610d9f576040517f01d2e34800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610daa843385613767565b82600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e369190615827565b9250508190555082600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e8c919061567c565b92505081905550610e9d84336139b4565b823373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f8e145174de64a4cd1938d6ef99ed04a7e3084ac57eddbf3c9350dce192a8189160405160405180910390a4506001600081905550505050565b6000806000905060005b60038054905081101561106a57600080610f6760038481548110610f3757610f366153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610928565b915091506009600060038581548110610f8357610f826153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600a6110339190615577565b8361103e91906155f1565b6110489190615622565b84611053919061567c565b935050508080611062906156d2565b915050610f10565b5080915050919050565b606060048054806020026020016040519081016040528092919081815260200182805480156110f857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116110ae575b5050505050905090565b600061111c6040518060200160405280600081525061197b565b50905080611156576040517fd20f01c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600580549050111561116d5761116c613adb565b5b6000600480549050111561118457611183613ea9565b5b42600781905550505050565b81600080600090505b60038054905081101561122f578273ffffffffffffffffffffffffffffffffffffffff16600382815481106111d1576111d06153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361121c57600191505b8080611227906156d2565b915050611199565b508061127257816040517f8723d71200000000000000000000000000000000000000000000000000000000815260040161126991906151b6565b60405180910390fd5b600080600090505b60038054905081101561142757600060096000600384815481106112a1576112a06153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054118061140a575060006010600060038481548110611365576113646153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b1561141457600191505b808061141f906156d2565b91505061127a565b508061145f576040517ff418fde300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83600081116114a557806040517f405ec99000000000000000000000000000000000000000000000000000000000815260040161149c9190614e11565b60405180910390fd5b6002600054036114ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e190615777565b60405180910390fd5b60026000819055506000600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161157657856040517f79867f5e00000000000000000000000000000000000000000000000000000000815260040161156d91906151b6565b60405180910390fd5b611581863387614277565b61158a336142fe565b6115d2600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002087614482565b84600a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461165e919061567c565b9250508190555084600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116b49190615827565b925050819055508573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33876040518363ffffffff1660e01b81526004016116f692919061585b565b6020604051808303816000875af1158015611715573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173991906157fa565b50843373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fbac7ef7476b8ca23cee38d6cd192ffe52e03ef25c633ca23765fdda1dde653c660405160405180910390a46001600081905550505050505050565b33600080600090505b600680549050811015611844578273ffffffffffffffffffffffffffffffffffffffff16600682815481106117e6576117e56153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361183157600191505b808061183c906156d2565b9150506117ae565b5080611885576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187c906158d0565b60405180910390fd5b6006839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6060600580548060200260200160405190810160405280929190818152602001828054801561197157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611927575b5050505050905090565b60006060600080600580549050118061199957506000600480549050115b905060007f0000000000000000000000000000000000000000000000000000000000000000600754426119cc9190615827565b1190508180156119d95750805b9350836040518060400160405280600381526020017f3078300000000000000000000000000000000000000000000000000000000000815250935093505050915091565b611a25614602565b611a2f6000614680565b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600015158173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd606a3476368846f06df0791eef492ec0f2be479134cc7bfac8a9fdc8e83c3a560405160405180910390a450565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546050600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546064611d549190615622565b611d5e91906155f1565b611d68919061567c565b600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611def9190615827565b90508091505092915050565b6060600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611ebc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611e72575b50505050509050919050565b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb3369021e19e0c9bab24000006040518363ffffffff1660e01b8152600401611f0d929190615935565b6020604051808303816000875af1158015611f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5091906157fa565b5050565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b33600080600090505b60068054905081101561207a578273ffffffffffffffffffffffffffffffffffffffff166006828154811061201c5761201b6153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361206757600191505b8080612072906156d2565b915050611fe4565b50806120bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120b2906158d0565b60405180910390fd5b82600b60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612147919061567c565b9250508190555082601060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121da919061567c565b92505081905550601160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020859080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050565b6000600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600061231b82610ae3565b61232483610f06565b61232e919061567c565b9050919050565b6060600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156123f657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116123ac575b50505050509050919050565b60008061240e836135f9565b605061241985612660565b60646124259190615622565b61242f91906155f1565b612439919061567c565b61244284610ae3565b61244b85610f06565b612455919061567c565b61245f9190615827565b905060008061246d86610928565b915091506000601060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411156125235780600a6125039190615577565b8261250e91906155f1565b8361251991906155f1565b9350505050612564565b6064605082600a6125349190615577565b8461253f91906155f1565b8561254a91906155f1565b6125549190615622565b61255e91906155f1565b93505050505b92915050565b6001600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600115158173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd606a3476368846f06df0791eef492ec0f2be479134cc7bfac8a9fdc8e83c3a560405160405180910390a450565b6000806000905060005b6003805490508110156127c4576000806126c160038481548110612691576126906153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610928565b91509150600a6000600385815481106126dd576126dc6153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600a61278d9190615577565b8361279891906155f1565b6127a29190615622565b846127ad919061567c565b9350505080806127bc906156d2565b91505061266a565b5080915050919050565b81600080600090505b60038054905081101561286d578273ffffffffffffffffffffffffffffffffffffffff166003828154811061280f5761280e6153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361285a57600191505b8080612865906156d2565b9150506127d7565b50806128b057816040517f8723d7120000000000000000000000000000000000000000000000000000000081526004016128a791906151b6565b60405180910390fd5b82600081116128f657806040517f405ec9900000000000000000000000000000000000000000000000000000000081526004016128ed9190614e11565b60405180910390fd5b60026000540361293b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293290615777565b60405180910390fd5b600260008190555060008573ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b815260040161298293929190615797565b6020604051808303816000875af11580156129a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129c591906157fa565b9050806129fe576040517f01d2e34800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a4d919061567c565b9250508190555084600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612ae0919061567c565b92505081905550612af033614746565b612b38600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002087614482565b843373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f5df8b54f38216384ee108b037a3a0e3b7d678f14f3e251d3604ce82b6e1e972560405160405180910390a45060016000819055505050505050565b612bab614602565b60005b600580549050811015612e8257612c0260058281548110612bd257612bd16153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610f06565b612c4960058381548110612c1957612c186153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612660565b10612e6f5760005b600380549050811015612e6d5760006009600060038481548110612c7857612c776153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060058581548110612cf357612cf26153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600a600060038481548110612d7657612d756153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060058581548110612df157612df06153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508080612e65906156d2565b915050612c51565b505b8080612e7a906156d2565b915050612bae565b50565b612e8d614602565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612efc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ef3906159d0565b60405180910390fd5b612f0581614680565b50565b600080600090505b6003805490508110156130bd5760006009600060038481548110612f3757612f366153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411806130a0575060006010600060038481548110612ffb57612ffa6153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b156130aa57600191505b80806130b5906156d2565b915050612f10565b50806130f5576040517ff418fde300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816000811161313b57806040517f405ec9900000000000000000000000000000000000000000000000000000000081526004016131329190614e11565b60405180910390fd5b600260005403613180576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161317790615777565b60405180910390fd5b6002600081905550600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111561324957826040517f91edbd090000000000000000000000000000000000000000000000000000000081526004016132409190614e11565b60405180910390fd5b6132548433856148ca565b82600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546132e09190615827565b9250508190555082600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546133369190615827565b92505081905550613347843361499a565b8373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b815260040161338292919061585b565b6020604051808303816000875af11580156133a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133c591906157fa565b50823373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f8210728e7c071f615b840ee026032693858fbcd5e5359e67e438c890f59e562060405160405180910390a4600160008190555050505050565b6000806000905060005b60038054905081101561355657600080613490600384815481106134605761345f6153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610928565b9150915060086000600385815481106134ac576134ab6153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600a61351f9190615577565b8361352a91906155f1565b6135349190615622565b8461353f919061567c565b93505050808061354e906156d2565b915050613439565b508091505090565b60008061356a836135f9565b605061357585612660565b60646135819190615622565b61358b91906155f1565b613595919061567c565b61359e84610ae3565b6135a785610f06565b6135b1919061567c565b6135bb9190615827565b905060006135c884610ae3565b11156135d757809150506135f4565b60646050826135e69190615622565b6135f091906155f1565b9150505b919050565b6000806000905060005b60038054905081101561375d5760008061365a6003848154811061362a576136296153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610928565b91509150600b600060038581548110613676576136756153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600a6137269190615577565b8361373191906155f1565b61373b9190615622565b84613746919061567c565b935050508080613755906156d2565b915050613603565b5080915050919050565b6000601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411156139af576000601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508261383c91906155f1565b905060005b601160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156139ac5781600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000601160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020848154811061391e5761391d6153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546139929190615827565b9250508190555080806139a4906156d2565b915050613841565b50505b505050565b6000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411613a8157613a80600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083614ac1565b5b6000600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905003613ad757613ad6600582614ac1565b5b5050565b60005b600580549050811015613ea65760005b600e600060058481548110613b0657613b056153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015613e92576032600a6000600e600060058781548110613b9457613b936153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110613c0b57613c0a6153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060058581548110613c8657613c856153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613cf691906155f1565b600a6000600e600060058781548110613d1257613d116153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110613d8957613d886153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060058581548110613e0457613e036153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613e78919061567c565b925050819055508080613e8a906156d2565b915050613aee565b508080613e9e906156d2565b915050613ade565b50565b60005b6004805490508110156142745760005b600d600060048481548110613ed457613ed36153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905081101561426057606460096000600d600060048781548110613f6257613f616153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110613fd957613fd86153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060048581548110614054576140536153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546140c491906155f1565b60096000600d6000600487815481106140e0576140df6153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110614157576141566153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600485815481106141d2576141d16153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254614246919061567c565b925050819055508080614258906156d2565b915050613ebc565b50808061426c906156d2565b915050613eac565b50565b60006142828361355e565b905060008061429086610928565b91509150600081600a6142a39190615577565b836142ae91906155f1565b856142b99190615622565b9050838111156142f5576040517f47820a6500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050565b600060058054905003614373576005819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061447f565b60006001905060005b600580549050811015614412578273ffffffffffffffffffffffffffffffffffffffff16600582815481106143b4576143b36153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036143ff57600091505b808061440a906156d2565b91505061437c565b50801561447d576005829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505b50565b60008280549050036144f55781819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506145fe565b60006001905060005b8380549050811015614592578273ffffffffffffffffffffffffffffffffffffffff16848281548110614534576145336153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361457f57600091505b808061458a906156d2565b9150506144fe565b5080156145fc5782829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505b5050565b61460a614c48565b73ffffffffffffffffffffffffffffffffffffffff16614628611a31565b73ffffffffffffffffffffffffffffffffffffffff161461467e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161467590615a3c565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600480549050036147bb576004819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506148c7565b60006001905060005b60048054905081101561485a578273ffffffffffffffffffffffffffffffffffffffff16600482815481106147fc576147fb6153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361484757600091505b8080614852906156d2565b9150506147c4565b5080156148c5576004829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505b50565b60006148d5836135f9565b60506148e085612660565b60646148ec9190615622565b6148f691906155f1565b614900919061567c565b61490984610f06565b6149139190615827565b905060008061492186610928565b91509150600081600a6149349190615577565b8361493f91906155f1565b8561494a9190615622565b90508381111561499157846040517f15e5f1b60000000000000000000000000000000000000000000000000000000081526004016149889190614e11565b60405180910390fd5b50505050505050565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411614a6757614a66600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083614ac1565b5b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905003614abd57614abc600482614ac1565b5b5050565b60005b8280549050811015614c43578173ffffffffffffffffffffffffffffffffffffffff16838281548110614afa57614af96153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603614c30578260018480549050614b529190615827565b81548110614b6357614b626153e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838281548110614ba157614ba06153e6565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082805480614bfa57614bf9615a5c565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b8080614c3b906156d2565b915050614ac4565b505050565b600033905090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000614ca782614c7c565b9050919050565b614cb781614c9c565b82525050565b6000614cc98383614cae565b60208301905092915050565b6000602082019050919050565b6000614ced82614c50565b614cf78185614c5b565b9350614d0283614c6c565b8060005b83811015614d33578151614d1a8882614cbd565b9750614d2583614cd5565b925050600181019050614d06565b5085935050505092915050565b60006020820190508181036000830152614d5a8184614ce2565b905092915050565b6000604051905090565b600080fd5b600080fd5b614d7f81614c9c565b8114614d8a57600080fd5b50565b600081359050614d9c81614d76565b92915050565b600060208284031215614db857614db7614d6c565b5b6000614dc684828501614d8d565b91505092915050565b6000819050919050565b614de281614dcf565b82525050565b6000604082019050614dfd6000830185614dd9565b614e0a6020830184614dd9565b9392505050565b6000602082019050614e266000830184614dd9565b92915050565b614e3581614dcf565b8114614e4057600080fd5b50565b600081359050614e5281614e2c565b92915050565b60008060408385031215614e6f57614e6e614d6c565b5b6000614e7d85828601614d8d565b9250506020614e8e85828601614e43565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f840112614ebd57614ebc614e98565b5b8235905067ffffffffffffffff811115614eda57614ed9614e9d565b5b602083019150836001820283011115614ef657614ef5614ea2565b5b9250929050565b60008060208385031215614f1457614f13614d6c565b5b600083013567ffffffffffffffff811115614f3257614f31614d71565b5b614f3e85828601614ea7565b92509250509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b614f9882614f4f565b810181811067ffffffffffffffff82111715614fb757614fb6614f60565b5b80604052505050565b6000614fca614d62565b9050614fd68282614f8f565b919050565b600067ffffffffffffffff821115614ff657614ff5614f60565b5b614fff82614f4f565b9050602081019050919050565b82818337600083830152505050565b600061502e61502984614fdb565b614fc0565b90508281526020810184848401111561504a57615049614f4a565b5b61505584828561500c565b509392505050565b600082601f83011261507257615071614e98565b5b813561508284826020860161501b565b91505092915050565b6000602082840312156150a1576150a0614d6c565b5b600082013567ffffffffffffffff8111156150bf576150be614d71565b5b6150cb8482850161505d565b91505092915050565b60008115159050919050565b6150e9816150d4565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561512957808201518184015260208101905061510e565b83811115615138576000848401525b50505050565b6000615149826150ef565b61515381856150fa565b935061516381856020860161510b565b61516c81614f4f565b840191505092915050565b600060408201905061518c60008301856150e0565b818103602083015261519e818461513e565b90509392505050565b6151b081614c9c565b82525050565b60006020820190506151cb60008301846151a7565b92915050565b600080604083850312156151e8576151e7614d6c565b5b60006151f685828601614d8d565b925050602061520785828601614d8d565b9150509250929050565b6000806000806080858703121561522b5761522a614d6c565b5b600061523987828801614d8d565b945050602061524a87828801614d8d565b935050604061525b87828801614d8d565b925050606061526c87828801614e43565b91505092959194509250565b600069ffffffffffffffffffff82169050919050565b61529781615278565b81146152a257600080fd5b50565b6000815190506152b48161528e565b92915050565b6000819050919050565b6152cd816152ba565b81146152d857600080fd5b50565b6000815190506152ea816152c4565b92915050565b6000815190506152ff81614e2c565b92915050565b600080600080600060a0868803121561532157615320614d6c565b5b600061532f888289016152a5565b9550506020615340888289016152db565b9450506040615351888289016152f0565b9350506060615362888289016152f0565b9250506080615373888289016152a5565b9150509295509295909350565b600060ff82169050919050565b61539681615380565b81146153a157600080fd5b50565b6000815190506153b38161538d565b92915050565b6000602082840312156153cf576153ce614d6c565b5b60006153dd848285016153a4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b600185111561549b5780860481111561547757615476615415565b5b60018516156154865780820291505b808102905061549485615444565b945061545b565b94509492505050565b6000826154b45760019050615570565b816154c25760009050615570565b81600181146154d857600281146154e257615511565b6001915050615570565b60ff8411156154f4576154f3615415565b5b8360020a91508482111561550b5761550a615415565b5b50615570565b5060208310610133831016604e8410600b84101617156155465782820a90508381111561554157615540615415565b5b615570565b6155538484846001615451565b9250905081840481111561556a57615569615415565b5b81810290505b9392505050565b600061558282614dcf565b915061558d83614dcf565b92506155ba7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846154a4565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006155fc82614dcf565b915061560783614dcf565b925082615617576156166155c2565b5b828204905092915050565b600061562d82614dcf565b915061563883614dcf565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561567157615670615415565b5b828202905092915050565b600061568782614dcf565b915061569283614dcf565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156156c7576156c6615415565b5b828201905092915050565b60006156dd82614dcf565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361570f5761570e615415565b5b600182019050919050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000615761601f8361571a565b915061576c8261572b565b602082019050919050565b6000602082019050818103600083015261579081615754565b9050919050565b60006060820190506157ac60008301866151a7565b6157b960208301856151a7565b6157c66040830184614dd9565b949350505050565b6157d7816150d4565b81146157e257600080fd5b50565b6000815190506157f4816157ce565b92915050565b6000602082840312156158105761580f614d6c565b5b600061581e848285016157e5565b91505092915050565b600061583282614dcf565b915061583d83614dcf565b9250828210156158505761584f615415565b5b828203905092915050565b600060408201905061587060008301856151a7565b61587d6020830184614dd9565b9392505050565b7f6e6f74206f6e6c79416c6c6f776564436f6e7472616374730000000000000000600082015250565b60006158ba60188361571a565b91506158c582615884565b602082019050919050565b600060208201905081810360008301526158e9816158ad565b9050919050565b6000819050919050565b6000819050919050565b600061591f61591a615915846158f0565b6158fa565b614dcf565b9050919050565b61592f81615904565b82525050565b600060408201905061594a60008301856151a7565b6159576020830184615926565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006159ba60268361571a565b91506159c58261595e565b604082019050919050565b600060208201905081810360008301526159e9816159ad565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000615a2660208361571a565b9150615a31826159f0565b602082019050919050565b60006020820190508181036000830152615a5581615a19565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212207c62aad7e0cadcd6e3a0be7c9784273d54e389282e2739f8a43338659ad9e57e64736f6c634300080f0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Main  Functions   ///"
      },
      "getTokenTotalSupply(address)": {
        "notice": "getter functions   ///"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 227,
        "contract": "contracts/Stark.sol:Stark",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 111,
        "contract": "contracts/Stark.sol:Stark",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 400,
        "contract": "contracts/Stark.sol:Stark",
        "label": "deployer",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 403,
        "contract": "contracts/Stark.sol:Stark",
        "label": "s_allowedTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 406,
        "contract": "contracts/Stark.sol:Stark",
        "label": "s_suppliers",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 409,
        "contract": "contracts/Stark.sol:Stark",
        "label": "s_borrowers",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 412,
        "contract": "contracts/Stark.sol:Stark",
        "label": "s_allowedContracts",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 416,
        "contract": "contracts/Stark.sol:Stark",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 460,
        "contract": "contracts/Stark.sol:Stark",
        "label": "s_totalSupply",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 466,
        "contract": "contracts/Stark.sol:Stark",
        "label": "s_supplyBalances",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 472,
        "contract": "contracts/Stark.sol:Stark",
        "label": "s_borrowedBalances",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 478,
        "contract": "contracts/Stark.sol:Stark",
        "label": "s_lockedBalances",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 483,
        "contract": "contracts/Stark.sol:Stark",
        "label": "s_priceFeeds",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_contract(AggregatorV3Interface)84)"
      },
      {
        "astId": 488,
        "contract": "contracts/Stark.sol:Stark",
        "label": "s_supplierUniqueTokens",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 493,
        "contract": "contracts/Stark.sol:Stark",
        "label": "s_borrowerUniqueTokens",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 499,
        "contract": "contracts/Stark.sol:Stark",
        "label": "s_guarantys",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2462,
        "contract": "contracts/Stark.sol:Stark",
        "label": "s_allowedBalances",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2467,
        "contract": "contracts/Stark.sol:Stark",
        "label": "s_lenders",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)84": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_contract(AggregatorV3Interface)84)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract AggregatorV3Interface)",
        "numberOfBytes": "32",
        "value": "t_contract(AggregatorV3Interface)84"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}