{
  "address": "0xDE6E0961391a9F874608bc452aFA759064AFd844",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "allowedTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "priceFeeds",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "updateInterval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stark__CannotWithdrawMoreThanSupplied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Stark__CouldNotBorrowMoreThan80PercentOfCollateral",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stark__NeedMoreThanZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stark__NotAllowedBeforeRepayingExistingLoan",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Stark__NotSupplied",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "Stark__SorryWeCurrentlyDoNotHaveThisToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "Stark__ThisTokenIsNotAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Stark__TransactionFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Stark__UpKeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "friendAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "reponse",
          "type": "bool"
        }
      ],
      "name": "Guaranteed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenBorrowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenRepaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenSupplied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenWithdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        }
      ],
      "name": "addAllowContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "friendAddress",
          "type": "address"
        }
      ],
      "name": "allowGuaranty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "friendAddress",
          "type": "address"
        }
      ],
      "name": "disAllowGuaranty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "faucet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTokenSupplyInUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllowedTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getBorrowedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBorrowers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getLockedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getMaxBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getMaxTokenBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getMaxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSuppliers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getSupplyBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getTokenTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getTotalAllowedValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getTotalBorrowValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getTotalLockedValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getTotalSupplyValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUniqueBorrowerTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUniqueSupplierTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "lockBalanceChanges",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "repayChanges",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "supply",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x514259722ce83b043243b1b1fc04cb0a960e1848058b7f46019e09932cde5716",
  "receipt": {
    "to": null,
    "from": "0xC3A3362DC30588a027767063459dC533Dc4A421a",
    "contractAddress": "0xDE6E0961391a9F874608bc452aFA759064AFd844",
    "transactionIndex": 4,
    "gasUsed": "5360366",
    "logsBloom": "0x
    "blockHash": "0xd8ea29202a19b9ec920ffaa824eabbf343f89df851bab513cca1fb5b832ef4ee",
    "transactionHash": "0x514259722ce83b043243b1b1fc04cb0a960e1848058b7f46019e09932cde5716",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 27298585,
        "transactionHash": "0x514259722ce83b043243b1b1fc04cb0a960e1848058b7f46019e09932cde5716",
        "address": "0xDE6E0961391a9F874608bc452aFA759064AFd844",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c3a3362dc30588a027767063459dc533dc4a421a"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0xd8ea29202a19b9ec920ffaa824eabbf343f89df851bab513cca1fb5b832ef4ee"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 27298585,
        "transactionHash": "0x514259722ce83b043243b1b1fc04cb0a960e1848058b7f46019e09932cde5716",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c3a3362dc30588a027767063459dc533dc4a421a",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000025d6fb7514c4cac000000000000000000000000000000000000000000000000173739e5df09f1e500000000000000000000000000000000000000000000201813f6f4e3a949548100000000000000000000000000000000000000000000000014d9ca2e8dbda5390000000000000000000000000000000000000000000020181654649afa95a12d",
        "logIndex": 10,
        "blockHash": "0xd8ea29202a19b9ec920ffaa824eabbf343f89df851bab513cca1fb5b832ef4ee"
      }
    ],
    "blockNumber": 27298585,
    "cumulativeGasUsed": "6016088",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0xe83b16E5EDEd23f7e8276930D26D376d0b05b915",
      "0xc113cb45987F301081edc7A4ce0376525F573Aab",
      "0x6FFD350f9C705d58586Da02be32623D040f8976E",
      "0x74758d04BCE3Aee82e88335BB3212010Eb0B91A3",
      "0xD41D929D5eAa0aF3e89679950640bA6abB8e589b"
    ],
    [
      "0x007A22900a3B98143368Bd5906f8E17e9867581b",
      "0x0715A7794a1dc8e42615F059dD6e406A6594651A",
      "0x0FCAa9c899EC5A91eBc3D5Dd869De833b06fB046",
      "0x572dDec9087154dC5dfBB1546Bb62713147e0Ab0",
      "0x0FCAa9c899EC5A91eBc3D5Dd869De833b06fB046"
    ],
    "30"
  ],
  "numDeployments": 3,
  "solcInputHash": "43cf2b84bb6592ae61d8ccccf360dab7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"allowedTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"priceFeeds\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"updateInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stark__CannotWithdrawMoreThanSupplied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Stark__CouldNotBorrowMoreThan80PercentOfCollateral\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stark__NeedMoreThanZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stark__NotAllowedBeforeRepayingExistingLoan\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Stark__NotSupplied\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"Stark__SorryWeCurrentlyDoNotHaveThisToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"Stark__ThisTokenIsNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Stark__TransactionFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Stark__UpKeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"friendAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"reponse\",\"type\":\"bool\"}],\"name\":\"Guaranteed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenBorrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenSupplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"addAllowContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"friendAddress\",\"type\":\"address\"}],\"name\":\"allowGuaranty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"friendAddress\",\"type\":\"address\"}],\"name\":\"disAllowGuaranty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"faucet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokenSupplyInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getBorrowedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getMaxBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getMaxTokenBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getMaxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSuppliers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getSupplyBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getTotalAllowedValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getTotalBorrowValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getTotalLockedValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getTotalSupplyValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUniqueBorrowerTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUniqueSupplierTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"lockBalanceChanges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"repayChanges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Main  Functions   ///\"},\"getTokenTotalSupply(address)\":{\"notice\":\"getter functions   ///\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Stark.sol\":\"Stark\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/KeeperBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract KeeperBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5dc972fdf3a524312e68ef6d2e58bcdaf965d08d9415aefa289207350c2bc85a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./KeeperBase.sol\\\";\\nimport \\\"./interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\\n\",\"keccak256\":\"0xfdb84fea1ee213662ae66b95d4f620be73b7af5ede58be3d330b222b9b566d95\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Stark.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror Stark__NeedMoreThanZero(uint256 amount);\\nerror Stark__NotSupplied();\\nerror Stark__CannotWithdrawMoreThanSupplied(uint256 amount);\\nerror Stark__CouldNotBorrowMoreThan80PercentOfCollateral();\\nerror Stark__ThisTokenIsNotAvailable(address tokenAddress);\\nerror Stark__NotAllowedBeforeRepayingExistingLoan(uint256 amount);\\nerror Stark__TransactionFailed();\\nerror Stark__SorryWeCurrentlyDoNotHaveThisToken(address tokenAddress);\\nerror Stark__UpKeepNotNeeded();\\n\\ncontract Stark is ReentrancyGuard, KeeperCompatibleInterface, Ownable {\\n    address private deployer;\\n    address[] private s_allowedTokens; // * Array of allowed tokens\\n    address[] private s_suppliers; // * Array of all suppliers\\n    address[] private s_borrowers; // * Array of all borrowers\\n    address[] private s_allowedContracts;\\n    uint256 private immutable i_interval; // * Chainlink keepers Interval\\n    uint256 private s_lastTimeStamp; // * Time stamp for chainlink keepers\\n\\n    //////////////////\\n    //// Events /////\\n    ////////////////\\n\\n    event TokenSupplied(\\n        address indexed tokenAddress,\\n        address indexed userAddress,\\n        uint256 indexed amount\\n    );\\n    event TokenWithdrawn(\\n        address indexed tokenAddress,\\n        address indexed userAddress,\\n        uint256 indexed amount\\n    );\\n    event TokenBorrowed(\\n        address indexed tokenAddress,\\n        address indexed userAddress,\\n        uint256 indexed amount\\n    );\\n    event TokenRepaid(\\n        address indexed tokenAddress,\\n        address indexed userAddress,\\n        uint256 indexed amount\\n    );\\n    event Guaranteed(\\n        address indexed userAddress,\\n        address indexed friendAddress,\\n        bool indexed reponse\\n    );\\n\\n    //////////////////////\\n    /////  mappings  /////\\n    /////////////////////\\n\\n    // token address -> total supply of that token\\n    mapping(address => uint256) private s_totalSupply;\\n\\n    // tokenAddress & user address -> their supplied balances\\n    mapping(address => mapping(address => uint256)) private s_supplyBalances;\\n\\n    // tokenAddress & user adddress -> their borrowed balance\\n    mapping(address => mapping(address => uint256)) private s_borrowedBalances;\\n\\n    // tokenAddress & user adddress -> their locked balance\\n    mapping(address => mapping(address => uint256)) private s_lockedBalances;\\n\\n    // token address -> price feeds\\n    mapping(address => AggregatorV3Interface) private s_priceFeeds;\\n\\n    // userAddress -> all of his unique supplied tokens\\n    mapping(address => address[]) private s_supplierUniqueTokens;\\n\\n    // userAddress -> all of his unique borrowed tokens\\n    mapping(address => address[]) private s_borrowerUniqueTokens;\\n\\n    // userAddress & friend address => their guaranties\\n    mapping(address => mapping(address => bool)) private s_guarantys;\\n\\n    // contractAddress -> permission to modify the data in this contract\\n    // mapping(address => bool) private s_allowedContracts;\\n\\n    /////////////////////\\n    ///   Modifiers   ///\\n    /////////////////////\\n\\n    // * MODIFIER: check if user have supplied token or not\\n    modifier hasSupplied() {\\n        bool success;\\n        for (uint256 i = 0; i < s_allowedTokens.length; i++) {\\n            if (\\n                s_supplyBalances[s_allowedTokens[i]][msg.sender] > 0 ||\\n                s_allowedBalances[s_allowedTokens[i]][msg.sender] > 0\\n            ) {\\n                success = true;\\n            }\\n        }\\n\\n        if (!success) {\\n            revert Stark__NotSupplied();\\n        }\\n        _;\\n    }\\n\\n    // * MODIFIER: check value is more then 0\\n    modifier notZero(uint256 amount) {\\n        if (amount <= 0) {\\n            revert Stark__NeedMoreThanZero(amount);\\n        }\\n        _;\\n    }\\n\\n    // * MODIFIER: check is token allowed or not\\n    modifier isTokenAllowed(address tokenAddress) {\\n        bool execute;\\n        for (uint256 i = 0; i < s_allowedTokens.length; i++) {\\n            if (s_allowedTokens[i] == tokenAddress) {\\n                execute = true;\\n            }\\n        }\\n\\n        if (!execute) {\\n            revert Stark__ThisTokenIsNotAvailable(tokenAddress);\\n        }\\n        _;\\n    }\\n\\n    // * MODIFIER: Check whether the contract address is allowed to modify values.\\n    modifier onlyAllowedContracts(address _contractAddress) {\\n        bool execute;\\n        for (uint256 i = 0; i < s_allowedContracts.length; i++) {\\n            if (s_allowedContracts[i] == _contractAddress) {\\n                execute = true;\\n            }\\n        }\\n        require(execute, \\\"not onlyAllowedContracts\\\");\\n        _;\\n    }\\n\\n    //////////////////////////\\n    ///  Main  Functions   ///\\n    /////////////////////////\\n\\n    constructor(\\n        address[] memory allowedTokens,\\n        address[] memory priceFeeds,\\n        uint256 updateInterval\\n    ) {\\n        s_allowedTokens = allowedTokens;\\n        for (uint256 i = 0; i < allowedTokens.length; i++) {\\n            s_priceFeeds[allowedTokens[i]] = AggregatorV3Interface(priceFeeds[i]);\\n        }\\n        i_interval = updateInterval;\\n        s_lastTimeStamp = block.timestamp;\\n        s_allowedContracts.push(msg.sender);\\n    }\\n\\n    // * FUNCTION: Users can supply tokens\\n    function supply(address tokenAddress, uint256 amount)\\n        external\\n        payable\\n        isTokenAllowed(tokenAddress)\\n        notZero(amount)\\n        nonReentrant\\n    {\\n        bool success = IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount);\\n        if (!success) {\\n            revert Stark__TransactionFailed();\\n        }\\n        s_totalSupply[tokenAddress] += amount;\\n        s_supplyBalances[tokenAddress][msg.sender] += amount;\\n        addSupplier(msg.sender); // adds supplier in s_suppliers array\\n        addUniqueToken(s_supplierUniqueTokens[msg.sender], tokenAddress); // adding token address to their unique tokens array (check this function in helper functions sections)\\n        // s_supplierUniqueTokens[msg.sender] -> mapping\\n        emit TokenSupplied(tokenAddress, msg.sender, amount);\\n    }\\n\\n    // * FUNCTION: Users can withdraw their supplied tokens\\n    function withdraw(address tokenAddress, uint256 amount)\\n        external\\n        payable\\n        hasSupplied\\n        notZero(amount)\\n        nonReentrant\\n    {\\n        if (amount > s_supplyBalances[tokenAddress][msg.sender]) {\\n            revert Stark__CannotWithdrawMoreThanSupplied(amount);\\n        }\\n\\n        revertIfHighBorrowing(tokenAddress, msg.sender, amount); // not allows to withdraw if borrowing is already high\\n        s_supplyBalances[tokenAddress][msg.sender] -= amount;\\n        s_totalSupply[tokenAddress] -= amount;\\n        removeSupplierAndUniqueToken(tokenAddress, msg.sender); // removes supplier and his unique token\\n        IERC20(tokenAddress).transfer(msg.sender, amount);\\n        emit TokenWithdrawn(tokenAddress, msg.sender, amount);\\n    }\\n\\n    // * FUNCTION: Users can borrow based on their supplies\\n    function borrow(address tokenAddress, uint256 amount)\\n        external\\n        payable\\n        isTokenAllowed(tokenAddress)\\n        hasSupplied\\n        notZero(amount)\\n        nonReentrant\\n    {\\n        if (s_totalSupply[tokenAddress] <= 0) {\\n            // reverts if we don't have supply of that token\\n            revert Stark__SorryWeCurrentlyDoNotHaveThisToken(tokenAddress);\\n        }\\n\\n        notMoreThanMaxBorrow(tokenAddress, msg.sender, amount); // not allows to borrow if asking more than their max borrow\\n        addBorrower(msg.sender); // adds borrower in s_borrowers array\\n        addUniqueToken(s_borrowerUniqueTokens[msg.sender], tokenAddress);\\n        s_borrowedBalances[tokenAddress][msg.sender] += amount;\\n        s_totalSupply[tokenAddress] -= amount;\\n        IERC20(tokenAddress).transfer(msg.sender, amount);\\n        emit TokenBorrowed(tokenAddress, msg.sender, amount);\\n    }\\n\\n    // * FUNCTION: To repay the loan\\n    function repay(address tokenAddress, uint256 amount)\\n        external\\n        payable\\n        notZero(amount)\\n        nonReentrant\\n    {\\n        bool success = IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount);\\n        if (!success) {\\n            revert Stark__TransactionFailed();\\n        }\\n\\n        s_borrowedBalances[tokenAddress][msg.sender] -= amount;\\n        s_totalSupply[tokenAddress] += amount;\\n        removeBorrowerAndUniqueToken(tokenAddress, msg.sender); // removes borrower and his unique token from array\\n        emit TokenRepaid(tokenAddress, msg.sender, amount);\\n    }\\n\\n    // * FUNCTION: For liquidation\\n    function liquidation() external onlyOwner {\\n        for (uint256 i = 0; i < s_borrowers.length; i++) {\\n            if (getTotalBorrowValue(s_borrowers[i]) >= getTotalSupplyValue(s_borrowers[i])) {\\n                // * Checking if total borrow value is equal or greater than total supply value in USD\\n                for (uint256 index = 0; index < s_allowedTokens.length; index++) {\\n                    s_supplyBalances[s_allowedTokens[index]][s_borrowers[i]] = 0;\\n                    s_borrowedBalances[s_allowedTokens[index]][s_borrowers[i]] = 0; // reducing their borrowed balance & supply balance to 0\\n                }\\n            }\\n        }\\n    }\\n\\n    // * FUNCTION: To allow guaranty requests to be sent\\n    function allowGuaranty(address friendAddress) external {\\n        s_guarantys[msg.sender][friendAddress] = true;\\n        emit Guaranteed(msg.sender, friendAddress, true);\\n    }\\n\\n    // * FUNCTION: To disallow guaranty requests to be sent\\n    function disAllowGuaranty(address friendAddress) external {\\n        s_guarantys[msg.sender][friendAddress] = false;\\n        emit Guaranteed(msg.sender, friendAddress, false);\\n    }\\n\\n    // PS: change the name guaranty to something else if you don't like\\n\\n    // function noCollateralBorrow(address friendAddress) external {\\n    //     // use table land to store data of all users who have guaranty\\n    //     // then use query to read data to find if this msg.sender have guantees or if have then\\n    //     // take allower address and borrower address from table and update their balance accordingly\\n    //     hasGuaranty();\\n    // }\\n\\n    // function hasGuaranty() public {\\n    //     // read from database and check if allowed\\n    // }\\n\\n    // * FUNCTION: TO charge APY on borrowings\\n    function chargeAPY() private {\\n        for (uint256 i = 0; i < s_borrowers.length; i++) {\\n            // looping borrowers array\\n            for (\\n                uint256 index = 0;\\n                index < s_borrowerUniqueTokens[s_borrowers[i]].length; // using borrower unique tokens to loop, so we don't need to loop every token\\n                // s_borrowers[i] => current borrower\\n                // s_borrowerUniqueTokens[s_borrowers[i]] => his all unique tokens\\n                index++\\n            ) {\\n                s_borrowedBalances[s_borrowerUniqueTokens[s_borrowers[i]][index]][ // s_borrowedBalances[tokenAddress][userAddress] => thier borrowed balance\\n                    s_borrowers[i]\\n                    // s_borrowerUniqueTokens[s_borrowers[i]] => borrower's all unique tokens\\n                    // s_borrowerUniqueTokens[s_borrowers[i]][index] => tokenAddress (from unique tokens)\\n                ] += (\\n                    (s_borrowedBalances[s_borrowerUniqueTokens[s_borrowers[i]][index]][\\n                        s_borrowers[i]\\n                    ] / uint256(50)) // adding 2 % to their borrowed balance (in s_borrowedBalances)\\n                );\\n            }\\n        }\\n    }\\n\\n    // * FUNCTION: TO reward APY on suppliers\\n    function rewardAPY() private {\\n        for (uint256 i = 0; i < s_suppliers.length; i++) {\\n            // looping suppleirs array\\n            for (\\n                uint256 index = 0;\\n                index < s_supplierUniqueTokens[s_suppliers[i]].length; // using supplier unique tokens to loop, so we don't need to loop every token\\n                // s_suppliers[i] => current supplier\\n                // s_supplierUniqueTokens[s_suppliers[i]] => his all unique tokens\\n                index++\\n            ) {\\n                s_supplyBalances[s_supplierUniqueTokens[s_suppliers[i]][index]][\\n                    s_suppliers[i]\\n                    // s_supplierUniqueTokens[s_suppliers[i]] => supplier's all unique tokens\\n                    // s_supplierUniqueTokens[s_suppliers[i]][index] => tokenAddress (from unique tokens)\\n                ] += (s_supplyBalances[s_supplierUniqueTokens[s_suppliers[i]][index]][\\n                    s_suppliers[i]\\n                ] / uint256(100)); // adding 2 % to their borrowed balance (in s_borrowedBalances)\\n            }\\n        }\\n    }\\n\\n    // * FUNCTION: checkUpkeep function from chainlink keepers\\n    /* returns true if\\n     * have atleast 1 borrower/supplier\\n     * time has passed\\n     */\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        bool hasUsers = (s_borrowers.length > 0) || (s_suppliers.length > 0);\\n        bool isTimePassed = (block.timestamp - s_lastTimeStamp) > i_interval;\\n        upkeepNeeded = (hasUsers && isTimePassed);\\n        return (upkeepNeeded, \\\"0x0\\\");\\n    }\\n\\n    // * FUNCTION: performUpkeep function from chainlink keepers\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n\\n        if (!upkeepNeeded) {\\n            revert Stark__UpKeepNotNeeded();\\n        }\\n\\n        if (s_borrowers.length > 0) {\\n            chargeAPY();\\n        }\\n\\n        if (s_suppliers.length > 0) {\\n            rewardAPY();\\n        }\\n\\n        s_lastTimeStamp = block.timestamp;\\n    }\\n\\n    // * FUNCTION: so people can also take some test tokens\\n    function faucet(address tokenAddress) external {\\n        IERC20(tokenAddress).transfer(msg.sender, 10000 * 10**18);\\n    }\\n\\n    ////////////////////////\\n    // Helper functions ////\\n    ///////////////////////\\n\\n    // * FUNCTION: To not allow to withdraw if borrowing is already high\\n    function revertIfHighBorrowing(\\n        address tokenAddress,\\n        address userAddress,\\n        uint256 amount\\n    ) private view {\\n        uint256 availableAmountValue = (getTotalSupplyValue(userAddress)) -\\n            (((uint256(100) * getTotalBorrowValue(userAddress)) / uint256(80)) +\\n                getTotalLockedValue(userAddress));\\n\\n        (uint256 price, uint256 decimals) = getLatestPrice(tokenAddress);\\n        uint256 askedAmountValue = amount * (price / 10**decimals);\\n\\n        if (askedAmountValue > availableAmountValue) {\\n            revert Stark__NotAllowedBeforeRepayingExistingLoan(amount);\\n        }\\n    }\\n\\n    // * FUNCTION: To not allow to borrow if asking more than their max borrow\\n    function notMoreThanMaxBorrow(\\n        address tokenAddress,\\n        address userAddress,\\n        uint256 amount\\n    ) private view {\\n        uint256 maxBorrow = getMaxBorrow(userAddress); // max borrow in usd\\n        (uint256 price, uint256 decimals) = getLatestPrice(tokenAddress);\\n        uint256 askedAmountValue = amount * (price / 10**decimals);\\n\\n        if (askedAmountValue > maxBorrow) {\\n            revert Stark__CouldNotBorrowMoreThan80PercentOfCollateral();\\n        }\\n    }\\n\\n    // * FUNCTION: To add tokenAddress in their unique token array\\n    // * in its first arg it takes a array so it can be used for borrower & supplier unique token\\n    function addUniqueToken(address[] storage uniqueTokenArray, address tokenAddress) private {\\n        if (uniqueTokenArray.length == 0) {\\n            uniqueTokenArray.push(tokenAddress);\\n        } else {\\n            bool add = true;\\n            for (uint256 i = 0; i < uniqueTokenArray.length; i++) {\\n                if (uniqueTokenArray[i] == tokenAddress) {\\n                    add = false;\\n                }\\n            }\\n            if (add) {\\n                uniqueTokenArray.push(tokenAddress);\\n            }\\n        }\\n    }\\n\\n    // * FUNCTION: To add supplier in s_suppliers array\\n    function addSupplier(address userAddress) private {\\n        if (s_suppliers.length == 0) {\\n            s_suppliers.push(userAddress);\\n        } else {\\n            bool add = true;\\n            for (uint256 i = 0; i < s_suppliers.length; i++) {\\n                if (s_suppliers[i] == userAddress) {\\n                    add = false;\\n                }\\n            }\\n            if (add) {\\n                s_suppliers.push(userAddress);\\n            }\\n        }\\n    }\\n\\n    // * FUNCTION: To add supplier in s_suppliers array\\n    function addBorrower(address userAddress) private {\\n        if (s_borrowers.length == 0) {\\n            s_borrowers.push(userAddress);\\n        } else {\\n            bool add = true;\\n            for (uint256 i = 0; i < s_borrowers.length; i++) {\\n                if (s_borrowers[i] == userAddress) {\\n                    add = false;\\n                }\\n            }\\n            if (add) {\\n                s_borrowers.push(userAddress);\\n            }\\n        }\\n    }\\n\\n    // * FUNCTION: To remove supplier and his unique token\\n    function removeSupplierAndUniqueToken(address tokenAddress, address userAddress) private {\\n        if (s_supplyBalances[tokenAddress][userAddress] <= 0) {\\n            remove(s_supplierUniqueTokens[userAddress], tokenAddress);\\n        }\\n\\n        if (s_supplierUniqueTokens[userAddress].length == 0) {\\n            remove(s_suppliers, userAddress);\\n        }\\n    }\\n\\n    // * FUNCTION: To remove borrower and his unique token from array\\n    function removeBorrowerAndUniqueToken(address tokenAddress, address userAddress) private {\\n        if (s_borrowedBalances[tokenAddress][userAddress] <= 0) {\\n            remove(s_borrowerUniqueTokens[userAddress], tokenAddress);\\n        }\\n        if (s_borrowerUniqueTokens[userAddress].length == 0) {\\n            remove(s_borrowers, userAddress);\\n        }\\n    }\\n\\n    // * FUNCTION: small algorithm for removing element from an array\\n    function remove(address[] storage array, address removingAddress) private {\\n        for (uint256 i = 0; i < array.length; i++) {\\n            if (array[i] == removingAddress) {\\n                array[i] = array[array.length - 1];\\n                array.pop();\\n            }\\n        }\\n    }\\n\\n    ////////////////////////////\\n    ///   getter functions   ///\\n    ////////////////////////////\\n\\n    function getTokenTotalSupply(address tokenAddress) external view returns (uint256) {\\n        return s_totalSupply[tokenAddress];\\n    }\\n\\n    function getAllTokenSupplyInUsd() external view returns (uint256) {\\n        uint256 totalValue = 0;\\n        for (uint256 i = 0; i < s_allowedTokens.length; i++) {\\n            (uint256 price, uint256 decimals) = getLatestPrice(s_allowedTokens[i]);\\n\\n            totalValue += ((price / 10**decimals) * s_totalSupply[s_allowedTokens[i]]);\\n        }\\n        return totalValue;\\n    }\\n\\n    function getSupplyBalance(address tokenAddress, address userAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_supplyBalances[tokenAddress][userAddress];\\n    }\\n\\n    function getLockedBalance(address tokenAddress, address userAddress)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return s_lockedBalances[tokenAddress][userAddress];\\n    }\\n\\n    function getBorrowedBalance(address tokenAddress, address userAddress)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return s_borrowedBalances[tokenAddress][userAddress];\\n    }\\n\\n    function getLatestPrice(address tokenAddress) public view returns (uint256, uint256) {\\n        (, int256 price, , , ) = s_priceFeeds[tokenAddress].latestRoundData();\\n        uint256 decimals = uint256(s_priceFeeds[tokenAddress].decimals());\\n        return (uint256(price), decimals);\\n    }\\n\\n    // * FUNCTION: returns max borrow allowed to a user\\n    function getMaxBorrow(address userAddress) public view returns (uint256) {\\n        uint256 availableAmountValue = (getTotalSupplyValue(userAddress) +\\n            getTotalAllowedValue(userAddress)) -\\n            (((uint256(100) * getTotalBorrowValue(userAddress)) / uint256(80)) +\\n                getTotalLockedValue(userAddress));\\n\\n        return (availableAmountValue * uint256(80)) / uint256(100);\\n    }\\n\\n    function getMaxWithdraw(address tokenAddress, address userAddress)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 availableAmount = s_supplyBalances[tokenAddress][userAddress] -\\n            (((uint256(100) * s_borrowedBalances[tokenAddress][userAddress]) / uint256(80)) +\\n                s_lockedBalances[tokenAddress][userAddress]);\\n\\n        return availableAmount;\\n    }\\n\\n    function getMaxTokenBorrow(address tokenAddress, address userAddress)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 availableAmountValue = (getTotalSupplyValue(userAddress) +\\n            getTotalAllowedValue(userAddress)) -\\n            (((uint256(100) * getTotalBorrowValue(userAddress)) / uint256(80)) +\\n                getTotalLockedValue(userAddress));\\n\\n        (uint256 price, uint256 decimals) = getLatestPrice(tokenAddress);\\n        return ((availableAmountValue / (price / 10**decimals)) * uint256(80)) / uint256(100);\\n    }\\n\\n    function getTotalSupplyValue(address userAddress) public view returns (uint256) {\\n        uint256 totalValue = 0;\\n        for (uint256 i = 0; i < s_allowedTokens.length; i++) {\\n            (uint256 price, uint256 decimals) = getLatestPrice(s_allowedTokens[i]);\\n\\n            totalValue += ((price / 10**decimals) *\\n                s_supplyBalances[s_allowedTokens[i]][userAddress]);\\n        }\\n        return totalValue;\\n    }\\n\\n    function getTotalLockedValue(address userAddress) public view returns (uint256) {\\n        uint256 totalValue = 0;\\n        for (uint256 i = 0; i < s_allowedTokens.length; i++) {\\n            (uint256 price, uint256 decimals) = getLatestPrice(s_allowedTokens[i]);\\n\\n            totalValue += ((price / 10**decimals) *\\n                s_lockedBalances[s_allowedTokens[i]][userAddress]);\\n        }\\n        return totalValue;\\n    }\\n\\n    function getTotalAllowedValue(address userAddress) public view returns (uint256) {\\n        uint256 totalValue = 0;\\n        for (uint256 i = 0; i < s_allowedTokens.length; i++) {\\n            (uint256 price, uint256 decimals) = getLatestPrice(s_allowedTokens[i]);\\n\\n            totalValue += ((price / 10**decimals) *\\n                s_allowedBalances[s_allowedTokens[i]][userAddress]);\\n        }\\n        return totalValue;\\n    }\\n\\n    function getTotalBorrowValue(address userAddress) public view returns (uint256) {\\n        uint256 totalValue = 0;\\n        for (uint256 i = 0; i < s_allowedTokens.length; i++) {\\n            (uint256 price, uint256 decimals) = getLatestPrice(s_allowedTokens[i]);\\n            totalValue += ((price / 10**decimals) *\\n                s_borrowedBalances[s_allowedTokens[i]][userAddress]);\\n        }\\n        return totalValue;\\n    }\\n\\n    function getAllowedTokens() external view returns (address[] memory) {\\n        return s_allowedTokens;\\n    }\\n\\n    function getSuppliers() external view returns (address[] memory) {\\n        return s_suppliers;\\n    }\\n\\n    function getBorrowers() external view returns (address[] memory) {\\n        return s_borrowers;\\n    }\\n\\n    function getUniqueSupplierTokens(address userAddress)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return s_supplierUniqueTokens[userAddress];\\n    }\\n\\n    function getUniqueBorrowerTokens(address userAddress)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return s_borrowerUniqueTokens[userAddress];\\n    }\\n\\n    function getInterval() external view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    /////////////////////////////\\n    ///   Interface Functions ///\\n    /////////////////////////////\\n\\n    // function setCreditLogicContract(address _starkProtocolAddress) external onlyOwner {\\n    //     starkContract = Istark_protocol(_starkProtocolAddress);\\n    //     starkProtocolAddress = _starkProtocolAddress;\\n    // }\\n\\n    // * FUNCTION: To Lock the Balance of the lender\\n\\n    mapping(address => mapping(address => uint256)) s_allowedBalances;\\n\\n    function lockBalanceChanges(\\n        address _tokenAddress,\\n        address _lender,\\n        address _borrower,\\n        uint256 _tokenAmount\\n    ) public onlyAllowedContracts(msg.sender) {\\n        s_lockedBalances[_tokenAddress][_lender] += _tokenAmount;\\n        s_allowedBalances[_tokenAddress][_borrower] += _tokenAmount;\\n\\n        // emit Event to Lender that his funds are locked\\n\\n        // requestChange_LendBalance(_tokenAddress, _borrower, _tokenAmount);\\n    }\\n\\n    // * FUNCTION: To transfer the funds to the Borrower Balance\\n    // function requestChange_LendBalance(\\n    //     address _tokenAddress,\\n    //     address _borrower,\\n    //     uint256 _tokenAmount\\n    // ) internal {\\n    //     s_supplyBalances[_tokenAddress][_borrower] += _tokenAmount;\\n\\n    //     s_totalSupply[_tokenAddress] -= _tokenAmount;\\n\\n    //     // emit Event to Borrower that he received the funds\\n    // }\\n\\n    // * FUNCTION: Deployer will add the guaranty contract in the List.\\n    function addAllowContracts(address _contractAddress)\\n        external\\n        onlyAllowedContracts(msg.sender)\\n    {\\n        s_allowedContracts.push(_contractAddress);\\n        // emit Event (optional)\\n    }\\n\\n    // * FUNCTION: Guaranty Contracts will change the balances after repayment.\\n    function repayChanges(\\n        address _tokenAddress,\\n        address _lender,\\n        address _borrower,\\n        uint256 _tokenAmount\\n    ) external onlyAllowedContracts(msg.sender) {\\n        s_borrowedBalances[_tokenAddress][_borrower] -= _tokenAmount;\\n        s_totalSupply[_tokenAddress] += _tokenAmount;\\n        s_lockedBalances[_tokenAddress][_lender] -= _tokenAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x0b88d443613352dbc030b345f47bda3b372e016466d7eac4916b3315fe0aebd5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200600238038062006002833981810160405281019062000037919062000574565b60016000819055506200005f62000053620001cf60201b60201c565b620001d760201b60201c565b8260039080519060200190620000779291906200029d565b5060005b835181101562000153578281815181106200009b576200009a6200060e565b5b6020026020010151600c6000868481518110620000bd57620000bc6200060e565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080806200014a906200066c565b9150506200007b565b508060808181525050426007819055506006339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620006b9565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b82805482825590600052602060002090810192821562000319579160200282015b82811115620003185782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190620002be565b5b5090506200032891906200032c565b5090565b5b80821115620003475760008160009055506001016200032d565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620003af8262000364565b810181811067ffffffffffffffff82111715620003d157620003d062000375565b5b80604052505050565b6000620003e66200034b565b9050620003f48282620003a4565b919050565b600067ffffffffffffffff82111562000417576200041662000375565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200045a826200042d565b9050919050565b6200046c816200044d565b81146200047857600080fd5b50565b6000815190506200048c8162000461565b92915050565b6000620004a9620004a384620003f9565b620003da565b90508083825260208201905060208402830185811115620004cf57620004ce62000428565b5b835b81811015620004fc5780620004e788826200047b565b845260208401935050602081019050620004d1565b5050509392505050565b600082601f8301126200051e576200051d6200035f565b5b81516200053084826020860162000492565b91505092915050565b6000819050919050565b6200054e8162000539565b81146200055a57600080fd5b50565b6000815190506200056e8162000543565b92915050565b60008060006060848603121562000590576200058f62000355565b5b600084015167ffffffffffffffff811115620005b157620005b06200035a565b5b620005bf8682870162000506565b935050602084015167ffffffffffffffff811115620005e357620005e26200035a565b5b620005f18682870162000506565b925050604062000604868287016200055d565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620006798262000539565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203620006ae57620006ad6200063d565b5b600182019050919050565b608051615926620006dc600039600081816119800152611a4001526159266000f3fe6080604052600436106102045760003560e01c8063b3b6a29611610118578063eabe4a86116100a0578063f2fde38b1161006f578063f2fde38b1461079c578063f3fef3a3146107c5578063f73a25af146107e1578063fd1c317a1461080c578063ffd70a271461084957610204565b8063eabe4a8614610703578063eb4e51e01461072c578063f2b9fdb814610769578063f2dfbf661461078557610204565b8063bcbc3e1b116100e7578063bcbc3e1b146105fa578063c736887e14610623578063d0c3fd2114610660578063e1d412631461069d578063e6b98eba146106da57610204565b8063b3b6a2961461051a578063b6a6df6e14610557578063b86d1d6314610594578063ba377731146105bd57610204565b80635d7021521161019b5780638da5cb5b1161016a5780638da5cb5b1461042157806391ad27b41461044c578063a9cbf35614610477578063aed00420146104b4578063b37bdb05146104dd57610204565b80635d702152146103785780636854786a146103a15780636e04ff0d146103cc578063715018a61461040a57610204565b80632c4fe48d116101d75780632c4fe48d146102cb57806343516832146103085780634585e33b146103335780634b8a35291461035c57610204565b8063024ece891461020957806316345f18146102345780631a1a919e1461027257806322867d78146102af575b600080fd5b34801561021557600080fd5b5061021e610886565b60405161022b9190614ba5565b60405180910390f35b34801561024057600080fd5b5061025b60048036038101906102569190614c07565b610914565b604051610269929190614c4d565b60405180910390f35b34801561027e57600080fd5b5061029960048036038101906102949190614c07565b610acf565b6040516102a69190614c76565b60405180910390f35b6102c960048036038101906102c49190614cbd565b610c3d565b005b3480156102d757600080fd5b506102f260048036038101906102ed9190614c07565b610ee7565b6040516102ff9190614c76565b60405180910390f35b34801561031457600080fd5b5061031d611055565b60405161032a9190614ba5565b60405180910390f35b34801561033f57600080fd5b5061035a60048036038101906103559190614d62565b6110e3565b005b61037660048036038101906103719190614cbd565b611171565b005b34801561038457600080fd5b5061039f600480360381019061039a9190614c07565b611786565b005b3480156103ad57600080fd5b506103b66118ce565b6040516103c39190614ba5565b60405180910390f35b3480156103d857600080fd5b506103f360048036038101906103ee9190614ef0565b61195c565b604051610401929190614fdc565b60405180910390f35b34801561041657600080fd5b5061041f6119fe565b005b34801561042d57600080fd5b50610436611a12565b604051610443919061501b565b60405180910390f35b34801561045857600080fd5b50610461611a3c565b60405161046e9190614c76565b60405180910390f35b34801561048357600080fd5b5061049e60048036038101906104999190615036565b611a64565b6040516104ab9190614c76565b60405180910390f35b3480156104c057600080fd5b506104db60048036038101906104d69190614c07565b611aeb565b005b3480156104e957600080fd5b5061050460048036038101906104ff9190614c07565b611be1565b6040516105119190614c76565b60405180910390f35b34801561052657600080fd5b50610541600480360381019061053c9190615036565b611c2a565b60405161054e9190614c76565b60405180910390f35b34801561056357600080fd5b5061057e60048036038101906105799190614c07565b611ddc565b60405161058b9190614ba5565b60405180910390f35b3480156105a057600080fd5b506105bb60048036038101906105b69190614c07565b611ea9565b005b3480156105c957600080fd5b506105e460048036038101906105df9190615036565b611f35565b6040516105f19190614c76565b60405180910390f35b34801561060657600080fd5b50610621600480360381019061061c9190615076565b611fbc565b005b34801561062f57600080fd5b5061064a60048036038101906106459190615036565b6121ca565b6040516106579190614c76565b60405180910390f35b34801561066c57600080fd5b5061068760048036038101906106829190614c07565b612251565b6040516106949190614ba5565b60405180910390f35b3480156106a957600080fd5b506106c460048036038101906106bf9190615036565b61231e565b6040516106d19190614c76565b60405180910390f35b3480156106e657600080fd5b5061070160048036038101906106fc9190614c07565b6123d3565b005b34801561070f57600080fd5b5061072a60048036038101906107259190615076565b6124c9565b005b34801561073857600080fd5b50610753600480360381019061074e9190614c07565b61272d565b6040516107609190614c76565b60405180910390f35b610783600480360381019061077e9190614cbd565b61289b565b005b34801561079157600080fd5b5061079a612c70565b005b3480156107a857600080fd5b506107c360048036038101906107be9190614c07565b612f52565b005b6107df60048036038101906107da9190614cbd565b612fd5565b005b3480156107ed57600080fd5b506107f66134fc565b6040516108039190614c76565b60405180910390f35b34801561081857600080fd5b50610833600480360381019061082e9190614c07565b61362b565b6040516108409190614c76565b60405180910390f35b34801561085557600080fd5b50610870600480360381019061086b9190614c07565b6136ab565b60405161087d9190614c76565b60405180910390f35b6060600380548060200260200160405190810160405280929190818152602001828054801561090a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116108c0575b5050505050905090565b6000806000600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156109c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e7919061516a565b5050509150506000600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abd919061521e565b60ff1690508181935093505050915091565b6000806000905060005b600380549050811015610c3357600080610b3060038481548110610b0057610aff61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610914565b915091506010600060038581548110610b4c57610b4b61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600a610bfc91906153dc565b83610c079190615456565b610c119190615487565b84610c1c91906154e1565b935050508080610c2b90615537565b915050610ad9565b5080915050919050565b8060008111610c8357806040517f405ec990000000000000000000000000000000000000000000000000000000008152600401610c7a9190614c76565b60405180910390fd5b600260005403610cc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbf906155dc565b60405180910390fd5b600260008190555060008373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610d0f939291906155fc565b6020604051808303816000875af1158015610d2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d52919061565f565b905080610d8b576040517f01d2e34800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e17919061568c565b9250508190555082600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e6d91906154e1565b92505081905550610e7e8433613819565b823373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f8e145174de64a4cd1938d6ef99ed04a7e3084ac57eddbf3c9350dce192a8189160405160405180910390a4506001600081905550505050565b6000806000905060005b60038054905081101561104b57600080610f4860038481548110610f1857610f1761524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610914565b915091506009600060038581548110610f6457610f6361524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600a61101491906153dc565b8361101f9190615456565b6110299190615487565b8461103491906154e1565b93505050808061104390615537565b915050610ef1565b5080915050919050565b606060048054806020026020016040519081016040528092919081815260200182805480156110d957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161108f575b5050505050905090565b60006110fd6040518060200160405280600081525061195c565b50905080611137576040517fd20f01c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600580549050111561114e5761114d613940565b5b6000600480549050111561116557611164613d0e565b5b42600781905550505050565b81600080600090505b600380549050811015611210578273ffffffffffffffffffffffffffffffffffffffff16600382815481106111b2576111b161524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036111fd57600191505b808061120890615537565b91505061117a565b508061125357816040517f8723d71200000000000000000000000000000000000000000000000000000000815260040161124a919061501b565b60405180910390fd5b600080600090505b60038054905081101561140857600060096000600384815481106112825761128161524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411806113eb5750600060106000600384815481106113465761134561524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b156113f557600191505b808061140090615537565b91505061125b565b5080611440576040517ff418fde300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b836000811161148657806040517f405ec99000000000000000000000000000000000000000000000000000000000815260040161147d9190614c76565b60405180910390fd5b6002600054036114cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c2906155dc565b60405180910390fd5b60026000819055506000600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161155757856040517f79867f5e00000000000000000000000000000000000000000000000000000000815260040161154e919061501b565b60405180910390fd5b6115628633876140dc565b61156b33614163565b6115b3600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020876142e7565b84600a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461163f91906154e1565b9250508190555084600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611695919061568c565b925050819055508573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33876040518363ffffffff1660e01b81526004016116d79291906156c0565b6020604051808303816000875af11580156116f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171a919061565f565b50843373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fbac7ef7476b8ca23cee38d6cd192ffe52e03ef25c633ca23765fdda1dde653c660405160405180910390a46001600081905550505050505050565b33600080600090505b600680549050811015611825578273ffffffffffffffffffffffffffffffffffffffff16600682815481106117c7576117c661524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361181257600191505b808061181d90615537565b91505061178f565b5080611866576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185d90615735565b60405180910390fd5b6006839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6060600580548060200260200160405190810160405280929190818152602001828054801561195257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611908575b5050505050905090565b60006060600080600580549050118061197a57506000600480549050115b905060007f0000000000000000000000000000000000000000000000000000000000000000600754426119ad919061568c565b1190508180156119ba5750805b9350836040518060400160405280600381526020017f3078300000000000000000000000000000000000000000000000000000000000815250935093505050915091565b611a06614467565b611a1060006144e5565b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600015158173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd606a3476368846f06df0791eef492ec0f2be479134cc7bfac8a9fdc8e83c3a560405160405180910390a450565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546050600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546064611d359190615487565b611d3f9190615456565b611d4991906154e1565b600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dd0919061568c565b90508091505092915050565b6060600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611e9d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611e53575b50505050509050919050565b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb3369021e19e0c9bab24000006040518363ffffffff1660e01b8152600401611eee92919061579a565b6020604051808303816000875af1158015611f0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f31919061565f565b5050565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b33600080600090505b60068054905081101561205b578273ffffffffffffffffffffffffffffffffffffffff1660068281548110611ffd57611ffc61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361204857600191505b808061205390615537565b915050611fc5565b508061209c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209390615735565b60405180910390fd5b82600b60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461212891906154e1565b9250508190555082601060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121bb91906154e1565b92505081905550505050505050565b6000600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6060600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561231257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116122c8575b50505050509050919050565b60008061232a836136ab565b60506123358561272d565b60646123419190615487565b61234b9190615456565b61235591906154e1565b61235e84610acf565b61236785610ee7565b61237191906154e1565b61237b919061568c565b905060008061238986610914565b915091506064605082600a61239e91906153dc565b846123a99190615456565b856123b49190615456565b6123be9190615487565b6123c89190615456565b935050505092915050565b6001600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600115158173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd606a3476368846f06df0791eef492ec0f2be479134cc7bfac8a9fdc8e83c3a560405160405180910390a450565b33600080600090505b600680549050811015612568578273ffffffffffffffffffffffffffffffffffffffff166006828154811061250a5761250961524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361255557600191505b808061256090615537565b9150506124d2565b50806125a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125a090615735565b60405180910390fd5b82600a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612635919061568c565b9250508190555082600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461268b91906154e1565b9250508190555082600b60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461271e919061568c565b92505081905550505050505050565b6000806000905060005b6003805490508110156128915760008061278e6003848154811061275e5761275d61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610914565b91509150600a6000600385815481106127aa576127a961524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600a61285a91906153dc565b836128659190615456565b61286f9190615487565b8461287a91906154e1565b93505050808061288990615537565b915050612737565b5080915050919050565b81600080600090505b60038054905081101561293a578273ffffffffffffffffffffffffffffffffffffffff16600382815481106128dc576128db61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361292757600191505b808061293290615537565b9150506128a4565b508061297d57816040517f8723d712000000000000000000000000000000000000000000000000000000008152600401612974919061501b565b60405180910390fd5b82600081116129c357806040517f405ec9900000000000000000000000000000000000000000000000000000000081526004016129ba9190614c76565b60405180910390fd5b600260005403612a08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129ff906155dc565b60405180910390fd5b600260008190555060008573ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b8152600401612a4f939291906155fc565b6020604051808303816000875af1158015612a6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a92919061565f565b905080612acb576040517f01d2e34800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612b1a91906154e1565b9250508190555084600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612bad91906154e1565b92505081905550612bbd336145ab565b612c05600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020876142e7565b843373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f5df8b54f38216384ee108b037a3a0e3b7d678f14f3e251d3604ce82b6e1e972560405160405180910390a45060016000819055505050505050565b612c78614467565b60005b600580549050811015612f4f57612ccf60058281548110612c9f57612c9e61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ee7565b612d1660058381548110612ce657612ce561524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661272d565b10612f3c5760005b600380549050811015612f3a5760006009600060038481548110612d4557612d4461524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060058581548110612dc057612dbf61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600a600060038481548110612e4357612e4261524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060058581548110612ebe57612ebd61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508080612f3290615537565b915050612d1e565b505b8080612f4790615537565b915050612c7b565b50565b612f5a614467565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612fc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fc090615835565b60405180910390fd5b612fd2816144e5565b50565b600080600090505b60038054905081101561318a57600060096000600384815481106130045761300361524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054118061316d5750600060106000600384815481106130c8576130c761524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b1561317757600191505b808061318290615537565b915050612fdd565b50806131c2576040517ff418fde300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816000811161320857806040517f405ec9900000000000000000000000000000000000000000000000000000000081526004016131ff9190614c76565b60405180910390fd5b60026000540361324d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613244906155dc565b60405180910390fd5b6002600081905550600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111561331657826040517f91edbd0900000000000000000000000000000000000000000000000000000000815260040161330d9190614c76565b60405180910390fd5b61332184338561472f565b82600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546133ad919061568c565b9250508190555082600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613403919061568c565b9250508190555061341484336147ff565b8373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b815260040161344f9291906156c0565b6020604051808303816000875af115801561346e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613492919061565f565b50823373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f8210728e7c071f615b840ee026032693858fbcd5e5359e67e438c890f59e562060405160405180910390a4600160008190555050505050565b6000806000905060005b6003805490508110156136235760008061355d6003848154811061352d5761352c61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610914565b9150915060086000600385815481106135795761357861524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600a6135ec91906153dc565b836135f79190615456565b6136019190615487565b8461360c91906154e1565b93505050808061361b90615537565b915050613506565b508091505090565b600080613637836136ab565b60506136428561272d565b606461364e9190615487565b6136589190615456565b61366291906154e1565b61366b84610acf565b61367485610ee7565b61367e91906154e1565b613688919061568c565b905060646050826136999190615487565b6136a39190615456565b915050919050565b6000806000905060005b60038054905081101561380f5760008061370c600384815481106136dc576136db61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610914565b91509150600b6000600385815481106137285761372761524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600a6137d891906153dc565b836137e39190615456565b6137ed9190615487565b846137f891906154e1565b93505050808061380790615537565b9150506136b5565b5080915050919050565b6000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116138e6576138e5600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083614926565b5b6000600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490500361393c5761393b600582614926565b5b5050565b60005b600580549050811015613d0b5760005b600e60006005848154811061396b5761396a61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015613cf7576032600a6000600e6000600587815481106139f9576139f861524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110613a7057613a6f61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060058581548110613aeb57613aea61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613b5b9190615456565b600a6000600e600060058781548110613b7757613b7661524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110613bee57613bed61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060058581548110613c6957613c6861524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613cdd91906154e1565b925050819055508080613cef90615537565b915050613953565b508080613d0390615537565b915050613943565b50565b60005b6004805490508110156140d95760005b600d600060048481548110613d3957613d3861524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156140c557606460096000600d600060048781548110613dc757613dc661524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110613e3e57613e3d61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060048581548110613eb957613eb861524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613f299190615456565b60096000600d600060048781548110613f4557613f4461524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110613fbc57613fbb61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600485815481106140375761403661524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546140ab91906154e1565b9250508190555080806140bd90615537565b915050613d21565b5080806140d190615537565b915050613d11565b50565b60006140e78361362b565b90506000806140f586610914565b91509150600081600a61410891906153dc565b836141139190615456565b8561411e9190615487565b90508381111561415a576040517f47820a6500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050565b6000600580549050036141d8576005819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506142e4565b60006001905060005b600580549050811015614277578273ffffffffffffffffffffffffffffffffffffffff16600582815481106142195761421861524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361426457600091505b808061426f90615537565b9150506141e1565b5080156142e2576005829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505b50565b600082805490500361435a5781819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550614463565b60006001905060005b83805490508110156143f7578273ffffffffffffffffffffffffffffffffffffffff168482815481106143995761439861524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036143e457600091505b80806143ef90615537565b915050614363565b5080156144615782829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505b5050565b61446f614aad565b73ffffffffffffffffffffffffffffffffffffffff1661448d611a12565b73ffffffffffffffffffffffffffffffffffffffff16146144e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016144da906158a1565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060048054905003614620576004819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061472c565b60006001905060005b6004805490508110156146bf578273ffffffffffffffffffffffffffffffffffffffff16600482815481106146615761466061524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036146ac57600091505b80806146b790615537565b915050614629565b50801561472a576004829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505b50565b600061473a836136ab565b60506147458561272d565b60646147519190615487565b61475b9190615456565b61476591906154e1565b61476e84610ee7565b614778919061568c565b905060008061478686610914565b91509150600081600a61479991906153dc565b836147a49190615456565b856147af9190615487565b9050838111156147f657846040517f15e5f1b60000000000000000000000000000000000000000000000000000000081526004016147ed9190614c76565b60405180910390fd5b50505050505050565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116148cc576148cb600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083614926565b5b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490500361492257614921600482614926565b5b5050565b60005b8280549050811015614aa8578173ffffffffffffffffffffffffffffffffffffffff1683828154811061495f5761495e61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603614a955782600184805490506149b7919061568c565b815481106149c8576149c761524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838281548110614a0657614a0561524b565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082805480614a5f57614a5e6158c1565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b8080614aa090615537565b915050614929565b505050565b600033905090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000614b0c82614ae1565b9050919050565b614b1c81614b01565b82525050565b6000614b2e8383614b13565b60208301905092915050565b6000602082019050919050565b6000614b5282614ab5565b614b5c8185614ac0565b9350614b6783614ad1565b8060005b83811015614b98578151614b7f8882614b22565b9750614b8a83614b3a565b925050600181019050614b6b565b5085935050505092915050565b60006020820190508181036000830152614bbf8184614b47565b905092915050565b6000604051905090565b600080fd5b600080fd5b614be481614b01565b8114614bef57600080fd5b50565b600081359050614c0181614bdb565b92915050565b600060208284031215614c1d57614c1c614bd1565b5b6000614c2b84828501614bf2565b91505092915050565b6000819050919050565b614c4781614c34565b82525050565b6000604082019050614c626000830185614c3e565b614c6f6020830184614c3e565b9392505050565b6000602082019050614c8b6000830184614c3e565b92915050565b614c9a81614c34565b8114614ca557600080fd5b50565b600081359050614cb781614c91565b92915050565b60008060408385031215614cd457614cd3614bd1565b5b6000614ce285828601614bf2565b9250506020614cf385828601614ca8565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f840112614d2257614d21614cfd565b5b8235905067ffffffffffffffff811115614d3f57614d3e614d02565b5b602083019150836001820283011115614d5b57614d5a614d07565b5b9250929050565b60008060208385031215614d7957614d78614bd1565b5b600083013567ffffffffffffffff811115614d9757614d96614bd6565b5b614da385828601614d0c565b92509250509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b614dfd82614db4565b810181811067ffffffffffffffff82111715614e1c57614e1b614dc5565b5b80604052505050565b6000614e2f614bc7565b9050614e3b8282614df4565b919050565b600067ffffffffffffffff821115614e5b57614e5a614dc5565b5b614e6482614db4565b9050602081019050919050565b82818337600083830152505050565b6000614e93614e8e84614e40565b614e25565b905082815260208101848484011115614eaf57614eae614daf565b5b614eba848285614e71565b509392505050565b600082601f830112614ed757614ed6614cfd565b5b8135614ee7848260208601614e80565b91505092915050565b600060208284031215614f0657614f05614bd1565b5b600082013567ffffffffffffffff811115614f2457614f23614bd6565b5b614f3084828501614ec2565b91505092915050565b60008115159050919050565b614f4e81614f39565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015614f8e578082015181840152602081019050614f73565b83811115614f9d576000848401525b50505050565b6000614fae82614f54565b614fb88185614f5f565b9350614fc8818560208601614f70565b614fd181614db4565b840191505092915050565b6000604082019050614ff16000830185614f45565b81810360208301526150038184614fa3565b90509392505050565b61501581614b01565b82525050565b6000602082019050615030600083018461500c565b92915050565b6000806040838503121561504d5761504c614bd1565b5b600061505b85828601614bf2565b925050602061506c85828601614bf2565b9150509250929050565b600080600080608085870312156150905761508f614bd1565b5b600061509e87828801614bf2565b94505060206150af87828801614bf2565b93505060406150c087828801614bf2565b92505060606150d187828801614ca8565b91505092959194509250565b600069ffffffffffffffffffff82169050919050565b6150fc816150dd565b811461510757600080fd5b50565b600081519050615119816150f3565b92915050565b6000819050919050565b6151328161511f565b811461513d57600080fd5b50565b60008151905061514f81615129565b92915050565b60008151905061516481614c91565b92915050565b600080600080600060a0868803121561518657615185614bd1565b5b60006151948882890161510a565b95505060206151a588828901615140565b94505060406151b688828901615155565b93505060606151c788828901615155565b92505060806151d88882890161510a565b9150509295509295909350565b600060ff82169050919050565b6151fb816151e5565b811461520657600080fd5b50565b600081519050615218816151f2565b92915050565b60006020828403121561523457615233614bd1565b5b600061524284828501615209565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115615300578086048111156152dc576152db61527a565b5b60018516156152eb5780820291505b80810290506152f9856152a9565b94506152c0565b94509492505050565b60008261531957600190506153d5565b8161532757600090506153d5565b816001811461533d576002811461534757615376565b60019150506153d5565b60ff8411156153595761535861527a565b5b8360020a9150848211156153705761536f61527a565b5b506153d5565b5060208310610133831016604e8410600b84101617156153ab5782820a9050838111156153a6576153a561527a565b5b6153d5565b6153b884848460016152b6565b925090508184048111156153cf576153ce61527a565b5b81810290505b9392505050565b60006153e782614c34565b91506153f283614c34565b925061541f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484615309565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061546182614c34565b915061546c83614c34565b92508261547c5761547b615427565b5b828204905092915050565b600061549282614c34565b915061549d83614c34565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156154d6576154d561527a565b5b828202905092915050565b60006154ec82614c34565b91506154f783614c34565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561552c5761552b61527a565b5b828201905092915050565b600061554282614c34565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036155745761557361527a565b5b600182019050919050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006155c6601f8361557f565b91506155d182615590565b602082019050919050565b600060208201905081810360008301526155f5816155b9565b9050919050565b6000606082019050615611600083018661500c565b61561e602083018561500c565b61562b6040830184614c3e565b949350505050565b61563c81614f39565b811461564757600080fd5b50565b60008151905061565981615633565b92915050565b60006020828403121561567557615674614bd1565b5b60006156838482850161564a565b91505092915050565b600061569782614c34565b91506156a283614c34565b9250828210156156b5576156b461527a565b5b828203905092915050565b60006040820190506156d5600083018561500c565b6156e26020830184614c3e565b9392505050565b7f6e6f74206f6e6c79416c6c6f776564436f6e7472616374730000000000000000600082015250565b600061571f60188361557f565b915061572a826156e9565b602082019050919050565b6000602082019050818103600083015261574e81615712565b9050919050565b6000819050919050565b6000819050919050565b600061578461577f61577a84615755565b61575f565b614c34565b9050919050565b61579481615769565b82525050565b60006040820190506157af600083018561500c565b6157bc602083018461578b565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061581f60268361557f565b915061582a826157c3565b604082019050919050565b6000602082019050818103600083015261584e81615812565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061588b60208361557f565b915061589682615855565b602082019050919050565b600060208201905081810360008301526158ba8161587e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220df818e3a0f7e475dc43cb1c2169be27241dd53a47bd2ea60603170207971877764736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106102045760003560e01c8063b3b6a29611610118578063eabe4a86116100a0578063f2fde38b1161006f578063f2fde38b1461079c578063f3fef3a3146107c5578063f73a25af146107e1578063fd1c317a1461080c578063ffd70a271461084957610204565b8063eabe4a8614610703578063eb4e51e01461072c578063f2b9fdb814610769578063f2dfbf661461078557610204565b8063bcbc3e1b116100e7578063bcbc3e1b146105fa578063c736887e14610623578063d0c3fd2114610660578063e1d412631461069d578063e6b98eba146106da57610204565b8063b3b6a2961461051a578063b6a6df6e14610557578063b86d1d6314610594578063ba377731146105bd57610204565b80635d7021521161019b5780638da5cb5b1161016a5780638da5cb5b1461042157806391ad27b41461044c578063a9cbf35614610477578063aed00420146104b4578063b37bdb05146104dd57610204565b80635d702152146103785780636854786a146103a15780636e04ff0d146103cc578063715018a61461040a57610204565b80632c4fe48d116101d75780632c4fe48d146102cb57806343516832146103085780634585e33b146103335780634b8a35291461035c57610204565b8063024ece891461020957806316345f18146102345780631a1a919e1461027257806322867d78146102af575b600080fd5b34801561021557600080fd5b5061021e610886565b60405161022b9190614ba5565b60405180910390f35b34801561024057600080fd5b5061025b60048036038101906102569190614c07565b610914565b604051610269929190614c4d565b60405180910390f35b34801561027e57600080fd5b5061029960048036038101906102949190614c07565b610acf565b6040516102a69190614c76565b60405180910390f35b6102c960048036038101906102c49190614cbd565b610c3d565b005b3480156102d757600080fd5b506102f260048036038101906102ed9190614c07565b610ee7565b6040516102ff9190614c76565b60405180910390f35b34801561031457600080fd5b5061031d611055565b60405161032a9190614ba5565b60405180910390f35b34801561033f57600080fd5b5061035a60048036038101906103559190614d62565b6110e3565b005b61037660048036038101906103719190614cbd565b611171565b005b34801561038457600080fd5b5061039f600480360381019061039a9190614c07565b611786565b005b3480156103ad57600080fd5b506103b66118ce565b6040516103c39190614ba5565b60405180910390f35b3480156103d857600080fd5b506103f360048036038101906103ee9190614ef0565b61195c565b604051610401929190614fdc565b60405180910390f35b34801561041657600080fd5b5061041f6119fe565b005b34801561042d57600080fd5b50610436611a12565b604051610443919061501b565b60405180910390f35b34801561045857600080fd5b50610461611a3c565b60405161046e9190614c76565b60405180910390f35b34801561048357600080fd5b5061049e60048036038101906104999190615036565b611a64565b6040516104ab9190614c76565b60405180910390f35b3480156104c057600080fd5b506104db60048036038101906104d69190614c07565b611aeb565b005b3480156104e957600080fd5b5061050460048036038101906104ff9190614c07565b611be1565b6040516105119190614c76565b60405180910390f35b34801561052657600080fd5b50610541600480360381019061053c9190615036565b611c2a565b60405161054e9190614c76565b60405180910390f35b34801561056357600080fd5b5061057e60048036038101906105799190614c07565b611ddc565b60405161058b9190614ba5565b60405180910390f35b3480156105a057600080fd5b506105bb60048036038101906105b69190614c07565b611ea9565b005b3480156105c957600080fd5b506105e460048036038101906105df9190615036565b611f35565b6040516105f19190614c76565b60405180910390f35b34801561060657600080fd5b50610621600480360381019061061c9190615076565b611fbc565b005b34801561062f57600080fd5b5061064a60048036038101906106459190615036565b6121ca565b6040516106579190614c76565b60405180910390f35b34801561066c57600080fd5b5061068760048036038101906106829190614c07565b612251565b6040516106949190614ba5565b60405180910390f35b3480156106a957600080fd5b506106c460048036038101906106bf9190615036565b61231e565b6040516106d19190614c76565b60405180910390f35b3480156106e657600080fd5b5061070160048036038101906106fc9190614c07565b6123d3565b005b34801561070f57600080fd5b5061072a60048036038101906107259190615076565b6124c9565b005b34801561073857600080fd5b50610753600480360381019061074e9190614c07565b61272d565b6040516107609190614c76565b60405180910390f35b610783600480360381019061077e9190614cbd565b61289b565b005b34801561079157600080fd5b5061079a612c70565b005b3480156107a857600080fd5b506107c360048036038101906107be9190614c07565b612f52565b005b6107df60048036038101906107da9190614cbd565b612fd5565b005b3480156107ed57600080fd5b506107f66134fc565b6040516108039190614c76565b60405180910390f35b34801561081857600080fd5b50610833600480360381019061082e9190614c07565b61362b565b6040516108409190614c76565b60405180910390f35b34801561085557600080fd5b50610870600480360381019061086b9190614c07565b6136ab565b60405161087d9190614c76565b60405180910390f35b6060600380548060200260200160405190810160405280929190818152602001828054801561090a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116108c0575b5050505050905090565b6000806000600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156109c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e7919061516a565b5050509150506000600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abd919061521e565b60ff1690508181935093505050915091565b6000806000905060005b600380549050811015610c3357600080610b3060038481548110610b0057610aff61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610914565b915091506010600060038581548110610b4c57610b4b61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600a610bfc91906153dc565b83610c079190615456565b610c119190615487565b84610c1c91906154e1565b935050508080610c2b90615537565b915050610ad9565b5080915050919050565b8060008111610c8357806040517f405ec990000000000000000000000000000000000000000000000000000000008152600401610c7a9190614c76565b60405180910390fd5b600260005403610cc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbf906155dc565b60405180910390fd5b600260008190555060008373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610d0f939291906155fc565b6020604051808303816000875af1158015610d2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d52919061565f565b905080610d8b576040517f01d2e34800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e17919061568c565b9250508190555082600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e6d91906154e1565b92505081905550610e7e8433613819565b823373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f8e145174de64a4cd1938d6ef99ed04a7e3084ac57eddbf3c9350dce192a8189160405160405180910390a4506001600081905550505050565b6000806000905060005b60038054905081101561104b57600080610f4860038481548110610f1857610f1761524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610914565b915091506009600060038581548110610f6457610f6361524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600a61101491906153dc565b8361101f9190615456565b6110299190615487565b8461103491906154e1565b93505050808061104390615537565b915050610ef1565b5080915050919050565b606060048054806020026020016040519081016040528092919081815260200182805480156110d957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161108f575b5050505050905090565b60006110fd6040518060200160405280600081525061195c565b50905080611137576040517fd20f01c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600580549050111561114e5761114d613940565b5b6000600480549050111561116557611164613d0e565b5b42600781905550505050565b81600080600090505b600380549050811015611210578273ffffffffffffffffffffffffffffffffffffffff16600382815481106111b2576111b161524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036111fd57600191505b808061120890615537565b91505061117a565b508061125357816040517f8723d71200000000000000000000000000000000000000000000000000000000815260040161124a919061501b565b60405180910390fd5b600080600090505b60038054905081101561140857600060096000600384815481106112825761128161524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411806113eb5750600060106000600384815481106113465761134561524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b156113f557600191505b808061140090615537565b91505061125b565b5080611440576040517ff418fde300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b836000811161148657806040517f405ec99000000000000000000000000000000000000000000000000000000000815260040161147d9190614c76565b60405180910390fd5b6002600054036114cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c2906155dc565b60405180910390fd5b60026000819055506000600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161155757856040517f79867f5e00000000000000000000000000000000000000000000000000000000815260040161154e919061501b565b60405180910390fd5b6115628633876140dc565b61156b33614163565b6115b3600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020876142e7565b84600a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461163f91906154e1565b9250508190555084600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611695919061568c565b925050819055508573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33876040518363ffffffff1660e01b81526004016116d79291906156c0565b6020604051808303816000875af11580156116f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171a919061565f565b50843373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fbac7ef7476b8ca23cee38d6cd192ffe52e03ef25c633ca23765fdda1dde653c660405160405180910390a46001600081905550505050505050565b33600080600090505b600680549050811015611825578273ffffffffffffffffffffffffffffffffffffffff16600682815481106117c7576117c661524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361181257600191505b808061181d90615537565b91505061178f565b5080611866576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185d90615735565b60405180910390fd5b6006839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6060600580548060200260200160405190810160405280929190818152602001828054801561195257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611908575b5050505050905090565b60006060600080600580549050118061197a57506000600480549050115b905060007f0000000000000000000000000000000000000000000000000000000000000000600754426119ad919061568c565b1190508180156119ba5750805b9350836040518060400160405280600381526020017f3078300000000000000000000000000000000000000000000000000000000000815250935093505050915091565b611a06614467565b611a1060006144e5565b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600015158173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd606a3476368846f06df0791eef492ec0f2be479134cc7bfac8a9fdc8e83c3a560405160405180910390a450565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546050600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546064611d359190615487565b611d3f9190615456565b611d4991906154e1565b600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dd0919061568c565b90508091505092915050565b6060600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611e9d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611e53575b50505050509050919050565b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb3369021e19e0c9bab24000006040518363ffffffff1660e01b8152600401611eee92919061579a565b6020604051808303816000875af1158015611f0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f31919061565f565b5050565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b33600080600090505b60068054905081101561205b578273ffffffffffffffffffffffffffffffffffffffff1660068281548110611ffd57611ffc61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361204857600191505b808061205390615537565b915050611fc5565b508061209c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209390615735565b60405180910390fd5b82600b60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461212891906154e1565b9250508190555082601060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121bb91906154e1565b92505081905550505050505050565b6000600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6060600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561231257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116122c8575b50505050509050919050565b60008061232a836136ab565b60506123358561272d565b60646123419190615487565b61234b9190615456565b61235591906154e1565b61235e84610acf565b61236785610ee7565b61237191906154e1565b61237b919061568c565b905060008061238986610914565b915091506064605082600a61239e91906153dc565b846123a99190615456565b856123b49190615456565b6123be9190615487565b6123c89190615456565b935050505092915050565b6001600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600115158173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd606a3476368846f06df0791eef492ec0f2be479134cc7bfac8a9fdc8e83c3a560405160405180910390a450565b33600080600090505b600680549050811015612568578273ffffffffffffffffffffffffffffffffffffffff166006828154811061250a5761250961524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361255557600191505b808061256090615537565b9150506124d2565b50806125a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125a090615735565b60405180910390fd5b82600a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612635919061568c565b9250508190555082600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461268b91906154e1565b9250508190555082600b60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461271e919061568c565b92505081905550505050505050565b6000806000905060005b6003805490508110156128915760008061278e6003848154811061275e5761275d61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610914565b91509150600a6000600385815481106127aa576127a961524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600a61285a91906153dc565b836128659190615456565b61286f9190615487565b8461287a91906154e1565b93505050808061288990615537565b915050612737565b5080915050919050565b81600080600090505b60038054905081101561293a578273ffffffffffffffffffffffffffffffffffffffff16600382815481106128dc576128db61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361292757600191505b808061293290615537565b9150506128a4565b508061297d57816040517f8723d712000000000000000000000000000000000000000000000000000000008152600401612974919061501b565b60405180910390fd5b82600081116129c357806040517f405ec9900000000000000000000000000000000000000000000000000000000081526004016129ba9190614c76565b60405180910390fd5b600260005403612a08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129ff906155dc565b60405180910390fd5b600260008190555060008573ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b8152600401612a4f939291906155fc565b6020604051808303816000875af1158015612a6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a92919061565f565b905080612acb576040517f01d2e34800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612b1a91906154e1565b9250508190555084600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612bad91906154e1565b92505081905550612bbd336145ab565b612c05600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020876142e7565b843373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f5df8b54f38216384ee108b037a3a0e3b7d678f14f3e251d3604ce82b6e1e972560405160405180910390a45060016000819055505050505050565b612c78614467565b60005b600580549050811015612f4f57612ccf60058281548110612c9f57612c9e61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ee7565b612d1660058381548110612ce657612ce561524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661272d565b10612f3c5760005b600380549050811015612f3a5760006009600060038481548110612d4557612d4461524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060058581548110612dc057612dbf61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600a600060038481548110612e4357612e4261524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060058581548110612ebe57612ebd61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508080612f3290615537565b915050612d1e565b505b8080612f4790615537565b915050612c7b565b50565b612f5a614467565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612fc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fc090615835565b60405180910390fd5b612fd2816144e5565b50565b600080600090505b60038054905081101561318a57600060096000600384815481106130045761300361524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054118061316d5750600060106000600384815481106130c8576130c761524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b1561317757600191505b808061318290615537565b915050612fdd565b50806131c2576040517ff418fde300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816000811161320857806040517f405ec9900000000000000000000000000000000000000000000000000000000081526004016131ff9190614c76565b60405180910390fd5b60026000540361324d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613244906155dc565b60405180910390fd5b6002600081905550600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111561331657826040517f91edbd0900000000000000000000000000000000000000000000000000000000815260040161330d9190614c76565b60405180910390fd5b61332184338561472f565b82600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546133ad919061568c565b9250508190555082600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613403919061568c565b9250508190555061341484336147ff565b8373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b815260040161344f9291906156c0565b6020604051808303816000875af115801561346e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613492919061565f565b50823373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f8210728e7c071f615b840ee026032693858fbcd5e5359e67e438c890f59e562060405160405180910390a4600160008190555050505050565b6000806000905060005b6003805490508110156136235760008061355d6003848154811061352d5761352c61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610914565b9150915060086000600385815481106135795761357861524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600a6135ec91906153dc565b836135f79190615456565b6136019190615487565b8461360c91906154e1565b93505050808061361b90615537565b915050613506565b508091505090565b600080613637836136ab565b60506136428561272d565b606461364e9190615487565b6136589190615456565b61366291906154e1565b61366b84610acf565b61367485610ee7565b61367e91906154e1565b613688919061568c565b905060646050826136999190615487565b6136a39190615456565b915050919050565b6000806000905060005b60038054905081101561380f5760008061370c600384815481106136dc576136db61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610914565b91509150600b6000600385815481106137285761372761524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600a6137d891906153dc565b836137e39190615456565b6137ed9190615487565b846137f891906154e1565b93505050808061380790615537565b9150506136b5565b5080915050919050565b6000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116138e6576138e5600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083614926565b5b6000600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490500361393c5761393b600582614926565b5b5050565b60005b600580549050811015613d0b5760005b600e60006005848154811061396b5761396a61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015613cf7576032600a6000600e6000600587815481106139f9576139f861524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110613a7057613a6f61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060058581548110613aeb57613aea61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613b5b9190615456565b600a6000600e600060058781548110613b7757613b7661524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110613bee57613bed61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060058581548110613c6957613c6861524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613cdd91906154e1565b925050819055508080613cef90615537565b915050613953565b508080613d0390615537565b915050613943565b50565b60005b6004805490508110156140d95760005b600d600060048481548110613d3957613d3861524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156140c557606460096000600d600060048781548110613dc757613dc661524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110613e3e57613e3d61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060048581548110613eb957613eb861524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613f299190615456565b60096000600d600060048781548110613f4557613f4461524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110613fbc57613fbb61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600485815481106140375761403661524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546140ab91906154e1565b9250508190555080806140bd90615537565b915050613d21565b5080806140d190615537565b915050613d11565b50565b60006140e78361362b565b90506000806140f586610914565b91509150600081600a61410891906153dc565b836141139190615456565b8561411e9190615487565b90508381111561415a576040517f47820a6500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050565b6000600580549050036141d8576005819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506142e4565b60006001905060005b600580549050811015614277578273ffffffffffffffffffffffffffffffffffffffff16600582815481106142195761421861524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361426457600091505b808061426f90615537565b9150506141e1565b5080156142e2576005829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505b50565b600082805490500361435a5781819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550614463565b60006001905060005b83805490508110156143f7578273ffffffffffffffffffffffffffffffffffffffff168482815481106143995761439861524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036143e457600091505b80806143ef90615537565b915050614363565b5080156144615782829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505b5050565b61446f614aad565b73ffffffffffffffffffffffffffffffffffffffff1661448d611a12565b73ffffffffffffffffffffffffffffffffffffffff16146144e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016144da906158a1565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060048054905003614620576004819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061472c565b60006001905060005b6004805490508110156146bf578273ffffffffffffffffffffffffffffffffffffffff16600482815481106146615761466061524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036146ac57600091505b80806146b790615537565b915050614629565b50801561472a576004829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505b50565b600061473a836136ab565b60506147458561272d565b60646147519190615487565b61475b9190615456565b61476591906154e1565b61476e84610ee7565b614778919061568c565b905060008061478686610914565b91509150600081600a61479991906153dc565b836147a49190615456565b856147af9190615487565b9050838111156147f657846040517f15e5f1b60000000000000000000000000000000000000000000000000000000081526004016147ed9190614c76565b60405180910390fd5b50505050505050565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116148cc576148cb600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083614926565b5b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490500361492257614921600482614926565b5b5050565b60005b8280549050811015614aa8578173ffffffffffffffffffffffffffffffffffffffff1683828154811061495f5761495e61524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603614a955782600184805490506149b7919061568c565b815481106149c8576149c761524b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838281548110614a0657614a0561524b565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082805480614a5f57614a5e6158c1565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b8080614aa090615537565b915050614929565b505050565b600033905090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000614b0c82614ae1565b9050919050565b614b1c81614b01565b82525050565b6000614b2e8383614b13565b60208301905092915050565b6000602082019050919050565b6000614b5282614ab5565b614b5c8185614ac0565b9350614b6783614ad1565b8060005b83811015614b98578151614b7f8882614b22565b9750614b8a83614b3a565b925050600181019050614b6b565b5085935050505092915050565b60006020820190508181036000830152614bbf8184614b47565b905092915050565b6000604051905090565b600080fd5b600080fd5b614be481614b01565b8114614bef57600080fd5b50565b600081359050614c0181614bdb565b92915050565b600060208284031215614c1d57614c1c614bd1565b5b6000614c2b84828501614bf2565b91505092915050565b6000819050919050565b614c4781614c34565b82525050565b6000604082019050614c626000830185614c3e565b614c6f6020830184614c3e565b9392505050565b6000602082019050614c8b6000830184614c3e565b92915050565b614c9a81614c34565b8114614ca557600080fd5b50565b600081359050614cb781614c91565b92915050565b60008060408385031215614cd457614cd3614bd1565b5b6000614ce285828601614bf2565b9250506020614cf385828601614ca8565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f840112614d2257614d21614cfd565b5b8235905067ffffffffffffffff811115614d3f57614d3e614d02565b5b602083019150836001820283011115614d5b57614d5a614d07565b5b9250929050565b60008060208385031215614d7957614d78614bd1565b5b600083013567ffffffffffffffff811115614d9757614d96614bd6565b5b614da385828601614d0c565b92509250509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b614dfd82614db4565b810181811067ffffffffffffffff82111715614e1c57614e1b614dc5565b5b80604052505050565b6000614e2f614bc7565b9050614e3b8282614df4565b919050565b600067ffffffffffffffff821115614e5b57614e5a614dc5565b5b614e6482614db4565b9050602081019050919050565b82818337600083830152505050565b6000614e93614e8e84614e40565b614e25565b905082815260208101848484011115614eaf57614eae614daf565b5b614eba848285614e71565b509392505050565b600082601f830112614ed757614ed6614cfd565b5b8135614ee7848260208601614e80565b91505092915050565b600060208284031215614f0657614f05614bd1565b5b600082013567ffffffffffffffff811115614f2457614f23614bd6565b5b614f3084828501614ec2565b91505092915050565b60008115159050919050565b614f4e81614f39565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015614f8e578082015181840152602081019050614f73565b83811115614f9d576000848401525b50505050565b6000614fae82614f54565b614fb88185614f5f565b9350614fc8818560208601614f70565b614fd181614db4565b840191505092915050565b6000604082019050614ff16000830185614f45565b81810360208301526150038184614fa3565b90509392505050565b61501581614b01565b82525050565b6000602082019050615030600083018461500c565b92915050565b6000806040838503121561504d5761504c614bd1565b5b600061505b85828601614bf2565b925050602061506c85828601614bf2565b9150509250929050565b600080600080608085870312156150905761508f614bd1565b5b600061509e87828801614bf2565b94505060206150af87828801614bf2565b93505060406150c087828801614bf2565b92505060606150d187828801614ca8565b91505092959194509250565b600069ffffffffffffffffffff82169050919050565b6150fc816150dd565b811461510757600080fd5b50565b600081519050615119816150f3565b92915050565b6000819050919050565b6151328161511f565b811461513d57600080fd5b50565b60008151905061514f81615129565b92915050565b60008151905061516481614c91565b92915050565b600080600080600060a0868803121561518657615185614bd1565b5b60006151948882890161510a565b95505060206151a588828901615140565b94505060406151b688828901615155565b93505060606151c788828901615155565b92505060806151d88882890161510a565b9150509295509295909350565b600060ff82169050919050565b6151fb816151e5565b811461520657600080fd5b50565b600081519050615218816151f2565b92915050565b60006020828403121561523457615233614bd1565b5b600061524284828501615209565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115615300578086048111156152dc576152db61527a565b5b60018516156152eb5780820291505b80810290506152f9856152a9565b94506152c0565b94509492505050565b60008261531957600190506153d5565b8161532757600090506153d5565b816001811461533d576002811461534757615376565b60019150506153d5565b60ff8411156153595761535861527a565b5b8360020a9150848211156153705761536f61527a565b5b506153d5565b5060208310610133831016604e8410600b84101617156153ab5782820a9050838111156153a6576153a561527a565b5b6153d5565b6153b884848460016152b6565b925090508184048111156153cf576153ce61527a565b5b81810290505b9392505050565b60006153e782614c34565b91506153f283614c34565b925061541f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484615309565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061546182614c34565b915061546c83614c34565b92508261547c5761547b615427565b5b828204905092915050565b600061549282614c34565b915061549d83614c34565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156154d6576154d561527a565b5b828202905092915050565b60006154ec82614c34565b91506154f783614c34565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561552c5761552b61527a565b5b828201905092915050565b600061554282614c34565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036155745761557361527a565b5b600182019050919050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006155c6601f8361557f565b91506155d182615590565b602082019050919050565b600060208201905081810360008301526155f5816155b9565b9050919050565b6000606082019050615611600083018661500c565b61561e602083018561500c565b61562b6040830184614c3e565b949350505050565b61563c81614f39565b811461564757600080fd5b50565b60008151905061565981615633565b92915050565b60006020828403121561567557615674614bd1565b5b60006156838482850161564a565b91505092915050565b600061569782614c34565b91506156a283614c34565b9250828210156156b5576156b461527a565b5b828203905092915050565b60006040820190506156d5600083018561500c565b6156e26020830184614c3e565b9392505050565b7f6e6f74206f6e6c79416c6c6f776564436f6e7472616374730000000000000000600082015250565b600061571f60188361557f565b915061572a826156e9565b602082019050919050565b6000602082019050818103600083015261574e81615712565b9050919050565b6000819050919050565b6000819050919050565b600061578461577f61577a84615755565b61575f565b614c34565b9050919050565b61579481615769565b82525050565b60006040820190506157af600083018561500c565b6157bc602083018461578b565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061581f60268361557f565b915061582a826157c3565b604082019050919050565b6000602082019050818103600083015261584e81615812565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061588b60208361557f565b915061589682615855565b602082019050919050565b600060208201905081810360008301526158ba8161587e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220df818e3a0f7e475dc43cb1c2169be27241dd53a47bd2ea60603170207971877764736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Main  Functions   ///"
      },
      "getTokenTotalSupply(address)": {
        "notice": "getter functions   ///"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 227,
        "contract": "contracts/Stark.sol:Stark",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 111,
        "contract": "contracts/Stark.sol:Stark",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 400,
        "contract": "contracts/Stark.sol:Stark",
        "label": "deployer",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 403,
        "contract": "contracts/Stark.sol:Stark",
        "label": "s_allowedTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 406,
        "contract": "contracts/Stark.sol:Stark",
        "label": "s_suppliers",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 409,
        "contract": "contracts/Stark.sol:Stark",
        "label": "s_borrowers",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 412,
        "contract": "contracts/Stark.sol:Stark",
        "label": "s_allowedContracts",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 416,
        "contract": "contracts/Stark.sol:Stark",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 460,
        "contract": "contracts/Stark.sol:Stark",
        "label": "s_totalSupply",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 466,
        "contract": "contracts/Stark.sol:Stark",
        "label": "s_supplyBalances",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 472,
        "contract": "contracts/Stark.sol:Stark",
        "label": "s_borrowedBalances",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 478,
        "contract": "contracts/Stark.sol:Stark",
        "label": "s_lockedBalances",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 483,
        "contract": "contracts/Stark.sol:Stark",
        "label": "s_priceFeeds",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_contract(AggregatorV3Interface)84)"
      },
      {
        "astId": 488,
        "contract": "contracts/Stark.sol:Stark",
        "label": "s_supplierUniqueTokens",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 493,
        "contract": "contracts/Stark.sol:Stark",
        "label": "s_borrowerUniqueTokens",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 499,
        "contract": "contracts/Stark.sol:Stark",
        "label": "s_guarantys",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2357,
        "contract": "contracts/Stark.sol:Stark",
        "label": "s_allowedBalances",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)84": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_contract(AggregatorV3Interface)84)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract AggregatorV3Interface)",
        "numberOfBytes": "32",
        "value": "t_contract(AggregatorV3Interface)84"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}