{
  "language": "Solidity",
  "sources": {
    "contracts/CreditLogic.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"./p2p/Deal.sol\";\nimport \"./interfaces/IStark.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract CreditLogic is Context, Ownable {\n    // deal_contract private dealContract;\n    Istark_protocol starkContract;\n    address private starkProtocolAddress;\n    address[] private borrowers;\n\n    function setStarkAddress(address _starkProtocolAddress) external onlyOwner {\n        starkContract = Istark_protocol(_starkProtocolAddress);\n        starkProtocolAddress = _starkProtocolAddress;\n    }\n\n    // struct P2PRequest {\n    //     address borrower; // * Address of the borrower\n    //     address lender; // * Address of the Lender\n    //     address dealAddress; // * Address of the Deal Contract\n    //     address tokenAddress;\n    //     uint256 instalmentAmount; //* Amount to be paid in each instalment\n    //     uint256 totalAmount; // * Total Amount borrowed\n    //     uint256 interestRate; // * Interest Rate by the Lender\n    //     uint16 noOfInstalments; // * No of Instalments\n    //     bool requestAccepted; // * Request Raised by the lender accepted or not\n    // }\n\n    struct GuarantyRequest {\n        address borrower; // * Address of the borrower\n        address lender; // * Address of the Lender\n        address dealAddress;\n        address tokenAddress;\n        uint256 totalAmount; // * Amount looking for the guaranty\n        uint256 timeRentedUntil;\n        bool requestAccepted; // * Request Raised by the lender accepted or not\n    }\n\n    // * To store all the GuarantyRequest made in the protocol\n    // guarantyRequests[_lender][_borrower]\n    mapping(address => mapping(address => GuarantyRequest)) private guarantyRequests;\n\n    // * To store all the p2pRequests made in the protocol\n    // lender & borrower -> request\n    // mapping(address => mapping(address => P2PRequest)) private p2pRequests;\n\n    ///////////////////////\n    //// p2p functions ///\n    //////////////////////\n\n    // * FUNCTION: To deploy the Deal Contract\n    // function p2pDeploy(address _lender, address _borrower) internal {\n    //     P2PRequest memory requestDetails = p2pRequests[_lender][_borrower];\n\n    //     dealContract = new deal_contract(\n    //         requestDetails.borrower,\n    //         requestDetails.lender,\n    //         starkProtocolAddress,\n    //         requestDetails.tokenAddress,\n    //         requestDetails.instalmentAmount,\n    //         requestDetails.totalAmount,\n    //         requestDetails.interestRate,\n    //         requestDetails.noOfInstalments\n    //     );\n\n    //     p2pRequests[requestDetails.lender][requestDetails.borrower].dealAddress = address(\n    //         dealContract\n    //     );\n\n    //     starkContract.addAllowContracts(address(dealContract));\n\n    //     // emit Event to notify both lender and borrower\n    // }\n\n    // // * FUNCTION: To raise the P2PRequest to borrow\n    // function p2pRaiseRequest(\n    //     uint256 _instalmentAmount,\n    //     uint256 _totalAmount,\n    //     uint256 _interestRate,\n    //     uint16 _noOfInstalments,\n    //     address _lender,\n    //     address _tokenAddress\n    // ) external {\n    //     require(!p2pRequests[_lender][_msgSender()].requestAccepted, \"ERR:RA\"); // RA => Request Accepted\n\n    //     P2PRequest memory requestDetails;\n\n    //     requestDetails.borrower = _msgSender();\n    //     requestDetails.lender = _lender;\n    //     requestDetails.instalmentAmount = _instalmentAmount;\n    //     requestDetails.totalAmount = _totalAmount;\n    //     requestDetails.interestRate = _interestRate;\n    //     requestDetails.noOfInstalments = _noOfInstalments;\n    //     requestDetails.tokenAddress = _tokenAddress;\n\n    //     p2pRequests[_lender][_msgSender()] = requestDetails;\n\n    //     // emit event to notify lender\n    // }\n\n    // // * FUNCTION: To accept the P2PRequest made by the borrower\n    // function p2pAcceptRequest(address _borrower) external payable {\n    //     P2PRequest memory requestDetails = p2pRequests[_msgSender()][_borrower];\n\n    //     require(!requestDetails.requestAccepted, \"ERR:AA\"); // AA =>Already Accepted\n    //     uint256 tokenAmountinProtocol = starkContract.getSupplyBalance(\n    //         requestDetails.tokenAddress,\n    //         _msgSender()\n    //     );\n    //     require(requestDetails.totalAmount <= tokenAmountinProtocol, \"ERR:NE\"); // NA => Not Enough Amount\n\n    //     starkContract.lockBalanceChanges(\n    //         requestDetails.tokenAddress,\n    //         _msgSender(),\n    //         _borrower,\n    //         requestDetails.totalAmount\n    //     );\n\n    //     p2pRequests[_msgSender()][_borrower].requestAccepted = true;\n\n    //     p2pDeploy(_msgSender(), _borrower);\n\n    //     // emit event to notify borrower\n    // }\n\n    ////////////////////////////\n    ///// guaranty functions ///\n    ////////////////////////////\n\n    // * FUNCTION: To raise the request for backing the loan from the protocol\n    function guarantyRaiseRequest(\n        address _lender,\n        address _tokenAddress,\n        uint256 _totalAmount,\n        uint256 _timeRentedUntil\n    ) external {\n        require(!guarantyRequests[_lender][_msgSender()].requestAccepted, \"Err: Already Raised\");\n\n        GuarantyRequest memory requestDetails;\n        requestDetails.borrower = _msgSender();\n        requestDetails.lender = _lender;\n        requestDetails.totalAmount = _totalAmount;\n        requestDetails.timeRentedUntil = _timeRentedUntil;\n        requestDetails.tokenAddress = _tokenAddress;\n        borrowers.push(_msgSender());\n\n        guarantyRequests[_lender][_msgSender()] = requestDetails;\n        // emit event to notify lender\n    }\n\n    // * FUNCTION: To accept the GuarantyRequest made by the borrower\n    function guarantyAcceptRequest(address _borrower) external {\n        GuarantyRequest memory requestDetails = guarantyRequests[_msgSender()][_borrower];\n\n        require(!requestDetails.requestAccepted, \"ERR: Already Accepted\"); // AA =>Already Accepted\n\n        uint256 tokenAmountinProtocol = starkContract.getSupplyBalance(\n            requestDetails.tokenAddress,\n            _msgSender()\n        );\n\n        require(requestDetails.totalAmount <= tokenAmountinProtocol, \"ERR: Not Enough Amount\"); // NA => Not Enough Amount\n\n        starkContract.lockBalanceChanges(\n            requestDetails.tokenAddress,\n            _msgSender(),\n            _borrower,\n            requestDetails.totalAmount\n        );\n\n        guarantyRequests[_msgSender()][_borrower].requestAccepted = true;\n        // emit event to notify borrower\n    }\n\n    //////////////////////////\n    ///// getter functions ///\n    /////////////////////////\n\n    // * FUNCTION: To get the p2pRequests made by a particualr address\n    // function getP2PRequest(address _lender, address _borrower)\n    //     external\n    //     view\n    //     returns (P2PRequest memory)\n    // {\n    //     return p2pRequests[_lender][_borrower];\n    // }\n\n    // * FUNCTION: To get the p2pRequests made by a particualr address\n    function getGuarantyRequest(address _lender, address _borrower)\n        external\n        view\n        returns (GuarantyRequest memory)\n    {\n        return guarantyRequests[_lender][_borrower];\n    }\n\n    function getBorrowers() external view returns (address[] memory) {\n        return borrowers;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/p2p/Deal.sol": {
      "content": "// //SPDX-License-Identifier: Unlicense\n// pragma solidity 0.8.15;\n\n// import \"@openzeppelin/contracts/utils/Context.sol\";\n// import \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n// import \"../interfaces/IStark.sol\";\n\n// contract deal_contract is Context {\n//     using SafeMath for uint256;\n\n//     address private deployer;\n//     address private borrower;\n//     address private lender;\n\n//     Istark_protocol starkContract;\n\n//     struct DealDetials {\n//         address tokenAddress;\n//         uint256 totalAmount; // * Total amount borrowed by the borrower\n//         uint256 totalAmountToPay; // * Total amount including interest left to be paid\n//         uint256 amountPaidTotal; // * Amount paid by the borrower in total\n//         uint256 instalmentAmt; // * Amount to be paid per insalment\n//         uint256 timeRentedSince; // * Time when the deal started\n//         uint256 interestRate; // * Interest rate decided by the lender.\n//         uint256 addedInterestRate; // * Additional Interest Rate for additional no. of instalments.\n//         uint16 noOfInstalments; // * No of instalments in which borrower will pay amount\n//         bool addedInstalments; // * If borrower got more instalments after request.\n//     }\n\n//     DealDetials private deal;\n\n//     struct AdditionalRequest {\n//         uint16 noOfInstalments; // * No of additional instalments\n//         uint256 interestRate; // * Interest Rate\n//         bool isAccepted; // * Request Accepted or Not\n//     }\n\n//     mapping(address => AdditionalRequest) additionRequest;\n\n//     constructor(\n//         address _borrower,\n//         address _lender,\n//         address _starkAddress,\n//         address _tokenAddress,\n//         uint256 _instalmentAmount,\n//         uint256 _totalAmount,\n//         uint256 _interestRate,\n//         uint16 _noOfInstalments\n//     ) {\n//         deployer = _msgSender();\n//         borrower = _borrower;\n//         lender = _lender;\n//         starkContract = Istark_protocol(_starkAddress);\n\n//         DealDetials storage dealDetails = deal;\n\n//         dealDetails.noOfInstalments = _noOfInstalments;\n//         dealDetails.totalAmount = _totalAmount;\n//         dealDetails.interestRate = _interestRate;\n//         dealDetails.timeRentedSince = uint256(block.timestamp);\n//         dealDetails.instalmentAmt = getInstalmentAmount(_instalmentAmount);\n//         dealDetails.totalAmountToPay = _totalAmount + dealDetails.instalmentAmt;\n//         dealDetails.tokenAddress = _tokenAddress;\n//     }\n\n//     modifier onlyBorrower() {\n//         require(msg.sender == borrower, \"ERR:BO\"); // BO => Borrower only\n//         _;\n//     }\n\n//     modifier onlyLender() {\n//         require(msg.sender == lender, \"ERR:LO\"); // BL => Lender only\n//         _;\n//     }\n\n//     // * FUNCTION: To get the address of the borrower.\n//     function getBorrower() public view returns (address) {\n//         return borrower;\n//     }\n\n//     // * FUNCTION: To get the address of the lender.\n//     function getLender() public view returns (address) {\n//         return lender;\n//     }\n\n//     // * FUNCTION: To get the detials of the Deal.\n//     function getDealDetails() public view returns (DealDetials memory) {\n//         return deal;\n//     }\n\n//     // * FUNCTION: To get the Instalment Amount\n//     function getInstalmentAmount(uint256 _instalmentAmount) public view returns (uint256) {\n//         DealDetials memory dealDetails = deal;\n//         uint256 interestAmount = (_instalmentAmount * dealDetails.interestRate).div(\n//             uint256(dealDetails.noOfInstalments  * 100)\n//         );\n\n//         uint256 instalmentAmount = _instalmentAmount + interestAmount;\n//         return instalmentAmount;\n//     }\n\n//     // * FUNCTION: To get the number of instalments\n//     function getNoOfInstalments() public view returns (uint16) {\n//         return deal.noOfInstalments;\n//     }\n\n//     // * FUNCTION: To get the total amount owed\n//     function getTotalAmountOwed() public view returns (uint256) {\n//         return deal.totalAmount;\n//     }\n\n//     // * FUNCTION: To get the amount left to be paid\n//     function getTotalAmountLeft() public view returns (uint256) {\n//         return deal.totalAmountToPay;\n//     }\n\n//     // * FUNCTION: To get the interest rate\n//     function getInterestRate() public view returns (uint256) {\n//         return deal.interestRate;\n//     }\n\n//     // * FUNCTION: Pay the amount left at once\n//     function payAtOnce() external onlyBorrower {\n//         DealDetials memory dealDetails = deal;\n//         require(dealDetails.noOfInstalments > 0, \"ERR:NM\"); // NM => No more installments\n//         require(dealDetails.amountPaidTotal < dealDetails.totalAmount, \"ERR:NM\"); // NM => No more installments\n\n//         // uint256 value = msg.value;\n//         uint256 amountLeftToPay = getTotalAmountLeft();\n//         // require(value == amountLeftToPay, \"ERR:WV\"); // WV => Wrong value\n\n//         starkContract.repayChanges(dealDetails.tokenAddress, lender, borrower, amountLeftToPay);\n\n//         deal.amountPaidTotal += amountLeftToPay;\n//         deal.totalAmountToPay -= amountLeftToPay;\n//     }\n\n//     // * FUNCTION: Pay the pre-defined amount in instalments not necessarily periodically.\n//     function payInInstalment() external payable onlyBorrower {\n//         DealDetials memory dealDetails = deal;\n\n//         require(dealDetails.noOfInstalments > 0, \"ERR:NM\"); // NM => No more installments\n//         require(dealDetails.amountPaidTotal < dealDetails.totalAmount, \"ERR:NM\"); // NM => No more installments\n\n//         // * amtToLenderOnly: Amount with standard interest\n//         uint256 amtToLenderOnly = dealDetails.instalmentAmt;\n\n//         if (dealDetails.addedInstalments) {\n//             // * totalInterestedAmount: Amount after additional interest is added\n//             uint256 totalInterestedAmount = amtToLenderOnly +\n//                 (dealDetails.addedInterestRate * dealDetails.instalmentAmt);\n\n//             // require(value == totalInterestedAmount, \"ERR:WV\"); // WV => Wrong value\n\n//             // * amtToLender: Amount after with 95% of additional interest is added\n//             uint256 amtToLender = amtToLenderOnly +\n//                 (dealDetails.instalmentAmt * dealDetails.addedInterestRate * 95 * 10**16);\n\n//             // * amtToProtocol: Amount after with 5% of additional interest is added\n//             uint256 amtToProtocol = dealDetails.instalmentAmt *\n//                 dealDetails.addedInterestRate *\n//                 5 *\n//                 10**16;\n\n//             // (bool successInLender, ) = lender.call{value: amtToLender}(\"\");\n//             // require(successInLender, \"ERR:OT\"); //OT => On Transfer\n\n//             starkContract.repayChanges(dealDetails.tokenAddress, lender, borrower, amtToLender);\n\n//             // (bool successInBorrower, ) = deployer.call{value: amtToProtocol}(\"\");\n//             // require(successInBorrower, \"ERR:OT\"); //OT => On Transfer\n//             deal.amountPaidTotal += amtToLender;\n//             deal.totalAmountToPay -= amtToLender;\n//             //! TODO: Function to pass the value to the protocol\n//         } else {\n//             starkContract.repayChanges(\n//                 dealDetails.tokenAddress,\n//                 lender,\n//                 borrower,\n//                 amtToLenderOnly\n//             );\n\n//             deal.amountPaidTotal += amtToLenderOnly;\n//             deal.totalAmountToPay -= amtToLenderOnly;\n//         }\n//         --deal.noOfInstalments;\n//     }\n\n//     // * FUNCTION: Request the Lender for more instalments\n//     function requestNoOfInstalment(uint16 noOfAddInstalments, uint256 _interestRate)\n//         external\n//         onlyBorrower\n//     {\n//         require(noOfAddInstalments >= 3, \"ERR:MR\"); // MR => Minimum required no of instalments\n\n//         additionRequest[_msgSender()] = AdditionalRequest(\n//             noOfAddInstalments,\n//             _interestRate,\n//             false\n//         );\n\n//         // emit event\n//     }\n\n//     // * FUNCTION: Accept the request made the Lender for more instalments\n//     function acceptRequestOfInstalment(\n//         address _borrower,\n//         uint16 _noOfAddInstalments,\n//         uint256 _interestRate\n//     ) external onlyLender {\n//         require(!additionRequest[_borrower].isAccepted, \"ERR:AA\"); // AA => Already Accepted\n\n//         additionRequest[_borrower].isAccepted = true;\n\n//         deal.noOfInstalments += _noOfAddInstalments;\n//         deal.addedInterestRate = _interestRate;\n//         deal.addedInstalments = true;\n//     }\n// }\n"
    },
    "contracts/interfaces/IStark.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\ninterface Istark_protocol {\n    function getSupplyBalance(address tokenAddress, address userAddress)\n        external\n        view\n        returns (uint256);\n\n    function getLockedBalance(address tokenAddress, address userAddress)\n        external\n        view\n        returns (uint256);\n\n    function lockBalanceChanges(\n        address _tokenAddress,\n        address _lender,\n        address _borrower,\n        uint256 _tokenAmount\n    ) external;\n\n    function addAllowContracts(address _contractAddress) external;\n\n    function repayChanges(\n        address _tokenAddress,\n        address _lender,\n        address _borrower,\n        uint256 _tokenAmount\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/Stark.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nerror Stark__NeedMoreThanZero(uint256 amount);\nerror Stark__NotSupplied();\nerror Stark__CannotWithdrawMoreThanSupplied(uint256 amount);\nerror Stark__CouldNotBorrowMoreThan80PercentOfCollateral();\nerror Stark__ThisTokenIsNotAvailable(address tokenAddress);\nerror Stark__NotAllowedBeforeRepayingExistingLoan(uint256 amount);\nerror Stark__TransactionFailed();\nerror Stark__SorryWeCurrentlyDoNotHaveThisToken(address tokenAddress);\nerror Stark__UpKeepNotNeeded();\n\ncontract Stark is ReentrancyGuard, KeeperCompatibleInterface, Ownable {\n    address private deployer;\n    address[] private s_allowedTokens; // * Array of allowed tokens\n    address[] private s_suppliers; // * Array of all suppliers\n    address[] private s_borrowers; // * Array of all borrowers\n    address[] private s_allowedContracts;\n    uint256 private immutable i_interval; // * Chainlink keepers Interval\n    uint256 private s_lastTimeStamp; // * Time stamp for chainlink keepers\n\n    //////////////////\n    //// Events /////\n    ////////////////\n\n    event TokenSupplied(\n        address indexed tokenAddress,\n        address indexed userAddress,\n        uint256 indexed amount\n    );\n    event TokenWithdrawn(\n        address indexed tokenAddress,\n        address indexed userAddress,\n        uint256 indexed amount\n    );\n    event TokenBorrowed(\n        address indexed tokenAddress,\n        address indexed userAddress,\n        uint256 indexed amount\n    );\n    event TokenRepaid(\n        address indexed tokenAddress,\n        address indexed userAddress,\n        uint256 indexed amount\n    );\n    event Guaranteed(\n        address indexed userAddress,\n        address indexed friendAddress,\n        bool indexed reponse\n    );\n\n    //////////////////////\n    /////  mappings  /////\n    /////////////////////\n\n    // token address -> total supply of that token\n    mapping(address => uint256) private s_totalSupply;\n\n    // tokenAddress & user address -> their supplied balances\n    mapping(address => mapping(address => uint256)) private s_supplyBalances;\n\n    // tokenAddress & user adddress -> their borrowed balance\n    mapping(address => mapping(address => uint256)) private s_borrowedBalances;\n\n    // tokenAddress & user adddress -> their locked balance\n    mapping(address => mapping(address => uint256)) private s_lockedBalances;\n\n    // token address -> price feeds\n    mapping(address => AggregatorV3Interface) private s_priceFeeds;\n\n    // userAddress -> all of his unique supplied tokens\n    mapping(address => address[]) private s_supplierUniqueTokens;\n\n    // userAddress -> all of his unique borrowed tokens\n    mapping(address => address[]) private s_borrowerUniqueTokens;\n\n    // userAddress & friend address => their guaranties\n    mapping(address => mapping(address => bool)) private s_guarantys;\n\n    // contractAddress -> permission to modify the data in this contract\n    // mapping(address => bool) private s_allowedContracts;\n\n    /////////////////////\n    ///   Modifiers   ///\n    /////////////////////\n\n    // * MODIFIER: check if user have supplied token or not\n    modifier hasSupplied() {\n        bool success;\n        for (uint256 i = 0; i < s_allowedTokens.length; i++) {\n            if (\n                s_supplyBalances[s_allowedTokens[i]][msg.sender] > 0 ||\n                s_allowedBalances[s_allowedTokens[i]][msg.sender] > 0\n            ) {\n                success = true;\n            }\n        }\n\n        if (!success) {\n            revert Stark__NotSupplied();\n        }\n        _;\n    }\n\n    // * MODIFIER: check value is more then 0\n    modifier notZero(uint256 amount) {\n        if (amount <= 0) {\n            revert Stark__NeedMoreThanZero(amount);\n        }\n        _;\n    }\n\n    // * MODIFIER: check is token allowed or not\n    modifier isTokenAllowed(address tokenAddress) {\n        bool execute;\n        for (uint256 i = 0; i < s_allowedTokens.length; i++) {\n            if (s_allowedTokens[i] == tokenAddress) {\n                execute = true;\n            }\n        }\n\n        if (!execute) {\n            revert Stark__ThisTokenIsNotAvailable(tokenAddress);\n        }\n        _;\n    }\n\n    // * MODIFIER: Check whether the contract address is allowed to modify values.\n    modifier onlyAllowedContracts(address _contractAddress) {\n        bool execute;\n        for (uint256 i = 0; i < s_allowedContracts.length; i++) {\n            if (s_allowedContracts[i] == _contractAddress) {\n                execute = true;\n            }\n        }\n        require(execute, \"not onlyAllowedContracts\");\n        _;\n    }\n\n    //////////////////////////\n    ///  Main  Functions   ///\n    /////////////////////////\n\n    constructor(\n        address[] memory allowedTokens,\n        address[] memory priceFeeds,\n        uint256 updateInterval\n    ) {\n        s_allowedTokens = allowedTokens;\n        for (uint256 i = 0; i < allowedTokens.length; i++) {\n            s_priceFeeds[allowedTokens[i]] = AggregatorV3Interface(priceFeeds[i]);\n        }\n        i_interval = updateInterval;\n        s_lastTimeStamp = block.timestamp;\n        s_allowedContracts.push(msg.sender);\n    }\n\n    // * FUNCTION: Users can supply tokens\n    function supply(address tokenAddress, uint256 amount)\n        external\n        payable\n        isTokenAllowed(tokenAddress)\n        notZero(amount)\n        nonReentrant\n    {\n        bool success = IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount);\n        if (!success) {\n            revert Stark__TransactionFailed();\n        }\n        s_totalSupply[tokenAddress] += amount;\n        s_supplyBalances[tokenAddress][msg.sender] += amount;\n        addSupplier(msg.sender); // adds supplier in s_suppliers array\n        addUniqueToken(s_supplierUniqueTokens[msg.sender], tokenAddress); // adding token address to their unique tokens array (check this function in helper functions sections)\n        // s_supplierUniqueTokens[msg.sender] -> mapping\n        emit TokenSupplied(tokenAddress, msg.sender, amount);\n    }\n\n    // * FUNCTION: Users can withdraw their supplied tokens\n    function withdraw(address tokenAddress, uint256 amount)\n        external\n        payable\n        hasSupplied\n        notZero(amount)\n        nonReentrant\n    {\n        if (amount > s_supplyBalances[tokenAddress][msg.sender]) {\n            revert Stark__CannotWithdrawMoreThanSupplied(amount);\n        }\n\n        revertIfHighBorrowing(tokenAddress, msg.sender, amount); // not allows to withdraw if borrowing is already high\n        s_supplyBalances[tokenAddress][msg.sender] -= amount;\n        s_totalSupply[tokenAddress] -= amount;\n        removeSupplierAndUniqueToken(tokenAddress, msg.sender); // removes supplier and his unique token\n        IERC20(tokenAddress).transfer(msg.sender, amount);\n        emit TokenWithdrawn(tokenAddress, msg.sender, amount);\n    }\n\n    // * FUNCTION: Users can borrow based on their supplies\n    function borrow(address tokenAddress, uint256 amount)\n        external\n        payable\n        isTokenAllowed(tokenAddress)\n        hasSupplied\n        notZero(amount)\n        nonReentrant\n    {\n        if (s_totalSupply[tokenAddress] <= 0) {\n            // reverts if we don't have supply of that token\n            revert Stark__SorryWeCurrentlyDoNotHaveThisToken(tokenAddress);\n        }\n\n        notMoreThanMaxBorrow(tokenAddress, msg.sender, amount); // not allows to borrow if asking more than their max borrow\n        addBorrower(msg.sender); // adds borrower in s_borrowers array\n        addUniqueToken(s_borrowerUniqueTokens[msg.sender], tokenAddress);\n        s_borrowedBalances[tokenAddress][msg.sender] += amount;\n        s_totalSupply[tokenAddress] -= amount;\n        IERC20(tokenAddress).transfer(msg.sender, amount);\n        emit TokenBorrowed(tokenAddress, msg.sender, amount);\n    }\n\n    // * FUNCTION: To repay the loan\n    function repay(address tokenAddress, uint256 amount)\n        external\n        payable\n        notZero(amount)\n        nonReentrant\n    {\n        bool success = IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount);\n        if (!success) {\n            revert Stark__TransactionFailed();\n        }\n\n        s_borrowedBalances[tokenAddress][msg.sender] -= amount;\n        s_totalSupply[tokenAddress] += amount;\n        removeBorrowerAndUniqueToken(tokenAddress, msg.sender); // removes borrower and his unique token from array\n        emit TokenRepaid(tokenAddress, msg.sender, amount);\n    }\n\n    // * FUNCTION: For liquidation\n    function liquidation() external onlyOwner {\n        for (uint256 i = 0; i < s_borrowers.length; i++) {\n            if (getTotalBorrowValue(s_borrowers[i]) >= getTotalSupplyValue(s_borrowers[i])) {\n                // * Checking if total borrow value is equal or greater than total supply value in USD\n                for (uint256 index = 0; index < s_allowedTokens.length; index++) {\n                    s_supplyBalances[s_allowedTokens[index]][s_borrowers[i]] = 0;\n                    s_borrowedBalances[s_allowedTokens[index]][s_borrowers[i]] = 0; // reducing their borrowed balance & supply balance to 0\n                }\n            }\n        }\n    }\n\n    // * FUNCTION: To allow guaranty requests to be sent\n    function allowGuaranty(address friendAddress) external {\n        s_guarantys[msg.sender][friendAddress] = true;\n        emit Guaranteed(msg.sender, friendAddress, true);\n    }\n\n    // * FUNCTION: To disallow guaranty requests to be sent\n    function disAllowGuaranty(address friendAddress) external {\n        s_guarantys[msg.sender][friendAddress] = false;\n        emit Guaranteed(msg.sender, friendAddress, false);\n    }\n\n    // PS: change the name guaranty to something else if you don't like\n\n    // function noCollateralBorrow(address friendAddress) external {\n    //     // use table land to store data of all users who have guaranty\n    //     // then use query to read data to find if this msg.sender have guantees or if have then\n    //     // take allower address and borrower address from table and update their balance accordingly\n    //     hasGuaranty();\n    // }\n\n    // function hasGuaranty() public {\n    //     // read from database and check if allowed\n    // }\n\n    // * FUNCTION: TO charge APY on borrowings\n    function chargeAPY() private {\n        for (uint256 i = 0; i < s_borrowers.length; i++) {\n            // looping borrowers array\n            for (\n                uint256 index = 0;\n                index < s_borrowerUniqueTokens[s_borrowers[i]].length; // using borrower unique tokens to loop, so we don't need to loop every token\n                // s_borrowers[i] => current borrower\n                // s_borrowerUniqueTokens[s_borrowers[i]] => his all unique tokens\n                index++\n            ) {\n                s_borrowedBalances[s_borrowerUniqueTokens[s_borrowers[i]][index]][ // s_borrowedBalances[tokenAddress][userAddress] => thier borrowed balance\n                    s_borrowers[i]\n                    // s_borrowerUniqueTokens[s_borrowers[i]] => borrower's all unique tokens\n                    // s_borrowerUniqueTokens[s_borrowers[i]][index] => tokenAddress (from unique tokens)\n                ] += (\n                    (s_borrowedBalances[s_borrowerUniqueTokens[s_borrowers[i]][index]][\n                        s_borrowers[i]\n                    ] / uint256(50)) // adding 2 % to their borrowed balance (in s_borrowedBalances)\n                );\n            }\n        }\n    }\n\n    // * FUNCTION: TO reward APY on suppliers\n    function rewardAPY() private {\n        for (uint256 i = 0; i < s_suppliers.length; i++) {\n            // looping suppleirs array\n            for (\n                uint256 index = 0;\n                index < s_supplierUniqueTokens[s_suppliers[i]].length; // using supplier unique tokens to loop, so we don't need to loop every token\n                // s_suppliers[i] => current supplier\n                // s_supplierUniqueTokens[s_suppliers[i]] => his all unique tokens\n                index++\n            ) {\n                s_supplyBalances[s_supplierUniqueTokens[s_suppliers[i]][index]][\n                    s_suppliers[i]\n                    // s_supplierUniqueTokens[s_suppliers[i]] => supplier's all unique tokens\n                    // s_supplierUniqueTokens[s_suppliers[i]][index] => tokenAddress (from unique tokens)\n                ] += (s_supplyBalances[s_supplierUniqueTokens[s_suppliers[i]][index]][\n                    s_suppliers[i]\n                ] / uint256(100)); // adding 2 % to their borrowed balance (in s_borrowedBalances)\n            }\n        }\n    }\n\n    // * FUNCTION: checkUpkeep function from chainlink keepers\n    /* returns true if\n     * have atleast 1 borrower/supplier\n     * time has passed\n     */\n    function checkUpkeep(\n        bytes memory /* checkData */\n    )\n        public\n        view\n        override\n        returns (\n            bool upkeepNeeded,\n            bytes memory /* performData */\n        )\n    {\n        bool hasUsers = (s_borrowers.length > 0) || (s_suppliers.length > 0);\n        bool isTimePassed = (block.timestamp - s_lastTimeStamp) > i_interval;\n        upkeepNeeded = (hasUsers && isTimePassed);\n        return (upkeepNeeded, \"0x0\");\n    }\n\n    // * FUNCTION: performUpkeep function from chainlink keepers\n    function performUpkeep(\n        bytes calldata /* performData */\n    ) external override {\n        (bool upkeepNeeded, ) = checkUpkeep(\"\");\n\n        if (!upkeepNeeded) {\n            revert Stark__UpKeepNotNeeded();\n        }\n\n        if (s_borrowers.length > 0) {\n            chargeAPY();\n        }\n\n        if (s_suppliers.length > 0) {\n            rewardAPY();\n        }\n\n        s_lastTimeStamp = block.timestamp;\n    }\n\n    // * FUNCTION: so people can also take some test tokens\n    function faucet(address tokenAddress) external {\n        IERC20(tokenAddress).transfer(msg.sender, 10000 * 10**18);\n    }\n\n    ////////////////////////\n    // Helper functions ////\n    ///////////////////////\n\n    // * FUNCTION: To not allow to withdraw if borrowing is already high\n    function revertIfHighBorrowing(\n        address tokenAddress,\n        address userAddress,\n        uint256 amount\n    ) private view {\n        uint256 availableAmountValue = (getTotalSupplyValue(userAddress)) -\n            (((uint256(100) * getTotalBorrowValue(userAddress)) / uint256(80)) +\n                getTotalLockedValue(userAddress));\n\n        (uint256 price, uint256 decimals) = getLatestPrice(tokenAddress);\n        uint256 askedAmountValue = amount * (price / 10**decimals);\n\n        if (askedAmountValue > availableAmountValue) {\n            revert Stark__NotAllowedBeforeRepayingExistingLoan(amount);\n        }\n    }\n\n    // * FUNCTION: To not allow to borrow if asking more than their max borrow\n    function notMoreThanMaxBorrow(\n        address tokenAddress,\n        address userAddress,\n        uint256 amount\n    ) private view {\n        uint256 maxBorrow = getMaxBorrow(userAddress); // max borrow in usd\n        (uint256 price, uint256 decimals) = getLatestPrice(tokenAddress);\n        uint256 askedAmountValue = amount * (price / 10**decimals);\n\n        if (askedAmountValue > maxBorrow) {\n            revert Stark__CouldNotBorrowMoreThan80PercentOfCollateral();\n        }\n    }\n\n    // * FUNCTION: To add tokenAddress in their unique token array\n    // * in its first arg it takes a array so it can be used for borrower & supplier unique token\n    function addUniqueToken(address[] storage uniqueTokenArray, address tokenAddress) private {\n        if (uniqueTokenArray.length == 0) {\n            uniqueTokenArray.push(tokenAddress);\n        } else {\n            bool add = true;\n            for (uint256 i = 0; i < uniqueTokenArray.length; i++) {\n                if (uniqueTokenArray[i] == tokenAddress) {\n                    add = false;\n                }\n            }\n            if (add) {\n                uniqueTokenArray.push(tokenAddress);\n            }\n        }\n    }\n\n    // * FUNCTION: To add supplier in s_suppliers array\n    function addSupplier(address userAddress) private {\n        if (s_suppliers.length == 0) {\n            s_suppliers.push(userAddress);\n        } else {\n            bool add = true;\n            for (uint256 i = 0; i < s_suppliers.length; i++) {\n                if (s_suppliers[i] == userAddress) {\n                    add = false;\n                }\n            }\n            if (add) {\n                s_suppliers.push(userAddress);\n            }\n        }\n    }\n\n    // * FUNCTION: To add supplier in s_suppliers array\n    function addBorrower(address userAddress) private {\n        if (s_borrowers.length == 0) {\n            s_borrowers.push(userAddress);\n        } else {\n            bool add = true;\n            for (uint256 i = 0; i < s_borrowers.length; i++) {\n                if (s_borrowers[i] == userAddress) {\n                    add = false;\n                }\n            }\n            if (add) {\n                s_borrowers.push(userAddress);\n            }\n        }\n    }\n\n    // * FUNCTION: To remove supplier and his unique token\n    function removeSupplierAndUniqueToken(address tokenAddress, address userAddress) private {\n        if (s_supplyBalances[tokenAddress][userAddress] <= 0) {\n            remove(s_supplierUniqueTokens[userAddress], tokenAddress);\n        }\n\n        if (s_supplierUniqueTokens[userAddress].length == 0) {\n            remove(s_suppliers, userAddress);\n        }\n    }\n\n    // * FUNCTION: To remove borrower and his unique token from array\n    function removeBorrowerAndUniqueToken(address tokenAddress, address userAddress) private {\n        if (s_borrowedBalances[tokenAddress][userAddress] <= 0) {\n            remove(s_borrowerUniqueTokens[userAddress], tokenAddress);\n        }\n        if (s_borrowerUniqueTokens[userAddress].length == 0) {\n            remove(s_borrowers, userAddress);\n        }\n    }\n\n    // * FUNCTION: small algorithm for removing element from an array\n    function remove(address[] storage array, address removingAddress) private {\n        for (uint256 i = 0; i < array.length; i++) {\n            if (array[i] == removingAddress) {\n                array[i] = array[array.length - 1];\n                array.pop();\n            }\n        }\n    }\n\n    ////////////////////////////\n    ///   getter functions   ///\n    ////////////////////////////\n\n    function getTokenTotalSupply(address tokenAddress) external view returns (uint256) {\n        return s_totalSupply[tokenAddress];\n    }\n\n    function getAllTokenSupplyInUsd() external view returns (uint256) {\n        uint256 totalValue = 0;\n        for (uint256 i = 0; i < s_allowedTokens.length; i++) {\n            (uint256 price, uint256 decimals) = getLatestPrice(s_allowedTokens[i]);\n\n            totalValue += ((price / 10**decimals) * s_totalSupply[s_allowedTokens[i]]);\n        }\n        return totalValue;\n    }\n\n    function getSupplyBalance(address tokenAddress, address userAddress)\n        public\n        view\n        returns (uint256)\n    {\n        return s_supplyBalances[tokenAddress][userAddress];\n    }\n\n    function getLockedBalance(address tokenAddress, address userAddress)\n        external\n        view\n        returns (uint256)\n    {\n        return s_lockedBalances[tokenAddress][userAddress];\n    }\n\n    function getBorrowedBalance(address tokenAddress, address userAddress)\n        external\n        view\n        returns (uint256)\n    {\n        return s_borrowedBalances[tokenAddress][userAddress];\n    }\n\n    function getLatestPrice(address tokenAddress) public view returns (uint256, uint256) {\n        (, int256 price, , , ) = s_priceFeeds[tokenAddress].latestRoundData();\n        uint256 decimals = uint256(s_priceFeeds[tokenAddress].decimals());\n        return (uint256(price), decimals);\n    }\n\n    // * FUNCTION: returns max borrow allowed to a user\n    function getMaxBorrow(address userAddress) public view returns (uint256) {\n        uint256 availableAmountValue = (getTotalSupplyValue(userAddress) +\n            getTotalAllowedValue(userAddress)) -\n            (((uint256(100) * getTotalBorrowValue(userAddress)) / uint256(80)) +\n                getTotalLockedValue(userAddress));\n\n        return (availableAmountValue * uint256(80)) / uint256(100);\n    }\n\n    function getMaxWithdraw(address tokenAddress, address userAddress)\n        external\n        view\n        returns (uint256)\n    {\n        uint256 availableAmount = s_supplyBalances[tokenAddress][userAddress] -\n            (((uint256(100) * s_borrowedBalances[tokenAddress][userAddress]) / uint256(80)) +\n                s_lockedBalances[tokenAddress][userAddress]);\n\n        return availableAmount;\n    }\n\n    function getMaxTokenBorrow(address tokenAddress, address userAddress)\n        external\n        view\n        returns (uint256)\n    {\n        uint256 availableAmountValue = (getTotalSupplyValue(userAddress) +\n            getTotalAllowedValue(userAddress)) -\n            (((uint256(100) * getTotalBorrowValue(userAddress)) / uint256(80)) +\n                getTotalLockedValue(userAddress));\n\n        (uint256 price, uint256 decimals) = getLatestPrice(tokenAddress);\n        return ((availableAmountValue / (price / 10**decimals)) * uint256(80)) / uint256(100);\n    }\n\n    function getTotalSupplyValue(address userAddress) public view returns (uint256) {\n        uint256 totalValue = 0;\n        for (uint256 i = 0; i < s_allowedTokens.length; i++) {\n            (uint256 price, uint256 decimals) = getLatestPrice(s_allowedTokens[i]);\n\n            totalValue += ((price / 10**decimals) *\n                s_supplyBalances[s_allowedTokens[i]][userAddress]);\n        }\n        return totalValue;\n    }\n\n    function getTotalLockedValue(address userAddress) public view returns (uint256) {\n        uint256 totalValue = 0;\n        for (uint256 i = 0; i < s_allowedTokens.length; i++) {\n            (uint256 price, uint256 decimals) = getLatestPrice(s_allowedTokens[i]);\n\n            totalValue += ((price / 10**decimals) *\n                s_lockedBalances[s_allowedTokens[i]][userAddress]);\n        }\n        return totalValue;\n    }\n\n    function getTotalAllowedValue(address userAddress) public view returns (uint256) {\n        uint256 totalValue = 0;\n        for (uint256 i = 0; i < s_allowedTokens.length; i++) {\n            (uint256 price, uint256 decimals) = getLatestPrice(s_allowedTokens[i]);\n\n            totalValue += ((price / 10**decimals) *\n                s_allowedBalances[s_allowedTokens[i]][userAddress]);\n        }\n        return totalValue;\n    }\n\n    function getTotalBorrowValue(address userAddress) public view returns (uint256) {\n        uint256 totalValue = 0;\n        for (uint256 i = 0; i < s_allowedTokens.length; i++) {\n            (uint256 price, uint256 decimals) = getLatestPrice(s_allowedTokens[i]);\n            totalValue += ((price / 10**decimals) *\n                s_borrowedBalances[s_allowedTokens[i]][userAddress]);\n        }\n        return totalValue;\n    }\n\n    function getAllowedTokens() external view returns (address[] memory) {\n        return s_allowedTokens;\n    }\n\n    function getSuppliers() external view returns (address[] memory) {\n        return s_suppliers;\n    }\n\n    function getBorrowers() external view returns (address[] memory) {\n        return s_borrowers;\n    }\n\n    function getUniqueSupplierTokens(address userAddress)\n        external\n        view\n        returns (address[] memory)\n    {\n        return s_supplierUniqueTokens[userAddress];\n    }\n\n    function getUniqueBorrowerTokens(address userAddress)\n        external\n        view\n        returns (address[] memory)\n    {\n        return s_borrowerUniqueTokens[userAddress];\n    }\n\n    function getInterval() external view returns (uint256) {\n        return i_interval;\n    }\n\n    /////////////////////////////\n    ///   Interface Functions ///\n    /////////////////////////////\n\n    // function setCreditLogicContract(address _starkProtocolAddress) external onlyOwner {\n    //     starkContract = Istark_protocol(_starkProtocolAddress);\n    //     starkProtocolAddress = _starkProtocolAddress;\n    // }\n\n    // * FUNCTION: To Lock the Balance of the lender\n\n    mapping(address => mapping(address => uint256)) s_allowedBalances;\n\n    function lockBalanceChanges(\n        address _tokenAddress,\n        address _lender,\n        address _borrower,\n        uint256 _tokenAmount\n    ) public onlyAllowedContracts(msg.sender) {\n        s_lockedBalances[_tokenAddress][_lender] += _tokenAmount;\n        s_allowedBalances[_tokenAddress][_borrower] += _tokenAmount;\n\n        // emit Event to Lender that his funds are locked\n\n        // requestChange_LendBalance(_tokenAddress, _borrower, _tokenAmount);\n    }\n\n    // * FUNCTION: To transfer the funds to the Borrower Balance\n    // function requestChange_LendBalance(\n    //     address _tokenAddress,\n    //     address _borrower,\n    //     uint256 _tokenAmount\n    // ) internal {\n    //     s_supplyBalances[_tokenAddress][_borrower] += _tokenAmount;\n\n    //     s_totalSupply[_tokenAddress] -= _tokenAmount;\n\n    //     // emit Event to Borrower that he received the funds\n    // }\n\n    // * FUNCTION: Deployer will add the guaranty contract in the List.\n    function addAllowContracts(address _contractAddress)\n        external\n        onlyAllowedContracts(msg.sender)\n    {\n        s_allowedContracts.push(_contractAddress);\n        // emit Event (optional)\n    }\n\n    // * FUNCTION: Guaranty Contracts will change the balances after repayment.\n    function repayChanges(\n        address _tokenAddress,\n        address _lender,\n        address _borrower,\n        uint256 _tokenAmount\n    ) external onlyAllowedContracts(msg.sender) {\n        s_borrowedBalances[_tokenAddress][_borrower] -= _tokenAmount;\n        s_totalSupply[_tokenAddress] += _tokenAmount;\n        s_lockedBalances[_tokenAddress][_lender] -= _tokenAmount;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/KeeperCompatible.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./KeeperBase.sol\";\nimport \"./interfaces/KeeperCompatibleInterface.sol\";\n\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\n"
    },
    "@chainlink/contracts/src/v0.8/KeeperBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract KeeperBase {\n  error OnlySimulatedBackend();\n\n  /**\n   * @notice method that allows it to be simulated via eth_call by checking that\n   * the sender is the zero address.\n   */\n  function preventExecution() internal view {\n    if (tx.origin != address(0)) {\n      revert OnlySimulatedBackend();\n    }\n  }\n\n  /**\n   * @notice modifier that allows it to be simulated via eth_call by checking\n   * that the sender is the zero address.\n   */\n  modifier cannotExecute() {\n    preventExecution();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface KeeperCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/test-tokens/WETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract WETH is ERC20 {\n    constructor() ERC20(\"Mock Weth\", \"WETH\") {\n        _mint(msg.sender, 100000000000000000000000000000000000);\n    }\n}\n"
    },
    "contracts/test-tokens/WBTC.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract WBTC is ERC20 {\n    constructor() ERC20(\"Mock WBTC\", \"WBTC\") {\n        _mint(msg.sender, 1000000000000000000000000000000000);\n    }\n}\n"
    },
    "contracts/test-tokens/USDC.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract USDC is ERC20 {\n    constructor() ERC20(\"Mock USDC\", \"USDC\") {\n        _mint(msg.sender, 10000000000000000000000000000000000000000);\n    }\n}\n"
    },
    "contracts/test-tokens/ST.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract ST is ERC20 {\n    constructor() ERC20(\"Stark Token\", \"ST\") {\n        _mint(msg.sender, 10000000000000000000000000000000);\n    }\n}\n"
    },
    "contracts/test-tokens/DAI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract DAI is ERC20 {\n    constructor() ERC20(\"Mock Dai\", \"DAI\") {\n        _mint(msg.sender, 10000000000000000000000000000000000000);\n    }\n}\n"
    },
    "contracts/guaranty/Guaranty.sol": {
      "content": "// // SPDX-License-Identifier: MIT\n// pragma solidity 0.8.15;\n\n// import \"@openzeppelin/contracts/utils/Context.sol\";\n// import \"../interfaces/IStark.sol\";\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n// import \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n// import \"hardhat/console.sol\";\n\n// contract Guaranty is Context, ReentrancyGuard {\n//     address private deployer;\n//     address private borrower;\n//     address private lender;\n//     address private tokenAddress;\n//     // address private starkAddress;\n\n//     Istark_protocol starkContract;\n\n//     struct GuarantyDetails {\n//         uint256 totalAmount; // * Total amount borrowed by the borrower\n//         uint256 totalAmountToPay; // * Total amount left to be paid\n//         uint256 amountPaidTotal; // * Amount paid by the borrower in total\n//         uint256 timeRentedSince; // * Time when the deal started\n//         uint256 timeRentedUntil; // * Time when the deal will end\n//     }\n\n//     GuarantyDetails private deal;\n\n//     address private stark;\n\n//     constructor(\n//         address _borrower,\n//         address _lender,\n//         address _starkAddress,\n//         address _tokenAddress,\n//         uint256 _totalAmount,\n//         uint256 _timeRentedUntil\n//     ) {\n//         deployer = _msgSender();\n//         borrower = _borrower;\n//         lender = _lender;\n//         starkContract = Istark_protocol(_starkAddress);\n//         tokenAddress = _tokenAddress;\n\n//         GuarantyDetails storage dealDetails = deal;\n//         dealDetails.timeRentedSince = block.timestamp;\n//         dealDetails.timeRentedUntil = block.timestamp + _timeRentedUntil;\n//         dealDetails.totalAmount = _totalAmount;\n//         stark = _starkAddress;\n//     }\n\n//     modifier onlyBorrower() {\n//         require(msg.sender == borrower, \"ERR:Borrower only\"); // BO => Borrower only\n//         _;\n//     }\n\n//     // * FUNCTION: To get the address of the borrower.\n//     function getBorrower() public view returns (address) {\n//         return borrower;\n//     }\n\n//     // * FUNCTION: To get the address of the lender.\n//     function getLender() public view returns (address) {\n//         return lender;\n//     }\n\n//     // * FUNCTION: To get the detials of the Deal.\n//     function getDealDetails() public view returns (GuarantyDetails memory) {\n//         return deal;\n//     }\n\n//     // * FUNCTION: To get the amount left to be paid\n//     function getTotalAmountLeft() public view returns (uint256) {\n//         return deal.totalAmountToPay;\n//     }\n\n//     function repay(uint256 value) external payable onlyBorrower nonReentrant {\n//         GuarantyDetails memory dealDetails = deal;\n//         require(\n//             dealDetails.amountPaidTotal < dealDetails.totalAmount,\n//             \"ERR: No more installments\"\n//         ); // NM => No more installments\n\n//         // uint256  = msg.value;\n//         require(value > 0, \"ERR: Minimum Amount should be greater than zero\"); // MA => Minimum Amount should be greater than zero\n\n//         // (bool success,) = lender.call{value: value}(\"\");\n//         // require(success, \"ERR:OT\"); //OT => On Transfer\n//         IERC20(tokenAddress).transferFrom(msg.sender, address(this), value);\n        \n//         deal.amountPaidTotal += value;\n\n//         starkContract.repayChanges(tokenAddress, lender, borrower, value);\n\n//         // if (dealDetails.amountPaidTotal == dealDetails.totalAmount) {\n//         //     // emit Event\n//         // }\n//     }\n// }\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}