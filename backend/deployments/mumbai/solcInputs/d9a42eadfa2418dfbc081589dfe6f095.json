{
  "language": "Solidity",
  "sources": {
    "contracts/CreditLogic.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"./p2p/Deal.sol\";\nimport \"./interfaces/IStark.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract CreditLogic is Context, Ownable {\n    // Deal private dealContract;\n    Istark_protocol starkContract;\n    address private starkProtocolAddress;\n    address[] private guarantors;\n\n    function setStarkAddress(address _starkProtocolAddress) external onlyOwner {\n        starkContract = Istark_protocol(_starkProtocolAddress);\n        starkProtocolAddress = _starkProtocolAddress;\n    }\n\n    // struct P2PRequest {\n    //     address borrower; // * Address of the borrower\n    //     address lender; // * Address of the Lender\n    //     address dealAddress; // * Address of the Deal Contract\n    //     address tokenAddress;\n    //     uint256 instalmentAmount; //* Amount to be paid in each instalment\n    //     uint256 totalAmount; // * Total Amount borrowed\n    //     uint256 interestRate; // * Interest Rate by the Lender\n    //     uint16 noOfInstalments; // * No of Instalments\n    //     bool requestAccepted; // * Request Raised by the lender accepted or not\n    // }\n\n    struct GuarantyRequest {\n        address borrower; // * Address of the borrower\n        address lender; // * Address of the Lender\n        address dealAddress;\n        address tokenAddress;\n        uint256 totalAmount; // * Amount looking for the guaranty\n        uint256 timeRentedUntil;\n        bool requestAccepted; // * Request Raised by the lender accepted or not\n    }\n\n    // * To store all the GuarantyRequest made in the protocol\n    // guarantyRequests[_lender][_borrower]\n    mapping(address => mapping(address => GuarantyRequest)) private guarantyRequests;\n\n    // * To store all the p2pRequests made in the protocol\n    // lender & borrower -> request\n    // mapping(address => mapping(address => P2PRequest)) private p2pRequests;\n\n    ///////////////////////\n    //// p2p functions ///\n    //////////////////////\n\n    // * FUNCTION: To deploy the Deal Contract\n    // function p2pDeploy(address _lender, address _borrower) internal {\n    //     P2PRequest memory requestDetails = p2pRequests[_lender][_borrower];\n\n    //     dealContract = new Deal(\n    //         requestDetails.borrower,\n    //         requestDetails.lender,\n    //         starkProtocolAddress,\n    //         requestDetails.tokenAddress,\n    //         requestDetails.instalmentAmount,\n    //         requestDetails.totalAmount,\n    //         requestDetails.interestRate,\n    //         requestDetails.noOfInstalments\n    //     );\n\n    //     p2pRequests[requestDetails.lender][requestDetails.borrower].dealAddress = address(\n    //         dealContract\n    //     );\n\n    //     starkContract.addAllowContracts(address(dealContract));\n\n    //     // emit Event to notify both lender and borrower\n    // }\n\n    // // * FUNCTION: To raise the P2PRequest to borrow\n    // function p2pRaiseRequest(\n    //     uint256 _instalmentAmount,\n    //     uint256 _totalAmount,\n    //     uint256 _interestRate,\n    //     uint16 _noOfInstalments,\n    //     address _lender,\n    //     address _tokenAddress\n    // ) external {\n    //     require(!p2pRequests[_lender][_msgSender()].requestAccepted, \"ERR:RA\"); // RA => Request Accepted\n\n    //     P2PRequest memory requestDetails;\n\n    //     requestDetails.borrower = _msgSender();\n    //     requestDetails.lender = _lender;\n    //     requestDetails.instalmentAmount = _instalmentAmount;\n    //     requestDetails.totalAmount = _totalAmount;\n    //     requestDetails.interestRate = _interestRate;\n    //     requestDetails.noOfInstalments = _noOfInstalments;\n    //     requestDetails.tokenAddress = _tokenAddress;\n\n    //     p2pRequests[_lender][_msgSender()] = requestDetails;\n\n    //     // emit event to notify lender\n    // }\n\n    // // * FUNCTION: To accept the P2PRequest made by the borrower\n    // function p2pAcceptRequest(address _borrower) external payable {\n    //     P2PRequest memory requestDetails = p2pRequests[_msgSender()][_borrower];\n\n    //     require(!requestDetails.requestAccepted, \"ERR:AA\"); // AA =>Already Accepted\n    //     uint256 tokenAmountinProtocol = starkContract.getSupplyBalance(\n    //         requestDetails.tokenAddress,\n    //         _msgSender()\n    //     );\n    //     require(requestDetails.totalAmount <= tokenAmountinProtocol, \"ERR:NE\"); // NA => Not Enough Amount\n\n    //     starkContract.lockBalanceChanges(\n    //         requestDetails.tokenAddress,\n    //         _msgSender(),\n    //         _borrower,\n    //         requestDetails.totalAmount\n    //     );\n\n    //     p2pRequests[_msgSender()][_borrower].requestAccepted = true;\n\n    //     p2pDeploy(_msgSender(), _borrower);\n\n    //     // emit event to notify borrower\n    // }\n\n    ////////////////////////////\n    ///// guaranty functions ///\n    ////////////////////////////\n\n    // * FUNCTION: To raise the request for backing the loan from the protocol\n    function guarantyRaiseRequest(\n        address _lender,\n        address _tokenAddress,\n        uint256 _totalAmount,\n        uint256 _timeRentedUntil\n    ) external {\n        require(!guarantyRequests[_lender][_msgSender()].requestAccepted, \"Err: Already Raised\");\n\n        GuarantyRequest memory requestDetails;\n        requestDetails.borrower = _msgSender();\n        requestDetails.lender = _lender;\n        requestDetails.totalAmount = _totalAmount;\n        requestDetails.timeRentedUntil = _timeRentedUntil;\n        requestDetails.tokenAddress = _tokenAddress;\n        guarantors.push(_lender);\n\n        guarantyRequests[_lender][_msgSender()] = requestDetails;\n        // emit event to notify lender\n    }\n\n    // * FUNCTION: To accept the GuarantyRequest made by the borrower\n    function guarantyAcceptRequest(address _borrower) external {\n        GuarantyRequest memory requestDetails = guarantyRequests[_msgSender()][_borrower];\n\n        require(!requestDetails.requestAccepted, \"ERR: Already Accepted\"); // AA =>Already Accepted\n\n        uint256 tokenAmountinProtocol = starkContract.getSupplyBalance(\n            requestDetails.tokenAddress,\n            _msgSender()\n        );\n\n        require(requestDetails.totalAmount <= tokenAmountinProtocol, \"ERR: Not Enough Amount\"); // NA => Not Enough Amount\n\n        starkContract.lockBalanceChanges(\n            requestDetails.tokenAddress,\n            _msgSender(),\n            _borrower,\n            requestDetails.totalAmount\n        );\n\n        guarantyRequests[_msgSender()][_borrower].requestAccepted = true;\n        // emit event to notify borrower\n    }\n\n    //////////////////////////\n    ///// getter functions ///\n    /////////////////////////\n\n    // * FUNCTION: To get the p2pRequests made by a particualr address\n    // function getP2PRequest(address _lender, address _borrower)\n    //     external\n    //     view\n    //     returns (P2PRequest memory)\n    // {\n    //     return p2pRequests[_lender][_borrower];\n    // }\n\n    // * FUNCTION: To get the p2pRequests made by a particualr address\n    function getGuarantyRequest(address _lender, address _borrower)\n        external\n        view\n        returns (GuarantyRequest memory)\n    {\n        return guarantyRequests[_lender][_borrower];\n    }\n\n    function getGuarantors() external view returns (address[] memory) {\n        return guarantors;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/p2p/Deal.sol": {
      "content": "// //SPDX-License-Identifier: Unlicense\n// pragma solidity 0.8.15;\n\n// import \"@openzeppelin/contracts/utils/Context.sol\";\n// import \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n// import \"../interfaces/IStark.sol\";\n\n// contract Deal is Context {\n//     using SafeMath for uint256;\n\n//     address private deployer;\n//     address private borrower;\n//     address private lender;\n\n//     Istark_protocol starkContract;\n\n//     struct DealDetials {\n//         address tokenAddress;\n//         uint256 totalAmount; // * Total amount borrowed by the borrower\n//         uint256 totalAmountToPay; // * Total amount including interest left to be paid\n//         uint256 amountPaidTotal; // * Amount paid by the borrower in total\n//         uint256 instalmentAmt; // * Amount to be paid per insalment\n//         uint256 timeRentedSince; // * Time when the deal started\n//         uint256 interestRate; // * Interest rate decided by the lender.\n//         uint256 addedInterestRate; // * Additional Interest Rate for additional no. of instalments.\n//         uint16 noOfInstalments; // * No of instalments in which borrower will pay amount\n//         bool addedInstalments; // * If borrower got more instalments after request.\n//     }\n\n//     DealDetials private deal;\n\n//     struct AdditionalRequest {\n//         uint16 noOfInstalments; // * No of additional instalments\n//         uint256 interestRate; // * Interest Rate\n//         bool isAccepted; // * Request Accepted or Not\n//     }\n\n//     mapping(address => AdditionalRequest) additionRequest;\n\n//     constructor(\n//         address _borrower,\n//         address _lender,\n//         address _starkAddress,\n//         address _tokenAddress,\n//         uint256 _instalmentAmount,\n//         uint256 _totalAmount,\n//         uint256 _interestRate,\n//         uint16 _noOfInstalments\n//     ) {\n//         deployer = _msgSender();\n//         borrower = _borrower;\n//         lender = _lender;\n//         starkContract = Istark_protocol(_starkAddress);\n\n//         DealDetials storage dealDetails = deal;\n\n//         dealDetails.noOfInstalments = _noOfInstalments;\n//         dealDetails.totalAmount = _totalAmount;\n//         dealDetails.interestRate = _interestRate;\n//         dealDetails.timeRentedSince = uint256(block.timestamp);\n//         dealDetails.instalmentAmt = getInstalmentAmount(_instalmentAmount);\n//         dealDetails.totalAmountToPay = _totalAmount + dealDetails.instalmentAmt;\n//         dealDetails.tokenAddress = _tokenAddress;\n//     }\n\n//     modifier onlyBorrower() {\n//         require(msg.sender == borrower, \"ERR:BO\"); // BO => Borrower only\n//         _;\n//     }\n\n//     modifier onlyLender() {\n//         require(msg.sender == lender, \"ERR:LO\"); // BL => Lender only\n//         _;\n//     }\n\n//     // * FUNCTION: To get the address of the borrower.\n//     function getBorrower() public view returns (address) {\n//         return borrower;\n//     }\n\n//     // * FUNCTION: To get the address of the lender.\n//     function getLender() public view returns (address) {\n//         return lender;\n//     }\n\n//     // * FUNCTION: To get the detials of the Deal.\n//     function getDealDetails() public view returns (DealDetials memory) {\n//         return deal;\n//     }\n\n//     // * FUNCTION: To get the Instalment Amount\n//     function getInstalmentAmount(uint256 _instalmentAmount) public view returns (uint256) {\n//         DealDetials memory dealDetails = deal;\n//         uint256 interestAmount = (_instalmentAmount * dealDetails.interestRate).div(\n//             uint256(dealDetails.noOfInstalments  * 100)\n//         );\n\n//         uint256 instalmentAmount = _instalmentAmount + interestAmount;\n//         return instalmentAmount;\n//     }\n\n//     // * FUNCTION: To get the number of instalments\n//     function getNoOfInstalments() public view returns (uint16) {\n//         return deal.noOfInstalments;\n//     }\n\n//     // * FUNCTION: To get the total amount owed\n//     function getTotalAmountOwed() public view returns (uint256) {\n//         return deal.totalAmount;\n//     }\n\n//     // * FUNCTION: To get the amount left to be paid\n//     function getTotalAmountLeft() public view returns (uint256) {\n//         return deal.totalAmountToPay;\n//     }\n\n//     // * FUNCTION: To get the interest rate\n//     function getInterestRate() public view returns (uint256) {\n//         return deal.interestRate;\n//     }\n\n//     // * FUNCTION: Pay the amount left at once\n//     function payAtOnce() external onlyBorrower {\n//         DealDetials memory dealDetails = deal;\n//         require(dealDetails.noOfInstalments > 0, \"ERR:NM\"); // NM => No more installments\n//         require(dealDetails.amountPaidTotal < dealDetails.totalAmount, \"ERR:NM\"); // NM => No more installments\n\n//         // uint256 value = msg.value;\n//         uint256 amountLeftToPay = getTotalAmountLeft();\n//         // require(value == amountLeftToPay, \"ERR:WV\"); // WV => Wrong value\n\n//         starkContract.repayChanges(dealDetails.tokenAddress, lender, borrower, amountLeftToPay);\n\n//         deal.amountPaidTotal += amountLeftToPay;\n//         deal.totalAmountToPay -= amountLeftToPay;\n//     }\n\n//     // * FUNCTION: Pay the pre-defined amount in instalments not necessarily periodically.\n//     function payInInstalment() external payable onlyBorrower {\n//         DealDetials memory dealDetails = deal;\n\n//         require(dealDetails.noOfInstalments > 0, \"ERR:NM\"); // NM => No more installments\n//         require(dealDetails.amountPaidTotal < dealDetails.totalAmount, \"ERR:NM\"); // NM => No more installments\n\n//         // * amtToLenderOnly: Amount with standard interest\n//         uint256 amtToLenderOnly = dealDetails.instalmentAmt;\n\n//         if (dealDetails.addedInstalments) {\n//             // * totalInterestedAmount: Amount after additional interest is added\n//             uint256 totalInterestedAmount = amtToLenderOnly +\n//                 (dealDetails.addedInterestRate * dealDetails.instalmentAmt);\n\n//             // require(value == totalInterestedAmount, \"ERR:WV\"); // WV => Wrong value\n\n//             // * amtToLender: Amount after with 95% of additional interest is added\n//             uint256 amtToLender = amtToLenderOnly +\n//                 (dealDetails.instalmentAmt * dealDetails.addedInterestRate * 95 * 10**16);\n\n//             // * amtToProtocol: Amount after with 5% of additional interest is added\n//             uint256 amtToProtocol = dealDetails.instalmentAmt *\n//                 dealDetails.addedInterestRate *\n//                 5 *\n//                 10**16;\n\n//             // (bool successInLender, ) = lender.call{value: amtToLender}(\"\");\n//             // require(successInLender, \"ERR:OT\"); //OT => On Transfer\n\n//             starkContract.repayChanges(dealDetails.tokenAddress, lender, borrower, amtToLender);\n\n//             // (bool successInBorrower, ) = deployer.call{value: amtToProtocol}(\"\");\n//             // require(successInBorrower, \"ERR:OT\"); //OT => On Transfer\n//             deal.amountPaidTotal += amtToLender;\n//             deal.totalAmountToPay -= amtToLender;\n//             //! TODO: Function to pass the value to the protocol\n//         } else {\n//             starkContract.repayChanges(\n//                 dealDetails.tokenAddress,\n//                 lender,\n//                 borrower,\n//                 amtToLenderOnly\n//             );\n\n//             deal.amountPaidTotal += amtToLenderOnly;\n//             deal.totalAmountToPay -= amtToLenderOnly;\n//         }\n//         --deal.noOfInstalments;\n//     }\n\n//     // * FUNCTION: Request the Lender for more instalments\n//     function requestNoOfInstalment(uint16 noOfAddInstalments, uint256 _interestRate)\n//         external\n//         onlyBorrower\n//     {\n//         require(noOfAddInstalments >= 3, \"ERR:MR\"); // MR => Minimum required no of instalments\n\n//         additionRequest[_msgSender()] = AdditionalRequest(\n//             noOfAddInstalments,\n//             _interestRate,\n//             false\n//         );\n\n//         // emit event\n//     }\n\n//     // * FUNCTION: Accept the request made the Lender for more instalments\n//     function acceptRequestOfInstalment(\n//         address _borrower,\n//         uint16 _noOfAddInstalments,\n//         uint256 _interestRate\n//     ) external onlyLender {\n//         require(!additionRequest[_borrower].isAccepted, \"ERR:AA\"); // AA => Already Accepted\n\n//         additionRequest[_borrower].isAccepted = true;\n\n//         deal.noOfInstalments += _noOfAddInstalments;\n//         deal.addedInterestRate = _interestRate;\n//         deal.addedInstalments = true;\n//     }\n// }\n"
    },
    "contracts/interfaces/IStark.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\ninterface Istark_protocol {\n    function getSupplyBalance(address tokenAddress, address userAddress)\n        external\n        view\n        returns (uint256);\n\n    function getLockedBalance(address tokenAddress, address userAddress)\n        external\n        view\n        returns (uint256);\n\n    function lockBalanceChanges(\n        address _tokenAddress,\n        address _lender,\n        address _borrower,\n        uint256 _tokenAmount\n    ) external;\n\n    function addAllowContracts(address _contractAddress) external;\n\n    function repayChanges(\n        address _tokenAddress,\n        address _lender,\n        address _borrower,\n        uint256 _tokenAmount\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}